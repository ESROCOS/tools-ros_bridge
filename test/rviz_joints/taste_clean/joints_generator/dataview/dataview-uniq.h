#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccSint asn1SccT_Int32;


flag asn1SccT_Int32_Equal(const asn1SccT_Int32* pVal1, const asn1SccT_Int32* pVal2);

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_T_INT32		3555  /**/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT32		3556  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		3557  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Int32 asn1SccStd_msgs_Int32;


flag asn1SccStd_msgs_Int32_Equal(const asn1SccStd_msgs_Int32* pVal1, const asn1SccStd_msgs_Int32* pVal2);

void asn1SccStd_msgs_Int32_Initialize(asn1SccStd_msgs_Int32* pVal);

#define ERR_STD_MSGS_INT32		4173  /**/
flag asn1SccStd_msgs_Int32_IsConstraintValid(const asn1SccStd_msgs_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT32_2		4180  /**/
#define asn1SccStd_msgs_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccStd_msgs_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccStd_msgs_Int32_Encode(const asn1SccStd_msgs_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT32_2		4181  /**/
flag asn1SccStd_msgs_Int32_Decode(asn1SccStd_msgs_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


flag asn1SccT_UInt32_Equal(const asn1SccT_UInt32* pVal1, const asn1SccT_UInt32* pVal2);

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_T_UINT32		3562  /**/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT32		3563  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		3564  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt32 asn1SccStd_msgs_UInt32;


flag asn1SccStd_msgs_UInt32_Equal(const asn1SccStd_msgs_UInt32* pVal1, const asn1SccStd_msgs_UInt32* pVal2);

void asn1SccStd_msgs_UInt32_Initialize(asn1SccStd_msgs_UInt32* pVal);

#define ERR_STD_MSGS_UINT32		4746  /**/
flag asn1SccStd_msgs_UInt32_IsConstraintValid(const asn1SccStd_msgs_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT32_2		4753  /**/
#define asn1SccStd_msgs_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccStd_msgs_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccStd_msgs_UInt32_Encode(const asn1SccStd_msgs_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT32_2		4754  /**/
flag asn1SccStd_msgs_UInt32_Decode(asn1SccStd_msgs_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_UInt32 sec;
    asn1SccT_UInt32 nsec;
} asn1SccT_Time;

flag asn1SccT_Time_Equal(const asn1SccT_Time* pVal1, const asn1SccT_Time* pVal2);

void asn1SccT_Time_Initialize(asn1SccT_Time* pVal);

#define ERR_T_TIME_SEC		8645  /**/
#define ERR_T_TIME_NSEC		8656  /**/
flag asn1SccT_Time_IsConstraintValid(const asn1SccT_Time* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_TIME		8667  /**/
#define ERR_UPER_ENCODE_T_TIME_SEC_2		8652  /**/
#define ERR_UPER_ENCODE_T_TIME_NSEC_2		8663  /**/
#define asn1SccT_Time_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_Time_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccT_Time_Encode(const asn1SccT_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_TIME		8668  /**/
#define ERR_UPER_DECODE_T_TIME_SEC_2		8653  /**/
#define ERR_UPER_DECODE_T_TIME_NSEC_2		8664  /**/
flag asn1SccT_Time_Decode(asn1SccT_Time* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Time asn1SccStd_msgs_Duration;


flag asn1SccStd_msgs_Duration_Equal(const asn1SccStd_msgs_Duration* pVal1, const asn1SccStd_msgs_Duration* pVal2);

void asn1SccStd_msgs_Duration_Initialize(asn1SccStd_msgs_Duration* pVal);

#define ERR_STD_MSGS_DURATION_SEC		3757  /**/
#define ERR_STD_MSGS_DURATION_NSEC		3768  /**/
flag asn1SccStd_msgs_Duration_IsConstraintValid(const asn1SccStd_msgs_Duration* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_DURATION_2		3785  /**/
#define asn1SccStd_msgs_Duration_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccStd_msgs_Duration_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccStd_msgs_Duration_Encode(const asn1SccStd_msgs_Duration* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_DURATION_2		3786  /**/
flag asn1SccStd_msgs_Duration_Decode(asn1SccStd_msgs_Duration* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Time asn1SccStd_msgs_Time;


flag asn1SccStd_msgs_Time_Equal(const asn1SccStd_msgs_Time* pVal1, const asn1SccStd_msgs_Time* pVal2);

void asn1SccStd_msgs_Time_Initialize(asn1SccStd_msgs_Time* pVal);

#define ERR_STD_MSGS_TIME_SEC		4608  /**/
#define ERR_STD_MSGS_TIME_NSEC		4619  /**/
flag asn1SccStd_msgs_Time_IsConstraintValid(const asn1SccStd_msgs_Time* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_TIME_2		4636  /**/
#define asn1SccStd_msgs_Time_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccStd_msgs_Time_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccStd_msgs_Time_Encode(const asn1SccStd_msgs_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_TIME_2		4637  /**/
flag asn1SccStd_msgs_Time_Decode(asn1SccStd_msgs_Time* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt32 asn1SccDummy_Geometry_msgs_Types_T;


flag asn1SccDummy_Geometry_msgs_Types_T_Equal(const asn1SccDummy_Geometry_msgs_Types_T* pVal1, const asn1SccDummy_Geometry_msgs_Types_T* pVal2);

void asn1SccDummy_Geometry_msgs_Types_T_Initialize(asn1SccDummy_Geometry_msgs_Types_T* pVal);

#define ERR_DUMMY_GEOMETRY_MSGS_TYPES_T		8673  /**/
flag asn1SccDummy_Geometry_msgs_Types_T_IsConstraintValid(const asn1SccDummy_Geometry_msgs_Types_T* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DUMMY_GEOMETRY_MSGS_TYPES_T_2		8680  /**/
#define asn1SccDummy_Geometry_msgs_Types_T_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccDummy_Geometry_msgs_Types_T_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccDummy_Geometry_msgs_Types_T_Encode(const asn1SccDummy_Geometry_msgs_Types_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DUMMY_GEOMETRY_MSGS_TYPES_T_2		8681  /**/
flag asn1SccDummy_Geometry_msgs_Types_T_Decode(asn1SccDummy_Geometry_msgs_Types_T* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt32 asn1SccDummy_Std_msgs_Types_T;


flag asn1SccDummy_Std_msgs_Types_T_Equal(const asn1SccDummy_Std_msgs_Types_T* pVal1, const asn1SccDummy_Std_msgs_Types_T* pVal2);

void asn1SccDummy_Std_msgs_Types_T_Initialize(asn1SccDummy_Std_msgs_Types_T* pVal);

#define ERR_DUMMY_STD_MSGS_TYPES_T		8684  /**/
flag asn1SccDummy_Std_msgs_Types_T_IsConstraintValid(const asn1SccDummy_Std_msgs_Types_T* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DUMMY_STD_MSGS_TYPES_T_2		8691  /**/
#define asn1SccDummy_Std_msgs_Types_T_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccDummy_Std_msgs_Types_T_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccDummy_Std_msgs_Types_T_Encode(const asn1SccDummy_Std_msgs_Types_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DUMMY_STD_MSGS_TYPES_T_2		8692  /**/
flag asn1SccDummy_Std_msgs_Types_T_Decode(asn1SccDummy_Std_msgs_Types_T* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt32 asn1SccDummy_Sensor_msgs_Types_T;


flag asn1SccDummy_Sensor_msgs_Types_T_Equal(const asn1SccDummy_Sensor_msgs_Types_T* pVal1, const asn1SccDummy_Sensor_msgs_Types_T* pVal2);

void asn1SccDummy_Sensor_msgs_Types_T_Initialize(asn1SccDummy_Sensor_msgs_Types_T* pVal);

#define ERR_DUMMY_SENSOR_MSGS_TYPES_T		8695  /**/
flag asn1SccDummy_Sensor_msgs_Types_T_IsConstraintValid(const asn1SccDummy_Sensor_msgs_Types_T* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DUMMY_SENSOR_MSGS_TYPES_T_2		8702  /**/
#define asn1SccDummy_Sensor_msgs_Types_T_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccDummy_Sensor_msgs_Types_T_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccDummy_Sensor_msgs_Types_T_Encode(const asn1SccDummy_Sensor_msgs_Types_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DUMMY_SENSOR_MSGS_TYPES_T_2		8703  /**/
flag asn1SccDummy_Sensor_msgs_Types_T_Decode(asn1SccDummy_Sensor_msgs_Types_T* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


flag asn1SccT_Int8_Equal(const asn1SccT_Int8* pVal1, const asn1SccT_Int8* pVal2);

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_T_INT8		3569  /**/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT8		3570  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		3571  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Int8 asn1SccStd_msgs_Byte;


flag asn1SccStd_msgs_Byte_Equal(const asn1SccStd_msgs_Byte* pVal1, const asn1SccStd_msgs_Byte* pVal2);

void asn1SccStd_msgs_Byte_Initialize(asn1SccStd_msgs_Byte* pVal);

#define ERR_STD_MSGS_BYTE		3601  /**/
flag asn1SccStd_msgs_Byte_IsConstraintValid(const asn1SccStd_msgs_Byte* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_BYTE_2		3608  /**/
#define asn1SccStd_msgs_Byte_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccStd_msgs_Byte_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccStd_msgs_Byte_Encode(const asn1SccStd_msgs_Byte* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_BYTE_2		3609  /**/
flag asn1SccStd_msgs_Byte_Decode(asn1SccStd_msgs_Byte* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Int8 asn1SccStd_msgs_Int8;


flag asn1SccStd_msgs_Int8_Equal(const asn1SccStd_msgs_Int8* pVal1, const asn1SccStd_msgs_Int8* pVal2);

void asn1SccStd_msgs_Int8_Initialize(asn1SccStd_msgs_Int8* pVal);

#define ERR_STD_MSGS_INT8		4385  /**/
flag asn1SccStd_msgs_Int8_IsConstraintValid(const asn1SccStd_msgs_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT8_2		4392  /**/
#define asn1SccStd_msgs_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccStd_msgs_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccStd_msgs_Int8_Encode(const asn1SccStd_msgs_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT8_2		4393  /**/
flag asn1SccStd_msgs_Int8_Decode(asn1SccStd_msgs_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


flag asn1SccT_UInt8_Equal(const asn1SccT_UInt8* pVal1, const asn1SccT_UInt8* pVal2);

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_T_UINT8		3576  /**/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT8		3577  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		3578  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt8 asn1SccStd_msgs_Char;


flag asn1SccStd_msgs_Char_Equal(const asn1SccStd_msgs_Char* pVal1, const asn1SccStd_msgs_Char* pVal2);

void asn1SccStd_msgs_Char_Initialize(asn1SccStd_msgs_Char* pVal);

#define ERR_STD_MSGS_CHAR		3696  /**/
flag asn1SccStd_msgs_Char_IsConstraintValid(const asn1SccStd_msgs_Char* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_CHAR_2		3703  /**/
#define asn1SccStd_msgs_Char_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccStd_msgs_Char_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccStd_msgs_Char_Encode(const asn1SccStd_msgs_Char* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_CHAR_2		3704  /**/
flag asn1SccStd_msgs_Char_Decode(asn1SccStd_msgs_Char* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt8 asn1SccStd_msgs_UInt8;


flag asn1SccStd_msgs_UInt8_Equal(const asn1SccStd_msgs_UInt8* pVal1, const asn1SccStd_msgs_UInt8* pVal2);

void asn1SccStd_msgs_UInt8_Initialize(asn1SccStd_msgs_UInt8* pVal);

#define ERR_STD_MSGS_UINT8		4958  /**/
flag asn1SccStd_msgs_UInt8_IsConstraintValid(const asn1SccStd_msgs_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT8_2		4965  /**/
#define asn1SccStd_msgs_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccStd_msgs_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccStd_msgs_UInt8_Encode(const asn1SccStd_msgs_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT8_2		4966  /**/
flag asn1SccStd_msgs_UInt8_Decode(asn1SccStd_msgs_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


flag asn1SccT_Boolean_Equal(const asn1SccT_Boolean* pVal1, const asn1SccT_Boolean* pVal2);

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_T_BOOLEAN		3583  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_BOOLEAN		3584  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		3585  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_UInt32 x_offset;
    asn1SccT_UInt32 y_offset;
    asn1SccT_UInt32 height;
    asn1SccT_UInt32 width;
    asn1SccT_Boolean do_rectify;
} asn1SccSensor_msgs_RegionOfInterest;

flag asn1SccSensor_msgs_RegionOfInterest_Equal(const asn1SccSensor_msgs_RegionOfInterest* pVal1, const asn1SccSensor_msgs_RegionOfInterest* pVal2);

void asn1SccSensor_msgs_RegionOfInterest_Initialize(asn1SccSensor_msgs_RegionOfInterest* pVal);

#define ERR_SENSOR_MSGS_REGIONOFINTEREST_X_OFFSET		3197  /**/
#define ERR_SENSOR_MSGS_REGIONOFINTEREST_Y_OFFSET		3208  /**/
#define ERR_SENSOR_MSGS_REGIONOFINTEREST_HEIGHT		3219  /**/
#define ERR_SENSOR_MSGS_REGIONOFINTEREST_WIDTH		3230  /**/
#define ERR_SENSOR_MSGS_REGIONOFINTEREST_DO_RECTIFY		3241  /**/
flag asn1SccSensor_msgs_RegionOfInterest_IsConstraintValid(const asn1SccSensor_msgs_RegionOfInterest* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_REGIONOFINTEREST		3252  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_REGIONOFINTEREST_X_OFFSET_2		3204  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_REGIONOFINTEREST_Y_OFFSET_2		3215  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_REGIONOFINTEREST_HEIGHT_2		3226  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_REGIONOFINTEREST_WIDTH_2		3237  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_REGIONOFINTEREST_DO_RECTIFY_2		3248  /**/
#define asn1SccSensor_msgs_RegionOfInterest_REQUIRED_BYTES_FOR_ENCODING       17 
#define asn1SccSensor_msgs_RegionOfInterest_REQUIRED_BITS_FOR_ENCODING        129

flag asn1SccSensor_msgs_RegionOfInterest_Encode(const asn1SccSensor_msgs_RegionOfInterest* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_REGIONOFINTEREST		3253  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_REGIONOFINTEREST_X_OFFSET_2		3205  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_REGIONOFINTEREST_Y_OFFSET_2		3216  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_REGIONOFINTEREST_HEIGHT_2		3227  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_REGIONOFINTEREST_WIDTH_2		3238  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_REGIONOFINTEREST_DO_RECTIFY_2		3249  /**/
flag asn1SccSensor_msgs_RegionOfInterest_Decode(asn1SccSensor_msgs_RegionOfInterest* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Boolean asn1SccStd_msgs_Bool;


flag asn1SccStd_msgs_Bool_Equal(const asn1SccStd_msgs_Bool* pVal1, const asn1SccStd_msgs_Bool* pVal2);

void asn1SccStd_msgs_Bool_Initialize(asn1SccStd_msgs_Bool* pVal);

#define ERR_STD_MSGS_BOOL		3590  /**/
flag asn1SccStd_msgs_Bool_IsConstraintValid(const asn1SccStd_msgs_Bool* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_BOOL_2		3597  /**/
#define asn1SccStd_msgs_Bool_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccStd_msgs_Bool_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccStd_msgs_Bool_Encode(const asn1SccStd_msgs_Bool* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_BOOL_2		3598  /**/
flag asn1SccStd_msgs_Bool_Decode(asn1SccStd_msgs_Bool* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
} asn1SccStd_msgs_Empty;

flag asn1SccStd_msgs_Empty_Equal(const asn1SccStd_msgs_Empty* pVal1, const asn1SccStd_msgs_Empty* pVal2);

void asn1SccStd_msgs_Empty_Initialize(asn1SccStd_msgs_Empty* pVal);

#define asn1SccStd_msgs_Empty_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccStd_msgs_Empty_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccStd_msgs_Empty_Encode(const asn1SccStd_msgs_Empty* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccStd_msgs_Empty_Decode(asn1SccStd_msgs_Empty* pVal, BitStream* pBitStrm, int* pErrCode);
typedef double asn1SccT_Double;


flag asn1SccT_Double_Equal(const asn1SccT_Double* pVal1, const asn1SccT_Double* pVal2);

void asn1SccT_Double_Initialize(asn1SccT_Double* pVal);

#define ERR_T_DOUBLE		8596  /**/
flag asn1SccT_Double_IsConstraintValid(const asn1SccT_Double* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_DOUBLE		8597  /**/
#define asn1SccT_Double_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Double_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccT_Double_Encode(const asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_DOUBLE		8598  /**/
flag asn1SccT_Double_Decode(asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Double asn1SccStd_msgs_Float64;


flag asn1SccStd_msgs_Float64_Equal(const asn1SccStd_msgs_Float64* pVal1, const asn1SccStd_msgs_Float64* pVal2);

void asn1SccStd_msgs_Float64_Initialize(asn1SccStd_msgs_Float64* pVal);

#define ERR_STD_MSGS_FLOAT64		3901  /**/
flag asn1SccStd_msgs_Float64_IsConstraintValid(const asn1SccStd_msgs_Float64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_FLOAT64_2		3908  /**/
#define asn1SccStd_msgs_Float64_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccStd_msgs_Float64_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccStd_msgs_Float64_Encode(const asn1SccStd_msgs_Float64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_FLOAT64_2		3909  /**/
flag asn1SccStd_msgs_Float64_Decode(asn1SccStd_msgs_Float64* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double x;
    asn1SccT_Double y;
    asn1SccT_Double z;
} asn1SccGeometry_msgs_Point;

flag asn1SccGeometry_msgs_Point_Equal(const asn1SccGeometry_msgs_Point* pVal1, const asn1SccGeometry_msgs_Point* pVal2);

void asn1SccGeometry_msgs_Point_Initialize(asn1SccGeometry_msgs_Point* pVal);

#define ERR_GEOMETRY_MSGS_POINT_X		5949  /**/
#define ERR_GEOMETRY_MSGS_POINT_Y		5960  /**/
#define ERR_GEOMETRY_MSGS_POINT_Z		5971  /**/
flag asn1SccGeometry_msgs_Point_IsConstraintValid(const asn1SccGeometry_msgs_Point* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT		5982  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT_X_2		5956  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT_Y_2		5967  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT_Z_2		5978  /**/
#define asn1SccGeometry_msgs_Point_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccGeometry_msgs_Point_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccGeometry_msgs_Point_Encode(const asn1SccGeometry_msgs_Point* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT		5983  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT_X_2		5957  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT_Y_2		5968  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT_Z_2		5979  /**/
flag asn1SccGeometry_msgs_Point_Decode(asn1SccGeometry_msgs_Point* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double x;
    asn1SccT_Double y;
    asn1SccT_Double theta;
} asn1SccGeometry_msgs_Pose2D;

flag asn1SccGeometry_msgs_Pose2D_Equal(const asn1SccGeometry_msgs_Pose2D* pVal1, const asn1SccGeometry_msgs_Pose2D* pVal2);

void asn1SccGeometry_msgs_Pose2D_Initialize(asn1SccGeometry_msgs_Pose2D* pVal);

#define ERR_GEOMETRY_MSGS_POSE2D_X		6417  /**/
#define ERR_GEOMETRY_MSGS_POSE2D_Y		6428  /**/
#define ERR_GEOMETRY_MSGS_POSE2D_THETA		6439  /**/
flag asn1SccGeometry_msgs_Pose2D_IsConstraintValid(const asn1SccGeometry_msgs_Pose2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSE2D		6450  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSE2D_X_2		6424  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSE2D_Y_2		6435  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSE2D_THETA_2		6446  /**/
#define asn1SccGeometry_msgs_Pose2D_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccGeometry_msgs_Pose2D_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccGeometry_msgs_Pose2D_Encode(const asn1SccGeometry_msgs_Pose2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSE2D		6451  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSE2D_X_2		6425  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSE2D_Y_2		6436  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSE2D_THETA_2		6447  /**/
flag asn1SccGeometry_msgs_Pose2D_Decode(asn1SccGeometry_msgs_Pose2D* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double x;
    asn1SccT_Double y;
    asn1SccT_Double z;
    asn1SccT_Double w;
} asn1SccGeometry_msgs_Quaternion;

flag asn1SccGeometry_msgs_Quaternion_Equal(const asn1SccGeometry_msgs_Quaternion* pVal1, const asn1SccGeometry_msgs_Quaternion* pVal2);

void asn1SccGeometry_msgs_Quaternion_Initialize(asn1SccGeometry_msgs_Quaternion* pVal);

#define ERR_GEOMETRY_MSGS_QUATERNION_X		7151  /**/
#define ERR_GEOMETRY_MSGS_QUATERNION_Y		7162  /**/
#define ERR_GEOMETRY_MSGS_QUATERNION_Z		7173  /**/
#define ERR_GEOMETRY_MSGS_QUATERNION_W		7184  /**/
flag asn1SccGeometry_msgs_Quaternion_IsConstraintValid(const asn1SccGeometry_msgs_Quaternion* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNION		7195  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNION_X_2		7158  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNION_Y_2		7169  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNION_Z_2		7180  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNION_W_2		7191  /**/
#define asn1SccGeometry_msgs_Quaternion_REQUIRED_BYTES_FOR_ENCODING       52 
#define asn1SccGeometry_msgs_Quaternion_REQUIRED_BITS_FOR_ENCODING        416

flag asn1SccGeometry_msgs_Quaternion_Encode(const asn1SccGeometry_msgs_Quaternion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNION		7196  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNION_X_2		7159  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNION_Y_2		7170  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNION_Z_2		7181  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNION_W_2		7192  /**/
flag asn1SccGeometry_msgs_Quaternion_Decode(asn1SccGeometry_msgs_Quaternion* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccGeometry_msgs_Point position;
    asn1SccGeometry_msgs_Quaternion orientation;
} asn1SccGeometry_msgs_Pose;

flag asn1SccGeometry_msgs_Pose_Equal(const asn1SccGeometry_msgs_Pose* pVal1, const asn1SccGeometry_msgs_Pose* pVal2);

void asn1SccGeometry_msgs_Pose_Initialize(asn1SccGeometry_msgs_Pose* pVal);

#define ERR_GEOMETRY_MSGS_POSE_POSITION_X		6314  /**/
#define ERR_GEOMETRY_MSGS_POSE_POSITION_Y		6325  /**/
#define ERR_GEOMETRY_MSGS_POSE_POSITION_Z		6336  /**/
#define ERR_GEOMETRY_MSGS_POSE_ORIENTATION_X		6357  /**/
#define ERR_GEOMETRY_MSGS_POSE_ORIENTATION_Y		6368  /**/
#define ERR_GEOMETRY_MSGS_POSE_ORIENTATION_Z		6379  /**/
#define ERR_GEOMETRY_MSGS_POSE_ORIENTATION_W		6390  /**/
flag asn1SccGeometry_msgs_Pose_IsConstraintValid(const asn1SccGeometry_msgs_Pose* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSE		6411  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSE_POSITION_2		6353  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSE_ORIENTATION_2		6407  /**/
#define asn1SccGeometry_msgs_Pose_REQUIRED_BYTES_FOR_ENCODING       91 
#define asn1SccGeometry_msgs_Pose_REQUIRED_BITS_FOR_ENCODING        728

flag asn1SccGeometry_msgs_Pose_Encode(const asn1SccGeometry_msgs_Pose* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSE		6412  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSE_POSITION_2		6354  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSE_ORIENTATION_2		6408  /**/
flag asn1SccGeometry_msgs_Pose_Decode(asn1SccGeometry_msgs_Pose* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    
    asn1SccT_Double arr[36];
} asn1SccGeometry_msgs_PoseWithCovariance_covariance;

typedef struct {
    asn1SccGeometry_msgs_Pose pose;
    asn1SccGeometry_msgs_PoseWithCovariance_covariance covariance;
} asn1SccGeometry_msgs_PoseWithCovariance;

flag asn1SccGeometry_msgs_PoseWithCovariance_covariance_Equal(const asn1SccGeometry_msgs_PoseWithCovariance_covariance* pVal1, const asn1SccGeometry_msgs_PoseWithCovariance_covariance* pVal2);

flag asn1SccGeometry_msgs_PoseWithCovariance_Equal(const asn1SccGeometry_msgs_PoseWithCovariance* pVal1, const asn1SccGeometry_msgs_PoseWithCovariance* pVal2);

void asn1SccGeometry_msgs_PoseWithCovariance_covariance_Initialize(asn1SccGeometry_msgs_PoseWithCovariance_covariance* pVal);
void asn1SccGeometry_msgs_PoseWithCovariance_Initialize(asn1SccGeometry_msgs_PoseWithCovariance* pVal);

#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_POSITION_X		6817  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_POSITION_Y		6828  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_POSITION_Z		6839  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_ORIENTATION_X		6860  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_ORIENTATION_Y		6871  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_ORIENTATION_Z		6882  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_ORIENTATION_W		6893  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_COVARIANCE_ELM		6924  /**/
flag asn1SccGeometry_msgs_PoseWithCovariance_IsConstraintValid(const asn1SccGeometry_msgs_PoseWithCovariance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE		6941  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_2		6920  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE_COVARIANCE		6935  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE_COVARIANCE_ELM_2		6931  /**/
#define asn1SccGeometry_msgs_PoseWithCovariance_REQUIRED_BYTES_FOR_ENCODING       559 
#define asn1SccGeometry_msgs_PoseWithCovariance_REQUIRED_BITS_FOR_ENCODING        4472

flag asn1SccGeometry_msgs_PoseWithCovariance_Encode(const asn1SccGeometry_msgs_PoseWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE		6942  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_2		6921  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE_COVARIANCE		6936  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE_COVARIANCE_ELM_2		6932  /**/
flag asn1SccGeometry_msgs_PoseWithCovariance_Decode(asn1SccGeometry_msgs_PoseWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double x;
    asn1SccT_Double y;
    asn1SccT_Double z;
} asn1SccGeometry_msgs_Vector3;

flag asn1SccGeometry_msgs_Vector3_Equal(const asn1SccGeometry_msgs_Vector3* pVal1, const asn1SccGeometry_msgs_Vector3* pVal2);

void asn1SccGeometry_msgs_Vector3_Initialize(asn1SccGeometry_msgs_Vector3* pVal);

#define ERR_GEOMETRY_MSGS_VECTOR3_X		8186  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3_Y		8197  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3_Z		8208  /**/
flag asn1SccGeometry_msgs_Vector3_IsConstraintValid(const asn1SccGeometry_msgs_Vector3* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_VECTOR3		8219  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_VECTOR3_X_2		8193  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_VECTOR3_Y_2		8204  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_VECTOR3_Z_2		8215  /**/
#define asn1SccGeometry_msgs_Vector3_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccGeometry_msgs_Vector3_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccGeometry_msgs_Vector3_Encode(const asn1SccGeometry_msgs_Vector3* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_VECTOR3		8220  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_VECTOR3_X_2		8194  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_VECTOR3_Y_2		8205  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_VECTOR3_Z_2		8216  /**/
flag asn1SccGeometry_msgs_Vector3_Decode(asn1SccGeometry_msgs_Vector3* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccGeometry_msgs_Vector3 linear;
    asn1SccGeometry_msgs_Vector3 angular;
} asn1SccGeometry_msgs_Accel;

flag asn1SccGeometry_msgs_Accel_Equal(const asn1SccGeometry_msgs_Accel* pVal1, const asn1SccGeometry_msgs_Accel* pVal2);

void asn1SccGeometry_msgs_Accel_Initialize(asn1SccGeometry_msgs_Accel* pVal);

#define ERR_GEOMETRY_MSGS_ACCEL_LINEAR_X		5053  /**/
#define ERR_GEOMETRY_MSGS_ACCEL_LINEAR_Y		5064  /**/
#define ERR_GEOMETRY_MSGS_ACCEL_LINEAR_Z		5075  /**/
#define ERR_GEOMETRY_MSGS_ACCEL_ANGULAR_X		5096  /**/
#define ERR_GEOMETRY_MSGS_ACCEL_ANGULAR_Y		5107  /**/
#define ERR_GEOMETRY_MSGS_ACCEL_ANGULAR_Z		5118  /**/
flag asn1SccGeometry_msgs_Accel_IsConstraintValid(const asn1SccGeometry_msgs_Accel* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCEL		5139  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCEL_LINEAR_2		5092  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCEL_ANGULAR_2		5135  /**/
#define asn1SccGeometry_msgs_Accel_REQUIRED_BYTES_FOR_ENCODING       78 
#define asn1SccGeometry_msgs_Accel_REQUIRED_BITS_FOR_ENCODING        624

flag asn1SccGeometry_msgs_Accel_Encode(const asn1SccGeometry_msgs_Accel* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCEL		5140  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCEL_LINEAR_2		5093  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCEL_ANGULAR_2		5136  /**/
flag asn1SccGeometry_msgs_Accel_Decode(asn1SccGeometry_msgs_Accel* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    
    asn1SccT_Double arr[36];
} asn1SccGeometry_msgs_AccelWithCovariance_covariance;

typedef struct {
    asn1SccGeometry_msgs_Accel accel;
    asn1SccGeometry_msgs_AccelWithCovariance_covariance covariance;
} asn1SccGeometry_msgs_AccelWithCovariance;

flag asn1SccGeometry_msgs_AccelWithCovariance_covariance_Equal(const asn1SccGeometry_msgs_AccelWithCovariance_covariance* pVal1, const asn1SccGeometry_msgs_AccelWithCovariance_covariance* pVal2);

flag asn1SccGeometry_msgs_AccelWithCovariance_Equal(const asn1SccGeometry_msgs_AccelWithCovariance* pVal1, const asn1SccGeometry_msgs_AccelWithCovariance* pVal2);

void asn1SccGeometry_msgs_AccelWithCovariance_covariance_Initialize(asn1SccGeometry_msgs_AccelWithCovariance_covariance* pVal);
void asn1SccGeometry_msgs_AccelWithCovariance_Initialize(asn1SccGeometry_msgs_AccelWithCovariance* pVal);

#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_LINEAR_X		5311  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_LINEAR_Y		5322  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_LINEAR_Z		5333  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_ANGULAR_X		5354  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_ANGULAR_Y		5365  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_ANGULAR_Z		5376  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_COVARIANCE_ELM		5407  /**/
flag asn1SccGeometry_msgs_AccelWithCovariance_IsConstraintValid(const asn1SccGeometry_msgs_AccelWithCovariance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE		5424  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_2		5403  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_COVARIANCE		5418  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_COVARIANCE_ELM_2		5414  /**/
#define asn1SccGeometry_msgs_AccelWithCovariance_REQUIRED_BYTES_FOR_ENCODING       546 
#define asn1SccGeometry_msgs_AccelWithCovariance_REQUIRED_BITS_FOR_ENCODING        4368

flag asn1SccGeometry_msgs_AccelWithCovariance_Encode(const asn1SccGeometry_msgs_AccelWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE		5425  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_2		5404  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_COVARIANCE		5419  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_COVARIANCE_ELM_2		5415  /**/
flag asn1SccGeometry_msgs_AccelWithCovariance_Decode(asn1SccGeometry_msgs_AccelWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double m;
    asn1SccGeometry_msgs_Vector3 com;
    asn1SccT_Double ixx;
    asn1SccT_Double ixy;
    asn1SccT_Double ixz;
    asn1SccT_Double iyy;
    asn1SccT_Double iyz;
    asn1SccT_Double izz;
} asn1SccGeometry_msgs_Inertia;

flag asn1SccGeometry_msgs_Inertia_Equal(const asn1SccGeometry_msgs_Inertia* pVal1, const asn1SccGeometry_msgs_Inertia* pVal2);

void asn1SccGeometry_msgs_Inertia_Initialize(asn1SccGeometry_msgs_Inertia* pVal);

#define ERR_GEOMETRY_MSGS_INERTIA_M		5623  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_COM_X		5634  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_COM_Y		5645  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_COM_Z		5656  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_IXX		5677  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_IXY		5688  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_IXZ		5699  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_IYY		5710  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_IYZ		5721  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_IZZ		5732  /**/
flag asn1SccGeometry_msgs_Inertia_IsConstraintValid(const asn1SccGeometry_msgs_Inertia* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA		5743  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_M_2		5630  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_COM_2		5673  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_IXX_2		5684  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_IXY_2		5695  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_IXZ_2		5706  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_IYY_2		5717  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_IYZ_2		5728  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_IZZ_2		5739  /**/
#define asn1SccGeometry_msgs_Inertia_REQUIRED_BYTES_FOR_ENCODING       130 
#define asn1SccGeometry_msgs_Inertia_REQUIRED_BITS_FOR_ENCODING        1040

flag asn1SccGeometry_msgs_Inertia_Encode(const asn1SccGeometry_msgs_Inertia* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA		5744  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_M_2		5631  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_COM_2		5674  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_IXX_2		5685  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_IXY_2		5696  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_IXZ_2		5707  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_IYY_2		5718  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_IYZ_2		5729  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_IZZ_2		5740  /**/
flag asn1SccGeometry_msgs_Inertia_Decode(asn1SccGeometry_msgs_Inertia* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccGeometry_msgs_Vector3 translation;
    asn1SccGeometry_msgs_Quaternion rotation;
} asn1SccGeometry_msgs_Transform;

flag asn1SccGeometry_msgs_Transform_Equal(const asn1SccGeometry_msgs_Transform* pVal1, const asn1SccGeometry_msgs_Transform* pVal2);

void asn1SccGeometry_msgs_Transform_Initialize(asn1SccGeometry_msgs_Transform* pVal);

#define ERR_GEOMETRY_MSGS_TRANSFORM_TRANSLATION_X		7325  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORM_TRANSLATION_Y		7336  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORM_TRANSLATION_Z		7347  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORM_ROTATION_X		7368  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORM_ROTATION_Y		7379  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORM_ROTATION_Z		7390  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORM_ROTATION_W		7401  /**/
flag asn1SccGeometry_msgs_Transform_IsConstraintValid(const asn1SccGeometry_msgs_Transform* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TRANSFORM		7422  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TRANSFORM_TRANSLATION_2		7364  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TRANSFORM_ROTATION_2		7418  /**/
#define asn1SccGeometry_msgs_Transform_REQUIRED_BYTES_FOR_ENCODING       91 
#define asn1SccGeometry_msgs_Transform_REQUIRED_BITS_FOR_ENCODING        728

flag asn1SccGeometry_msgs_Transform_Encode(const asn1SccGeometry_msgs_Transform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_TRANSFORM		7423  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TRANSFORM_TRANSLATION_2		7365  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TRANSFORM_ROTATION_2		7419  /**/
flag asn1SccGeometry_msgs_Transform_Decode(asn1SccGeometry_msgs_Transform* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccGeometry_msgs_Vector3 linear;
    asn1SccGeometry_msgs_Vector3 angular;
} asn1SccGeometry_msgs_Twist;

flag asn1SccGeometry_msgs_Twist_Equal(const asn1SccGeometry_msgs_Twist* pVal1, const asn1SccGeometry_msgs_Twist* pVal2);

void asn1SccGeometry_msgs_Twist_Initialize(asn1SccGeometry_msgs_Twist* pVal);

#define ERR_GEOMETRY_MSGS_TWIST_LINEAR_X		7616  /**/
#define ERR_GEOMETRY_MSGS_TWIST_LINEAR_Y		7627  /**/
#define ERR_GEOMETRY_MSGS_TWIST_LINEAR_Z		7638  /**/
#define ERR_GEOMETRY_MSGS_TWIST_ANGULAR_X		7659  /**/
#define ERR_GEOMETRY_MSGS_TWIST_ANGULAR_Y		7670  /**/
#define ERR_GEOMETRY_MSGS_TWIST_ANGULAR_Z		7681  /**/
flag asn1SccGeometry_msgs_Twist_IsConstraintValid(const asn1SccGeometry_msgs_Twist* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWIST		7702  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWIST_LINEAR_2		7655  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWIST_ANGULAR_2		7698  /**/
#define asn1SccGeometry_msgs_Twist_REQUIRED_BYTES_FOR_ENCODING       78 
#define asn1SccGeometry_msgs_Twist_REQUIRED_BITS_FOR_ENCODING        624

flag asn1SccGeometry_msgs_Twist_Encode(const asn1SccGeometry_msgs_Twist* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWIST		7703  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWIST_LINEAR_2		7656  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWIST_ANGULAR_2		7699  /**/
flag asn1SccGeometry_msgs_Twist_Decode(asn1SccGeometry_msgs_Twist* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    
    asn1SccT_Double arr[36];
} asn1SccGeometry_msgs_TwistWithCovariance_covariance;

typedef struct {
    asn1SccGeometry_msgs_Twist twist;
    asn1SccGeometry_msgs_TwistWithCovariance_covariance covariance;
} asn1SccGeometry_msgs_TwistWithCovariance;

flag asn1SccGeometry_msgs_TwistWithCovariance_covariance_Equal(const asn1SccGeometry_msgs_TwistWithCovariance_covariance* pVal1, const asn1SccGeometry_msgs_TwistWithCovariance_covariance* pVal2);

flag asn1SccGeometry_msgs_TwistWithCovariance_Equal(const asn1SccGeometry_msgs_TwistWithCovariance* pVal1, const asn1SccGeometry_msgs_TwistWithCovariance* pVal2);

void asn1SccGeometry_msgs_TwistWithCovariance_covariance_Initialize(asn1SccGeometry_msgs_TwistWithCovariance_covariance* pVal);
void asn1SccGeometry_msgs_TwistWithCovariance_Initialize(asn1SccGeometry_msgs_TwistWithCovariance* pVal);

#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_LINEAR_X		7874  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_LINEAR_Y		7885  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_LINEAR_Z		7896  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_ANGULAR_X		7917  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_ANGULAR_Y		7928  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_ANGULAR_Z		7939  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_COVARIANCE_ELM		7970  /**/
flag asn1SccGeometry_msgs_TwistWithCovariance_IsConstraintValid(const asn1SccGeometry_msgs_TwistWithCovariance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE		7987  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_2		7966  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_COVARIANCE		7981  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_COVARIANCE_ELM_2		7977  /**/
#define asn1SccGeometry_msgs_TwistWithCovariance_REQUIRED_BYTES_FOR_ENCODING       546 
#define asn1SccGeometry_msgs_TwistWithCovariance_REQUIRED_BITS_FOR_ENCODING        4368

flag asn1SccGeometry_msgs_TwistWithCovariance_Encode(const asn1SccGeometry_msgs_TwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE		7988  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_2		7967  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_COVARIANCE		7982  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_COVARIANCE_ELM_2		7978  /**/
flag asn1SccGeometry_msgs_TwistWithCovariance_Decode(asn1SccGeometry_msgs_TwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccGeometry_msgs_Vector3 force;
    asn1SccGeometry_msgs_Vector3 torque;
} asn1SccGeometry_msgs_Wrench;

flag asn1SccGeometry_msgs_Wrench_Equal(const asn1SccGeometry_msgs_Wrench* pVal1, const asn1SccGeometry_msgs_Wrench* pVal2);

void asn1SccGeometry_msgs_Wrench_Initialize(asn1SccGeometry_msgs_Wrench* pVal);

#define ERR_GEOMETRY_MSGS_WRENCH_FORCE_X		8338  /**/
#define ERR_GEOMETRY_MSGS_WRENCH_FORCE_Y		8349  /**/
#define ERR_GEOMETRY_MSGS_WRENCH_FORCE_Z		8360  /**/
#define ERR_GEOMETRY_MSGS_WRENCH_TORQUE_X		8381  /**/
#define ERR_GEOMETRY_MSGS_WRENCH_TORQUE_Y		8392  /**/
#define ERR_GEOMETRY_MSGS_WRENCH_TORQUE_Z		8403  /**/
flag asn1SccGeometry_msgs_Wrench_IsConstraintValid(const asn1SccGeometry_msgs_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_WRENCH		8424  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_WRENCH_FORCE_2		8377  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_WRENCH_TORQUE_2		8420  /**/
#define asn1SccGeometry_msgs_Wrench_REQUIRED_BYTES_FOR_ENCODING       78 
#define asn1SccGeometry_msgs_Wrench_REQUIRED_BITS_FOR_ENCODING        624

flag asn1SccGeometry_msgs_Wrench_Encode(const asn1SccGeometry_msgs_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_WRENCH		8425  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_WRENCH_FORCE_2		8378  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_WRENCH_TORQUE_2		8421  /**/
flag asn1SccGeometry_msgs_Wrench_Decode(asn1SccGeometry_msgs_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);
typedef double asn1SccT_Float;


flag asn1SccT_Float_Equal(const asn1SccT_Float* pVal1, const asn1SccT_Float* pVal2);

void asn1SccT_Float_Initialize(asn1SccT_Float* pVal);

#define ERR_T_FLOAT		8603  /**/
flag asn1SccT_Float_IsConstraintValid(const asn1SccT_Float* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_FLOAT		8604  /**/
#define asn1SccT_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Float_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccT_Float_Encode(const asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FLOAT		8605  /**/
flag asn1SccT_Float_Decode(asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_UInt8 type_value;
    asn1SccT_UInt8 id;
    asn1SccT_Float intensity;
} asn1SccSensor_msgs_JoyFeedback;

flag asn1SccSensor_msgs_JoyFeedback_Equal(const asn1SccSensor_msgs_JoyFeedback* pVal1, const asn1SccSensor_msgs_JoyFeedback* pVal2);

void asn1SccSensor_msgs_JoyFeedback_Initialize(asn1SccSensor_msgs_JoyFeedback* pVal);

#define ERR_SENSOR_MSGS_JOYFEEDBACK_TYPE_VALUE		1428  /**/
#define ERR_SENSOR_MSGS_JOYFEEDBACK_ID		1439  /**/
#define ERR_SENSOR_MSGS_JOYFEEDBACK_INTENSITY		1450  /**/
flag asn1SccSensor_msgs_JoyFeedback_IsConstraintValid(const asn1SccSensor_msgs_JoyFeedback* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_JOYFEEDBACK		1461  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOYFEEDBACK_TYPE_VALUE_2		1435  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOYFEEDBACK_ID_2		1446  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOYFEEDBACK_INTENSITY_2		1457  /**/
#define asn1SccSensor_msgs_JoyFeedback_REQUIRED_BYTES_FOR_ENCODING       15 
#define asn1SccSensor_msgs_JoyFeedback_REQUIRED_BITS_FOR_ENCODING        120

flag asn1SccSensor_msgs_JoyFeedback_Encode(const asn1SccSensor_msgs_JoyFeedback* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_JOYFEEDBACK		1462  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOYFEEDBACK_TYPE_VALUE_2		1436  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOYFEEDBACK_ID_2		1447  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOYFEEDBACK_INTENSITY_2		1458  /**/
flag asn1SccSensor_msgs_JoyFeedback_Decode(asn1SccSensor_msgs_JoyFeedback* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccSensor_msgs_JoyFeedback arr[60];
} asn1SccSensor_msgs_JoyFeedbackArray;

flag asn1SccSensor_msgs_JoyFeedbackArray_Equal(const asn1SccSensor_msgs_JoyFeedbackArray* pVal1, const asn1SccSensor_msgs_JoyFeedbackArray* pVal2);

void asn1SccSensor_msgs_JoyFeedbackArray_Initialize(asn1SccSensor_msgs_JoyFeedbackArray* pVal);

#define ERR_SENSOR_MSGS_JOYFEEDBACKARRAY_ELM_TYPE_VALUE		1467  /**/
#define ERR_SENSOR_MSGS_JOYFEEDBACKARRAY_ELM_ID		1478  /**/
#define ERR_SENSOR_MSGS_JOYFEEDBACKARRAY_ELM_INTENSITY		1489  /**/
#define ERR_SENSOR_MSGS_JOYFEEDBACKARRAY		1510  /**/
flag asn1SccSensor_msgs_JoyFeedbackArray_IsConstraintValid(const asn1SccSensor_msgs_JoyFeedbackArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_JOYFEEDBACKARRAY		1511  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOYFEEDBACKARRAY_ELM_2		1506  /**/
#define asn1SccSensor_msgs_JoyFeedbackArray_REQUIRED_BYTES_FOR_ENCODING       901 
#define asn1SccSensor_msgs_JoyFeedbackArray_REQUIRED_BITS_FOR_ENCODING        7206

flag asn1SccSensor_msgs_JoyFeedbackArray_Encode(const asn1SccSensor_msgs_JoyFeedbackArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_JOYFEEDBACKARRAY		1512  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOYFEEDBACKARRAY_ELM_2		1507  /**/
flag asn1SccSensor_msgs_JoyFeedbackArray_Decode(asn1SccSensor_msgs_JoyFeedbackArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[60];
} asn1SccSensor_msgs_LaserEcho;

flag asn1SccSensor_msgs_LaserEcho_Equal(const asn1SccSensor_msgs_LaserEcho* pVal1, const asn1SccSensor_msgs_LaserEcho* pVal2);

void asn1SccSensor_msgs_LaserEcho_Initialize(asn1SccSensor_msgs_LaserEcho* pVal);

#define ERR_SENSOR_MSGS_LASERECHO_ELM		1517  /**/
#define ERR_SENSOR_MSGS_LASERECHO		1528  /**/
flag asn1SccSensor_msgs_LaserEcho_IsConstraintValid(const asn1SccSensor_msgs_LaserEcho* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERECHO		1529  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERECHO_ELM_2		1524  /**/
#define asn1SccSensor_msgs_LaserEcho_REQUIRED_BYTES_FOR_ENCODING       781 
#define asn1SccSensor_msgs_LaserEcho_REQUIRED_BITS_FOR_ENCODING        6246

flag asn1SccSensor_msgs_LaserEcho_Encode(const asn1SccSensor_msgs_LaserEcho* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_LASERECHO		1530  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_LASERECHO_ELM_2		1525  /**/
flag asn1SccSensor_msgs_LaserEcho_Decode(asn1SccSensor_msgs_LaserEcho* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Float r;
    asn1SccT_Float g;
    asn1SccT_Float b;
    asn1SccT_Float a;
} asn1SccStd_msgs_ColorRGBA;

flag asn1SccStd_msgs_ColorRGBA_Equal(const asn1SccStd_msgs_ColorRGBA* pVal1, const asn1SccStd_msgs_ColorRGBA* pVal2);

void asn1SccStd_msgs_ColorRGBA_Initialize(asn1SccStd_msgs_ColorRGBA* pVal);

#define ERR_STD_MSGS_COLORRGBA_R		3707  /**/
#define ERR_STD_MSGS_COLORRGBA_G		3718  /**/
#define ERR_STD_MSGS_COLORRGBA_B		3729  /**/
#define ERR_STD_MSGS_COLORRGBA_A		3740  /**/
flag asn1SccStd_msgs_ColorRGBA_IsConstraintValid(const asn1SccStd_msgs_ColorRGBA* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_COLORRGBA		3751  /**/
#define ERR_UPER_ENCODE_STD_MSGS_COLORRGBA_R_2		3714  /**/
#define ERR_UPER_ENCODE_STD_MSGS_COLORRGBA_G_2		3725  /**/
#define ERR_UPER_ENCODE_STD_MSGS_COLORRGBA_B_2		3736  /**/
#define ERR_UPER_ENCODE_STD_MSGS_COLORRGBA_A_2		3747  /**/
#define asn1SccStd_msgs_ColorRGBA_REQUIRED_BYTES_FOR_ENCODING       52 
#define asn1SccStd_msgs_ColorRGBA_REQUIRED_BITS_FOR_ENCODING        416

flag asn1SccStd_msgs_ColorRGBA_Encode(const asn1SccStd_msgs_ColorRGBA* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_COLORRGBA		3752  /**/
#define ERR_UPER_DECODE_STD_MSGS_COLORRGBA_R_2		3715  /**/
#define ERR_UPER_DECODE_STD_MSGS_COLORRGBA_G_2		3726  /**/
#define ERR_UPER_DECODE_STD_MSGS_COLORRGBA_B_2		3737  /**/
#define ERR_UPER_DECODE_STD_MSGS_COLORRGBA_A_2		3748  /**/
flag asn1SccStd_msgs_ColorRGBA_Decode(asn1SccStd_msgs_ColorRGBA* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Float asn1SccStd_msgs_Float32;


flag asn1SccStd_msgs_Float32_Equal(const asn1SccStd_msgs_Float32* pVal1, const asn1SccStd_msgs_Float32* pVal2);

void asn1SccStd_msgs_Float32_Initialize(asn1SccStd_msgs_Float32* pVal);

#define ERR_STD_MSGS_FLOAT32		3795  /**/
flag asn1SccStd_msgs_Float32_IsConstraintValid(const asn1SccStd_msgs_Float32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_FLOAT32_2		3802  /**/
#define asn1SccStd_msgs_Float32_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccStd_msgs_Float32_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccStd_msgs_Float32_Encode(const asn1SccStd_msgs_Float32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_FLOAT32_2		3803  /**/
flag asn1SccStd_msgs_Float32_Decode(asn1SccStd_msgs_Float32* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Float x;
    asn1SccT_Float y;
    asn1SccT_Float z;
} asn1SccGeometry_msgs_Point32;

flag asn1SccGeometry_msgs_Point32_Equal(const asn1SccGeometry_msgs_Point32* pVal1, const asn1SccGeometry_msgs_Point32* pVal2);

void asn1SccGeometry_msgs_Point32_Initialize(asn1SccGeometry_msgs_Point32* pVal);

#define ERR_GEOMETRY_MSGS_POINT32_X		5988  /**/
#define ERR_GEOMETRY_MSGS_POINT32_Y		5999  /**/
#define ERR_GEOMETRY_MSGS_POINT32_Z		6010  /**/
flag asn1SccGeometry_msgs_Point32_IsConstraintValid(const asn1SccGeometry_msgs_Point32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT32		6021  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT32_X_2		5995  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT32_Y_2		6006  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT32_Z_2		6017  /**/
#define asn1SccGeometry_msgs_Point32_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccGeometry_msgs_Point32_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccGeometry_msgs_Point32_Encode(const asn1SccGeometry_msgs_Point32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT32		6022  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT32_X_2		5996  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT32_Y_2		6007  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT32_Z_2		6018  /**/
flag asn1SccGeometry_msgs_Point32_Decode(asn1SccGeometry_msgs_Point32* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccGeometry_msgs_Point32 arr[60];
} asn1SccGeometry_msgs_Polygon;

flag asn1SccGeometry_msgs_Polygon_Equal(const asn1SccGeometry_msgs_Polygon* pVal1, const asn1SccGeometry_msgs_Polygon* pVal2);

void asn1SccGeometry_msgs_Polygon_Initialize(asn1SccGeometry_msgs_Polygon* pVal);

#define ERR_GEOMETRY_MSGS_POLYGON_ELM_X		6140  /**/
#define ERR_GEOMETRY_MSGS_POLYGON_ELM_Y		6151  /**/
#define ERR_GEOMETRY_MSGS_POLYGON_ELM_Z		6162  /**/
#define ERR_GEOMETRY_MSGS_POLYGON		6183  /**/
flag asn1SccGeometry_msgs_Polygon_IsConstraintValid(const asn1SccGeometry_msgs_Polygon* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POLYGON		6184  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POLYGON_ELM_2		6179  /**/
#define asn1SccGeometry_msgs_Polygon_REQUIRED_BYTES_FOR_ENCODING       2341 
#define asn1SccGeometry_msgs_Polygon_REQUIRED_BITS_FOR_ENCODING        18726

flag asn1SccGeometry_msgs_Polygon_Encode(const asn1SccGeometry_msgs_Polygon* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POLYGON		6185  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POLYGON_ELM_2		6180  /**/
flag asn1SccGeometry_msgs_Polygon_Decode(asn1SccGeometry_msgs_Polygon* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int16;


flag asn1SccT_Int16_Equal(const asn1SccT_Int16* pVal1, const asn1SccT_Int16* pVal2);

void asn1SccT_Int16_Initialize(asn1SccT_Int16* pVal);

#define ERR_T_INT16		8610  /**/
flag asn1SccT_Int16_IsConstraintValid(const asn1SccT_Int16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT16		8611  /**/
#define asn1SccT_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_Int16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccT_Int16_Encode(const asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT16		8612  /**/
flag asn1SccT_Int16_Decode(asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Int16 asn1SccStd_msgs_Int16;


flag asn1SccStd_msgs_Int16_Equal(const asn1SccStd_msgs_Int16* pVal1, const asn1SccStd_msgs_Int16* pVal2);

void asn1SccStd_msgs_Int16_Initialize(asn1SccStd_msgs_Int16* pVal);

#define ERR_STD_MSGS_INT16		4067  /**/
flag asn1SccStd_msgs_Int16_IsConstraintValid(const asn1SccStd_msgs_Int16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT16_2		4074  /**/
#define asn1SccStd_msgs_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccStd_msgs_Int16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccStd_msgs_Int16_Encode(const asn1SccStd_msgs_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT16_2		4075  /**/
flag asn1SccStd_msgs_Int16_Decode(asn1SccStd_msgs_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt16;


flag asn1SccT_UInt16_Equal(const asn1SccT_UInt16* pVal1, const asn1SccT_UInt16* pVal2);

void asn1SccT_UInt16_Initialize(asn1SccT_UInt16* pVal);

#define ERR_T_UINT16		8617  /**/
flag asn1SccT_UInt16_IsConstraintValid(const asn1SccT_UInt16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT16		8618  /**/
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccT_UInt16_Encode(const asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT16		8619  /**/
flag asn1SccT_UInt16_Decode(asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Int8 status;
    asn1SccT_UInt16 service_value;
} asn1SccSensor_msgs_NavSatStatus;

flag asn1SccSensor_msgs_NavSatStatus_Equal(const asn1SccSensor_msgs_NavSatStatus* pVal1, const asn1SccSensor_msgs_NavSatStatus* pVal2);

void asn1SccSensor_msgs_NavSatStatus_Initialize(asn1SccSensor_msgs_NavSatStatus* pVal);

#define ERR_SENSOR_MSGS_NAVSATSTATUS_STATUS		2624  /**/
#define ERR_SENSOR_MSGS_NAVSATSTATUS_SERVICE_VALUE		2635  /**/
flag asn1SccSensor_msgs_NavSatStatus_IsConstraintValid(const asn1SccSensor_msgs_NavSatStatus* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_NAVSATSTATUS		2646  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_NAVSATSTATUS_STATUS_2		2631  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_NAVSATSTATUS_SERVICE_VALUE_2		2642  /**/
#define asn1SccSensor_msgs_NavSatStatus_REQUIRED_BYTES_FOR_ENCODING       3 
#define asn1SccSensor_msgs_NavSatStatus_REQUIRED_BITS_FOR_ENCODING        24

flag asn1SccSensor_msgs_NavSatStatus_Encode(const asn1SccSensor_msgs_NavSatStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_NAVSATSTATUS		2647  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_NAVSATSTATUS_STATUS_2		2632  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_NAVSATSTATUS_SERVICE_VALUE_2		2643  /**/
flag asn1SccSensor_msgs_NavSatStatus_Decode(asn1SccSensor_msgs_NavSatStatus* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt16 asn1SccStd_msgs_UInt16;


flag asn1SccStd_msgs_UInt16_Equal(const asn1SccStd_msgs_UInt16* pVal1, const asn1SccStd_msgs_UInt16* pVal2);

void asn1SccStd_msgs_UInt16_Initialize(asn1SccStd_msgs_UInt16* pVal);

#define ERR_STD_MSGS_UINT16		4640  /**/
flag asn1SccStd_msgs_UInt16_IsConstraintValid(const asn1SccStd_msgs_UInt16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT16_2		4647  /**/
#define asn1SccStd_msgs_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccStd_msgs_UInt16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccStd_msgs_UInt16_Encode(const asn1SccStd_msgs_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT16_2		4648  /**/
flag asn1SccStd_msgs_UInt16_Decode(asn1SccStd_msgs_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt64;


flag asn1SccT_UInt64_Equal(const asn1SccT_UInt64* pVal1, const asn1SccT_UInt64* pVal2);

void asn1SccT_UInt64_Initialize(asn1SccT_UInt64* pVal);

#define ERR_T_UINT64		8624  /**/
flag asn1SccT_UInt64_IsConstraintValid(const asn1SccT_UInt64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT64		8625  /**/
#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_UInt64_REQUIRED_BITS_FOR_ENCODING        63

flag asn1SccT_UInt64_Encode(const asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT64		8626  /**/
flag asn1SccT_UInt64_Decode(asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt64 asn1SccStd_msgs_UInt64;


flag asn1SccStd_msgs_UInt64_Equal(const asn1SccStd_msgs_UInt64* pVal1, const asn1SccStd_msgs_UInt64* pVal2);

void asn1SccStd_msgs_UInt64_Initialize(asn1SccStd_msgs_UInt64* pVal);

#define ERR_STD_MSGS_UINT64		4852  /**/
flag asn1SccStd_msgs_UInt64_IsConstraintValid(const asn1SccStd_msgs_UInt64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT64_2		4859  /**/
#define asn1SccStd_msgs_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccStd_msgs_UInt64_REQUIRED_BITS_FOR_ENCODING        63

flag asn1SccStd_msgs_UInt64_Encode(const asn1SccStd_msgs_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT64_2		4860  /**/
flag asn1SccStd_msgs_UInt64_Decode(asn1SccStd_msgs_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int64;


flag asn1SccT_Int64_Equal(const asn1SccT_Int64* pVal1, const asn1SccT_Int64* pVal2);

void asn1SccT_Int64_Initialize(asn1SccT_Int64* pVal);

#define ERR_T_INT64		8631  /**/
flag asn1SccT_Int64_IsConstraintValid(const asn1SccT_Int64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT64		8632  /**/
#define asn1SccT_Int64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_Int64_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccT_Int64_Encode(const asn1SccT_Int64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT64		8633  /**/
flag asn1SccT_Int64_Decode(asn1SccT_Int64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Int64 asn1SccStd_msgs_Int64;


flag asn1SccStd_msgs_Int64_Equal(const asn1SccStd_msgs_Int64* pVal1, const asn1SccStd_msgs_Int64* pVal2);

void asn1SccStd_msgs_Int64_Initialize(asn1SccStd_msgs_Int64* pVal);

#define ERR_STD_MSGS_INT64		4279  /**/
flag asn1SccStd_msgs_Int64_IsConstraintValid(const asn1SccStd_msgs_Int64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT64_2		4286  /**/
#define asn1SccStd_msgs_Int64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccStd_msgs_Int64_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccStd_msgs_Int64_Encode(const asn1SccStd_msgs_Int64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT64_2		4287  /**/
flag asn1SccStd_msgs_Int64_Decode(asn1SccStd_msgs_Int64* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    int nCount; 
    
    byte arr[60];
} asn1SccT_String;

flag asn1SccT_String_Equal(const asn1SccT_String* pVal1, const asn1SccT_String* pVal2);

void asn1SccT_String_Initialize(asn1SccT_String* pVal);

#define ERR_T_STRING		8638  /**/
flag asn1SccT_String_IsConstraintValid(const asn1SccT_String* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_STRING		8639  /**/
#define asn1SccT_String_REQUIRED_BYTES_FOR_ENCODING       61 
#define asn1SccT_String_REQUIRED_BITS_FOR_ENCODING        486

flag asn1SccT_String_Encode(const asn1SccT_String* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_STRING		8640  /**/
flag asn1SccT_String_Decode(asn1SccT_String* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[60];
} asn1SccSensor_msgs_ChannelFloat32_values;

typedef struct {
    asn1SccT_String name_value;
    asn1SccSensor_msgs_ChannelFloat32_values values;
} asn1SccSensor_msgs_ChannelFloat32;

flag asn1SccSensor_msgs_ChannelFloat32_values_Equal(const asn1SccSensor_msgs_ChannelFloat32_values* pVal1, const asn1SccSensor_msgs_ChannelFloat32_values* pVal2);

flag asn1SccSensor_msgs_ChannelFloat32_Equal(const asn1SccSensor_msgs_ChannelFloat32* pVal1, const asn1SccSensor_msgs_ChannelFloat32* pVal2);

void asn1SccSensor_msgs_ChannelFloat32_values_Initialize(asn1SccSensor_msgs_ChannelFloat32_values* pVal);
void asn1SccSensor_msgs_ChannelFloat32_Initialize(asn1SccSensor_msgs_ChannelFloat32* pVal);

#define ERR_SENSOR_MSGS_CHANNELFLOAT32_NAME_VALUE		480  /**/
#define ERR_SENSOR_MSGS_CHANNELFLOAT32_VALUES_ELM		491  /**/
#define ERR_SENSOR_MSGS_CHANNELFLOAT32_VALUES		502  /**/
flag asn1SccSensor_msgs_ChannelFloat32_IsConstraintValid(const asn1SccSensor_msgs_ChannelFloat32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_CHANNELFLOAT32		509  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CHANNELFLOAT32_NAME_VALUE_2		487  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CHANNELFLOAT32_VALUES		503  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CHANNELFLOAT32_VALUES_ELM_2		498  /**/
#define asn1SccSensor_msgs_ChannelFloat32_REQUIRED_BYTES_FOR_ENCODING       842 
#define asn1SccSensor_msgs_ChannelFloat32_REQUIRED_BITS_FOR_ENCODING        6732

flag asn1SccSensor_msgs_ChannelFloat32_Encode(const asn1SccSensor_msgs_ChannelFloat32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_CHANNELFLOAT32		510  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CHANNELFLOAT32_NAME_VALUE_2		488  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CHANNELFLOAT32_VALUES		504  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CHANNELFLOAT32_VALUES_ELM_2		499  /**/
flag asn1SccSensor_msgs_ChannelFloat32_Decode(asn1SccSensor_msgs_ChannelFloat32* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_String name_value;
    asn1SccT_UInt32 offset;
    asn1SccT_UInt8 datatype;
    asn1SccT_UInt32 count;
} asn1SccSensor_msgs_PointField;

flag asn1SccSensor_msgs_PointField_Equal(const asn1SccSensor_msgs_PointField* pVal1, const asn1SccSensor_msgs_PointField* pVal2);

void asn1SccSensor_msgs_PointField_Initialize(asn1SccSensor_msgs_PointField* pVal);

#define ERR_SENSOR_MSGS_POINTFIELD_NAME_VALUE		3022  /**/
#define ERR_SENSOR_MSGS_POINTFIELD_OFFSET		3033  /**/
#define ERR_SENSOR_MSGS_POINTFIELD_DATATYPE		3044  /**/
#define ERR_SENSOR_MSGS_POINTFIELD_COUNT		3055  /**/
flag asn1SccSensor_msgs_PointField_IsConstraintValid(const asn1SccSensor_msgs_PointField* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTFIELD		3066  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTFIELD_NAME_VALUE_2		3029  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTFIELD_OFFSET_2		3040  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTFIELD_DATATYPE_2		3051  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTFIELD_COUNT_2		3062  /**/
#define asn1SccSensor_msgs_PointField_REQUIRED_BYTES_FOR_ENCODING       70 
#define asn1SccSensor_msgs_PointField_REQUIRED_BITS_FOR_ENCODING        558

flag asn1SccSensor_msgs_PointField_Encode(const asn1SccSensor_msgs_PointField* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_POINTFIELD		3067  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTFIELD_NAME_VALUE_2		3030  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTFIELD_OFFSET_2		3041  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTFIELD_DATATYPE_2		3052  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTFIELD_COUNT_2		3063  /**/
flag asn1SccSensor_msgs_PointField_Decode(asn1SccSensor_msgs_PointField* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_UInt32 seq;
    asn1SccT_Time stamp;
    asn1SccT_String frame_id;
} asn1SccStd_msgs_Header;

flag asn1SccStd_msgs_Header_Equal(const asn1SccStd_msgs_Header* pVal1, const asn1SccStd_msgs_Header* pVal2);

void asn1SccStd_msgs_Header_Initialize(asn1SccStd_msgs_Header* pVal);

#define ERR_STD_MSGS_HEADER_SEQ		4007  /**/
#define ERR_STD_MSGS_HEADER_STAMP_SEC		4018  /**/
#define ERR_STD_MSGS_HEADER_STAMP_NSEC		4029  /**/
#define ERR_STD_MSGS_HEADER_FRAME_ID		4050  /**/
flag asn1SccStd_msgs_Header_IsConstraintValid(const asn1SccStd_msgs_Header* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_HEADER		4061  /**/
#define ERR_UPER_ENCODE_STD_MSGS_HEADER_SEQ_2		4014  /**/
#define ERR_UPER_ENCODE_STD_MSGS_HEADER_STAMP_2		4046  /**/
#define ERR_UPER_ENCODE_STD_MSGS_HEADER_FRAME_ID_2		4057  /**/
#define asn1SccStd_msgs_Header_REQUIRED_BYTES_FOR_ENCODING       73 
#define asn1SccStd_msgs_Header_REQUIRED_BITS_FOR_ENCODING        582

flag asn1SccStd_msgs_Header_Encode(const asn1SccStd_msgs_Header* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_HEADER		4062  /**/
#define ERR_UPER_DECODE_STD_MSGS_HEADER_SEQ_2		4015  /**/
#define ERR_UPER_DECODE_STD_MSGS_HEADER_STAMP_2		4047  /**/
#define ERR_UPER_DECODE_STD_MSGS_HEADER_FRAME_ID_2		4058  /**/
flag asn1SccStd_msgs_Header_Decode(asn1SccStd_msgs_Header* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[60];
} asn1SccSensor_msgs_BatteryState_cell_voltage;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_Float voltage;
    asn1SccT_Float current;
    asn1SccT_Float charge;
    asn1SccT_Float capacity;
    asn1SccT_Float design_capacity;
    asn1SccT_Float percentage;
    asn1SccT_UInt8 power_supply_status;
    asn1SccT_UInt8 power_supply_health;
    asn1SccT_UInt8 power_supply_technology;
    asn1SccT_Boolean present;
    asn1SccSensor_msgs_BatteryState_cell_voltage cell_voltage;
    asn1SccT_String location;
    asn1SccT_String serial_number;
} asn1SccSensor_msgs_BatteryState;

flag asn1SccSensor_msgs_BatteryState_cell_voltage_Equal(const asn1SccSensor_msgs_BatteryState_cell_voltage* pVal1, const asn1SccSensor_msgs_BatteryState_cell_voltage* pVal2);

flag asn1SccSensor_msgs_BatteryState_Equal(const asn1SccSensor_msgs_BatteryState* pVal1, const asn1SccSensor_msgs_BatteryState* pVal2);

void asn1SccSensor_msgs_BatteryState_cell_voltage_Initialize(asn1SccSensor_msgs_BatteryState_cell_voltage* pVal);
void asn1SccSensor_msgs_BatteryState_Initialize(asn1SccSensor_msgs_BatteryState* pVal);

#define ERR_SENSOR_MSGS_BATTERYSTATE_HEADER_SEQ		1  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_HEADER_STAMP_SEC		12  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_HEADER_STAMP_NSEC		23  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_HEADER_FRAME_ID		44  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_VOLTAGE		65  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_CURRENT		76  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_CHARGE		87  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_CAPACITY		98  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_DESIGN_CAPACITY		109  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_PERCENTAGE		120  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_POWER_SUPPLY_STATUS		131  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_POWER_SUPPLY_HEALTH		142  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_POWER_SUPPLY_TECHNOLOGY		153  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_PRESENT		164  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_CELL_VOLTAGE_ELM		175  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_CELL_VOLTAGE		186  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_LOCATION		193  /**/
#define ERR_SENSOR_MSGS_BATTERYSTATE_SERIAL_NUMBER		204  /**/
flag asn1SccSensor_msgs_BatteryState_IsConstraintValid(const asn1SccSensor_msgs_BatteryState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE		215  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_HEADER_2		61  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_VOLTAGE_2		72  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_CURRENT_2		83  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_CHARGE_2		94  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_CAPACITY_2		105  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_DESIGN_CAPACITY_2		116  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_PERCENTAGE_2		127  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_POWER_SUPPLY_STATUS_2		138  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_POWER_SUPPLY_HEALTH_2		149  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_POWER_SUPPLY_TECHNOLOGY_2		160  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_PRESENT_2		171  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_CELL_VOLTAGE		187  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_CELL_VOLTAGE_ELM_2		182  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_LOCATION_2		200  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_BATTERYSTATE_SERIAL_NUMBER_2		211  /**/
#define asn1SccSensor_msgs_BatteryState_REQUIRED_BYTES_FOR_ENCODING       1057 
#define asn1SccSensor_msgs_BatteryState_REQUIRED_BITS_FOR_ENCODING        8449

flag asn1SccSensor_msgs_BatteryState_Encode(const asn1SccSensor_msgs_BatteryState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE		216  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_HEADER_2		62  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_VOLTAGE_2		73  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_CURRENT_2		84  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_CHARGE_2		95  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_CAPACITY_2		106  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_DESIGN_CAPACITY_2		117  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_PERCENTAGE_2		128  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_POWER_SUPPLY_STATUS_2		139  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_POWER_SUPPLY_HEALTH_2		150  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_POWER_SUPPLY_TECHNOLOGY_2		161  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_PRESENT_2		172  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_CELL_VOLTAGE		188  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_CELL_VOLTAGE_ELM_2		183  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_LOCATION_2		201  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_BATTERYSTATE_SERIAL_NUMBER_2		212  /**/
flag asn1SccSensor_msgs_BatteryState_Decode(asn1SccSensor_msgs_BatteryState* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[60];
} asn1SccSensor_msgs_CameraInfo_d;

typedef struct {    
    asn1SccT_Double arr[9];
} asn1SccSensor_msgs_CameraInfo_k;

typedef struct {    
    asn1SccT_Double arr[9];
} asn1SccSensor_msgs_CameraInfo_r;

typedef struct {    
    asn1SccT_Double arr[12];
} asn1SccSensor_msgs_CameraInfo_p;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_UInt32 height;
    asn1SccT_UInt32 width;
    asn1SccT_String distortion_model;
    asn1SccSensor_msgs_CameraInfo_d d;
    asn1SccSensor_msgs_CameraInfo_k k;
    asn1SccSensor_msgs_CameraInfo_r r;
    asn1SccSensor_msgs_CameraInfo_p p;
    asn1SccT_UInt32 binning_x;
    asn1SccT_UInt32 binning_y;
    asn1SccSensor_msgs_RegionOfInterest roi;
} asn1SccSensor_msgs_CameraInfo;

flag asn1SccSensor_msgs_CameraInfo_d_Equal(const asn1SccSensor_msgs_CameraInfo_d* pVal1, const asn1SccSensor_msgs_CameraInfo_d* pVal2);

flag asn1SccSensor_msgs_CameraInfo_k_Equal(const asn1SccSensor_msgs_CameraInfo_k* pVal1, const asn1SccSensor_msgs_CameraInfo_k* pVal2);

flag asn1SccSensor_msgs_CameraInfo_r_Equal(const asn1SccSensor_msgs_CameraInfo_r* pVal1, const asn1SccSensor_msgs_CameraInfo_r* pVal2);

flag asn1SccSensor_msgs_CameraInfo_p_Equal(const asn1SccSensor_msgs_CameraInfo_p* pVal1, const asn1SccSensor_msgs_CameraInfo_p* pVal2);

flag asn1SccSensor_msgs_CameraInfo_Equal(const asn1SccSensor_msgs_CameraInfo* pVal1, const asn1SccSensor_msgs_CameraInfo* pVal2);

void asn1SccSensor_msgs_CameraInfo_d_Initialize(asn1SccSensor_msgs_CameraInfo_d* pVal);
void asn1SccSensor_msgs_CameraInfo_k_Initialize(asn1SccSensor_msgs_CameraInfo_k* pVal);
void asn1SccSensor_msgs_CameraInfo_r_Initialize(asn1SccSensor_msgs_CameraInfo_r* pVal);
void asn1SccSensor_msgs_CameraInfo_p_Initialize(asn1SccSensor_msgs_CameraInfo_p* pVal);
void asn1SccSensor_msgs_CameraInfo_Initialize(asn1SccSensor_msgs_CameraInfo* pVal);

#define ERR_SENSOR_MSGS_CAMERAINFO_HEADER_SEQ		221  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_HEADER_STAMP_SEC		232  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_HEADER_STAMP_NSEC		243  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_HEADER_FRAME_ID		264  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_HEIGHT		285  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_WIDTH		296  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_DISTORTION_MODEL		307  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_D_ELM		318  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_D		329  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_K_ELM		336  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_R_ELM		353  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_P_ELM		370  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_BINNING_X		387  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_BINNING_Y		398  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_ROI_X_OFFSET		409  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_ROI_Y_OFFSET		420  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_ROI_HEIGHT		431  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_ROI_WIDTH		442  /**/
#define ERR_SENSOR_MSGS_CAMERAINFO_ROI_DO_RECTIFY		453  /**/
flag asn1SccSensor_msgs_CameraInfo_IsConstraintValid(const asn1SccSensor_msgs_CameraInfo* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO		474  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_HEADER_2		281  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_HEIGHT_2		292  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_WIDTH_2		303  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_DISTORTION_MODEL_2		314  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_D		330  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_D_ELM_2		325  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_K		347  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_K_ELM_2		343  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_R		364  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_R_ELM_2		360  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_P		381  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_P_ELM_2		377  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_BINNING_X_2		394  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_BINNING_Y_2		405  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_CAMERAINFO_ROI_2		470  /**/
#define asn1SccSensor_msgs_CameraInfo_REQUIRED_BYTES_FOR_ENCODING       1337 
#define asn1SccSensor_msgs_CameraInfo_REQUIRED_BITS_FOR_ENCODING        10691

flag asn1SccSensor_msgs_CameraInfo_Encode(const asn1SccSensor_msgs_CameraInfo* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO		475  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_HEADER_2		282  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_HEIGHT_2		293  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_WIDTH_2		304  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_DISTORTION_MODEL_2		315  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_D		331  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_D_ELM_2		326  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_K		348  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_K_ELM_2		344  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_R		365  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_R_ELM_2		361  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_P		382  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_P_ELM_2		378  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_BINNING_X_2		395  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_BINNING_Y_2		406  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_CAMERAINFO_ROI_2		471  /**/
flag asn1SccSensor_msgs_CameraInfo_Decode(asn1SccSensor_msgs_CameraInfo* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    int nCount; 
    
    byte arr[60];
} asn1SccSensor_msgs_CompressedImage_data_value;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_String format;
    asn1SccSensor_msgs_CompressedImage_data_value data_value;
} asn1SccSensor_msgs_CompressedImage;

flag asn1SccSensor_msgs_CompressedImage_data_value_Equal(const asn1SccSensor_msgs_CompressedImage_data_value* pVal1, const asn1SccSensor_msgs_CompressedImage_data_value* pVal2);

flag asn1SccSensor_msgs_CompressedImage_Equal(const asn1SccSensor_msgs_CompressedImage* pVal1, const asn1SccSensor_msgs_CompressedImage* pVal2);

void asn1SccSensor_msgs_CompressedImage_data_value_Initialize(asn1SccSensor_msgs_CompressedImage_data_value* pVal);
void asn1SccSensor_msgs_CompressedImage_Initialize(asn1SccSensor_msgs_CompressedImage* pVal);

#define ERR_SENSOR_MSGS_COMPRESSEDIMAGE_HEADER_SEQ		515  /**/
#define ERR_SENSOR_MSGS_COMPRESSEDIMAGE_HEADER_STAMP_SEC		526  /**/
#define ERR_SENSOR_MSGS_COMPRESSEDIMAGE_HEADER_STAMP_NSEC		537  /**/
#define ERR_SENSOR_MSGS_COMPRESSEDIMAGE_HEADER_FRAME_ID		558  /**/
#define ERR_SENSOR_MSGS_COMPRESSEDIMAGE_FORMAT		579  /**/
#define ERR_SENSOR_MSGS_COMPRESSEDIMAGE_DATA_VALUE		590  /**/
flag asn1SccSensor_msgs_CompressedImage_IsConstraintValid(const asn1SccSensor_msgs_CompressedImage* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_COMPRESSEDIMAGE		597  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_COMPRESSEDIMAGE_HEADER_2		575  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_COMPRESSEDIMAGE_FORMAT_2		586  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_COMPRESSEDIMAGE_DATA_VALUE		591  /**/
#define asn1SccSensor_msgs_CompressedImage_REQUIRED_BYTES_FOR_ENCODING       195 
#define asn1SccSensor_msgs_CompressedImage_REQUIRED_BITS_FOR_ENCODING        1554

flag asn1SccSensor_msgs_CompressedImage_Encode(const asn1SccSensor_msgs_CompressedImage* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_COMPRESSEDIMAGE		598  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_COMPRESSEDIMAGE_HEADER_2		576  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_COMPRESSEDIMAGE_FORMAT_2		587  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_COMPRESSEDIMAGE_DATA_VALUE		592  /**/
flag asn1SccSensor_msgs_CompressedImage_Decode(asn1SccSensor_msgs_CompressedImage* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_Double fluid_pressure;
    asn1SccT_Double variance;
} asn1SccSensor_msgs_FluidPressure;

flag asn1SccSensor_msgs_FluidPressure_Equal(const asn1SccSensor_msgs_FluidPressure* pVal1, const asn1SccSensor_msgs_FluidPressure* pVal2);

void asn1SccSensor_msgs_FluidPressure_Initialize(asn1SccSensor_msgs_FluidPressure* pVal);

#define ERR_SENSOR_MSGS_FLUIDPRESSURE_HEADER_SEQ		603  /**/
#define ERR_SENSOR_MSGS_FLUIDPRESSURE_HEADER_STAMP_SEC		614  /**/
#define ERR_SENSOR_MSGS_FLUIDPRESSURE_HEADER_STAMP_NSEC		625  /**/
#define ERR_SENSOR_MSGS_FLUIDPRESSURE_HEADER_FRAME_ID		646  /**/
#define ERR_SENSOR_MSGS_FLUIDPRESSURE_FLUID_PRESSURE		667  /**/
#define ERR_SENSOR_MSGS_FLUIDPRESSURE_VARIANCE		678  /**/
flag asn1SccSensor_msgs_FluidPressure_IsConstraintValid(const asn1SccSensor_msgs_FluidPressure* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_FLUIDPRESSURE		689  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_FLUIDPRESSURE_HEADER_2		663  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_FLUIDPRESSURE_FLUID_PRESSURE_2		674  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_FLUIDPRESSURE_VARIANCE_2		685  /**/
#define asn1SccSensor_msgs_FluidPressure_REQUIRED_BYTES_FOR_ENCODING       99 
#define asn1SccSensor_msgs_FluidPressure_REQUIRED_BITS_FOR_ENCODING        790

flag asn1SccSensor_msgs_FluidPressure_Encode(const asn1SccSensor_msgs_FluidPressure* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_FLUIDPRESSURE		690  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_FLUIDPRESSURE_HEADER_2		664  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_FLUIDPRESSURE_FLUID_PRESSURE_2		675  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_FLUIDPRESSURE_VARIANCE_2		686  /**/
flag asn1SccSensor_msgs_FluidPressure_Decode(asn1SccSensor_msgs_FluidPressure* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_Double illuminance;
    asn1SccT_Double variance;
} asn1SccSensor_msgs_Illuminance;

flag asn1SccSensor_msgs_Illuminance_Equal(const asn1SccSensor_msgs_Illuminance* pVal1, const asn1SccSensor_msgs_Illuminance* pVal2);

void asn1SccSensor_msgs_Illuminance_Initialize(asn1SccSensor_msgs_Illuminance* pVal);

#define ERR_SENSOR_MSGS_ILLUMINANCE_HEADER_SEQ		695  /**/
#define ERR_SENSOR_MSGS_ILLUMINANCE_HEADER_STAMP_SEC		706  /**/
#define ERR_SENSOR_MSGS_ILLUMINANCE_HEADER_STAMP_NSEC		717  /**/
#define ERR_SENSOR_MSGS_ILLUMINANCE_HEADER_FRAME_ID		738  /**/
#define ERR_SENSOR_MSGS_ILLUMINANCE_ILLUMINANCE		759  /**/
#define ERR_SENSOR_MSGS_ILLUMINANCE_VARIANCE		770  /**/
flag asn1SccSensor_msgs_Illuminance_IsConstraintValid(const asn1SccSensor_msgs_Illuminance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_ILLUMINANCE		781  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_ILLUMINANCE_HEADER_2		755  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_ILLUMINANCE_ILLUMINANCE_2		766  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_ILLUMINANCE_VARIANCE_2		777  /**/
#define asn1SccSensor_msgs_Illuminance_REQUIRED_BYTES_FOR_ENCODING       99 
#define asn1SccSensor_msgs_Illuminance_REQUIRED_BITS_FOR_ENCODING        790

flag asn1SccSensor_msgs_Illuminance_Encode(const asn1SccSensor_msgs_Illuminance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_ILLUMINANCE		782  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_ILLUMINANCE_HEADER_2		756  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_ILLUMINANCE_ILLUMINANCE_2		767  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_ILLUMINANCE_VARIANCE_2		778  /**/
flag asn1SccSensor_msgs_Illuminance_Decode(asn1SccSensor_msgs_Illuminance* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    int nCount; 
    
    byte arr[60];
} asn1SccSensor_msgs_Image_data_value;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_UInt32 height;
    asn1SccT_UInt32 width;
    asn1SccT_String encoding;
    asn1SccT_UInt8 is_bigendian;
    asn1SccT_UInt32 step;
    asn1SccSensor_msgs_Image_data_value data_value;
} asn1SccSensor_msgs_Image;

flag asn1SccSensor_msgs_Image_data_value_Equal(const asn1SccSensor_msgs_Image_data_value* pVal1, const asn1SccSensor_msgs_Image_data_value* pVal2);

flag asn1SccSensor_msgs_Image_Equal(const asn1SccSensor_msgs_Image* pVal1, const asn1SccSensor_msgs_Image* pVal2);

void asn1SccSensor_msgs_Image_data_value_Initialize(asn1SccSensor_msgs_Image_data_value* pVal);
void asn1SccSensor_msgs_Image_Initialize(asn1SccSensor_msgs_Image* pVal);

#define ERR_SENSOR_MSGS_IMAGE_HEADER_SEQ		787  /**/
#define ERR_SENSOR_MSGS_IMAGE_HEADER_STAMP_SEC		798  /**/
#define ERR_SENSOR_MSGS_IMAGE_HEADER_STAMP_NSEC		809  /**/
#define ERR_SENSOR_MSGS_IMAGE_HEADER_FRAME_ID		830  /**/
#define ERR_SENSOR_MSGS_IMAGE_HEIGHT		851  /**/
#define ERR_SENSOR_MSGS_IMAGE_WIDTH		862  /**/
#define ERR_SENSOR_MSGS_IMAGE_ENCODING		873  /**/
#define ERR_SENSOR_MSGS_IMAGE_IS_BIGENDIAN		884  /**/
#define ERR_SENSOR_MSGS_IMAGE_STEP		895  /**/
#define ERR_SENSOR_MSGS_IMAGE_DATA_VALUE		906  /**/
flag asn1SccSensor_msgs_Image_IsConstraintValid(const asn1SccSensor_msgs_Image* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_IMAGE		913  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMAGE_HEADER_2		847  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMAGE_HEIGHT_2		858  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMAGE_WIDTH_2		869  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMAGE_ENCODING_2		880  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMAGE_IS_BIGENDIAN_2		891  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMAGE_STEP_2		902  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMAGE_DATA_VALUE		907  /**/
#define asn1SccSensor_msgs_Image_REQUIRED_BYTES_FOR_ENCODING       208 
#define asn1SccSensor_msgs_Image_REQUIRED_BITS_FOR_ENCODING        1658

flag asn1SccSensor_msgs_Image_Encode(const asn1SccSensor_msgs_Image* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_IMAGE		914  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMAGE_HEADER_2		848  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMAGE_HEIGHT_2		859  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMAGE_WIDTH_2		870  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMAGE_ENCODING_2		881  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMAGE_IS_BIGENDIAN_2		892  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMAGE_STEP_2		903  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMAGE_DATA_VALUE		908  /**/
flag asn1SccSensor_msgs_Image_Decode(asn1SccSensor_msgs_Image* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    
    asn1SccT_Double arr[9];
} asn1SccSensor_msgs_Imu_orientation_covariance;

typedef struct {    
    asn1SccT_Double arr[9];
} asn1SccSensor_msgs_Imu_angular_velocity_covariance;

typedef struct {    
    asn1SccT_Double arr[9];
} asn1SccSensor_msgs_Imu_linear_acceleration_covariance;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Quaternion orientation;
    asn1SccSensor_msgs_Imu_orientation_covariance orientation_covariance;
    asn1SccGeometry_msgs_Vector3 angular_velocity;
    asn1SccSensor_msgs_Imu_angular_velocity_covariance angular_velocity_covariance;
    asn1SccGeometry_msgs_Vector3 linear_acceleration;
    asn1SccSensor_msgs_Imu_linear_acceleration_covariance linear_acceleration_covariance;
} asn1SccSensor_msgs_Imu;

flag asn1SccSensor_msgs_Imu_orientation_covariance_Equal(const asn1SccSensor_msgs_Imu_orientation_covariance* pVal1, const asn1SccSensor_msgs_Imu_orientation_covariance* pVal2);

flag asn1SccSensor_msgs_Imu_angular_velocity_covariance_Equal(const asn1SccSensor_msgs_Imu_angular_velocity_covariance* pVal1, const asn1SccSensor_msgs_Imu_angular_velocity_covariance* pVal2);

flag asn1SccSensor_msgs_Imu_linear_acceleration_covariance_Equal(const asn1SccSensor_msgs_Imu_linear_acceleration_covariance* pVal1, const asn1SccSensor_msgs_Imu_linear_acceleration_covariance* pVal2);

flag asn1SccSensor_msgs_Imu_Equal(const asn1SccSensor_msgs_Imu* pVal1, const asn1SccSensor_msgs_Imu* pVal2);

void asn1SccSensor_msgs_Imu_orientation_covariance_Initialize(asn1SccSensor_msgs_Imu_orientation_covariance* pVal);
void asn1SccSensor_msgs_Imu_angular_velocity_covariance_Initialize(asn1SccSensor_msgs_Imu_angular_velocity_covariance* pVal);
void asn1SccSensor_msgs_Imu_linear_acceleration_covariance_Initialize(asn1SccSensor_msgs_Imu_linear_acceleration_covariance* pVal);
void asn1SccSensor_msgs_Imu_Initialize(asn1SccSensor_msgs_Imu* pVal);

#define ERR_SENSOR_MSGS_IMU_HEADER_SEQ		919  /**/
#define ERR_SENSOR_MSGS_IMU_HEADER_STAMP_SEC		930  /**/
#define ERR_SENSOR_MSGS_IMU_HEADER_STAMP_NSEC		941  /**/
#define ERR_SENSOR_MSGS_IMU_HEADER_FRAME_ID		962  /**/
#define ERR_SENSOR_MSGS_IMU_ORIENTATION_X		983  /**/
#define ERR_SENSOR_MSGS_IMU_ORIENTATION_Y		994  /**/
#define ERR_SENSOR_MSGS_IMU_ORIENTATION_Z		1005  /**/
#define ERR_SENSOR_MSGS_IMU_ORIENTATION_W		1016  /**/
#define ERR_SENSOR_MSGS_IMU_ORIENTATION_COVARIANCE_ELM		1037  /**/
#define ERR_SENSOR_MSGS_IMU_ANGULAR_VELOCITY_X		1054  /**/
#define ERR_SENSOR_MSGS_IMU_ANGULAR_VELOCITY_Y		1065  /**/
#define ERR_SENSOR_MSGS_IMU_ANGULAR_VELOCITY_Z		1076  /**/
#define ERR_SENSOR_MSGS_IMU_ANGULAR_VELOCITY_COVARIANCE_ELM		1097  /**/
#define ERR_SENSOR_MSGS_IMU_LINEAR_ACCELERATION_X		1114  /**/
#define ERR_SENSOR_MSGS_IMU_LINEAR_ACCELERATION_Y		1125  /**/
#define ERR_SENSOR_MSGS_IMU_LINEAR_ACCELERATION_Z		1136  /**/
#define ERR_SENSOR_MSGS_IMU_LINEAR_ACCELERATION_COVARIANCE_ELM		1157  /**/
flag asn1SccSensor_msgs_Imu_IsConstraintValid(const asn1SccSensor_msgs_Imu* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_IMU		1174  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMU_HEADER_2		979  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMU_ORIENTATION_2		1033  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMU_ORIENTATION_COVARIANCE		1048  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMU_ORIENTATION_COVARIANCE_ELM_2		1044  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMU_ANGULAR_VELOCITY_2		1093  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMU_ANGULAR_VELOCITY_COVARIANCE		1108  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMU_ANGULAR_VELOCITY_COVARIANCE_ELM_2		1104  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMU_LINEAR_ACCELERATION_2		1153  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMU_LINEAR_ACCELERATION_COVARIANCE		1168  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_IMU_LINEAR_ACCELERATION_COVARIANCE_ELM_2		1164  /**/
#define asn1SccSensor_msgs_Imu_REQUIRED_BYTES_FOR_ENCODING       554 
#define asn1SccSensor_msgs_Imu_REQUIRED_BITS_FOR_ENCODING        4430

flag asn1SccSensor_msgs_Imu_Encode(const asn1SccSensor_msgs_Imu* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_IMU		1175  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMU_HEADER_2		980  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMU_ORIENTATION_2		1034  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMU_ORIENTATION_COVARIANCE		1049  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMU_ORIENTATION_COVARIANCE_ELM_2		1045  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMU_ANGULAR_VELOCITY_2		1094  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMU_ANGULAR_VELOCITY_COVARIANCE		1109  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMU_ANGULAR_VELOCITY_COVARIANCE_ELM_2		1105  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMU_LINEAR_ACCELERATION_2		1154  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMU_LINEAR_ACCELERATION_COVARIANCE		1169  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_IMU_LINEAR_ACCELERATION_COVARIANCE_ELM_2		1165  /**/
flag asn1SccSensor_msgs_Imu_Decode(asn1SccSensor_msgs_Imu* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[60];
} asn1SccSensor_msgs_JointState_name_value;

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[60];
} asn1SccSensor_msgs_JointState_position;

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[60];
} asn1SccSensor_msgs_JointState_velocity;

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[60];
} asn1SccSensor_msgs_JointState_effort;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccSensor_msgs_JointState_name_value name_value;
    asn1SccSensor_msgs_JointState_position position;
    asn1SccSensor_msgs_JointState_velocity velocity;
    asn1SccSensor_msgs_JointState_effort effort;
} asn1SccSensor_msgs_JointState;

flag asn1SccSensor_msgs_JointState_name_value_Equal(const asn1SccSensor_msgs_JointState_name_value* pVal1, const asn1SccSensor_msgs_JointState_name_value* pVal2);

flag asn1SccSensor_msgs_JointState_position_Equal(const asn1SccSensor_msgs_JointState_position* pVal1, const asn1SccSensor_msgs_JointState_position* pVal2);

flag asn1SccSensor_msgs_JointState_velocity_Equal(const asn1SccSensor_msgs_JointState_velocity* pVal1, const asn1SccSensor_msgs_JointState_velocity* pVal2);

flag asn1SccSensor_msgs_JointState_effort_Equal(const asn1SccSensor_msgs_JointState_effort* pVal1, const asn1SccSensor_msgs_JointState_effort* pVal2);

flag asn1SccSensor_msgs_JointState_Equal(const asn1SccSensor_msgs_JointState* pVal1, const asn1SccSensor_msgs_JointState* pVal2);

void asn1SccSensor_msgs_JointState_name_value_Initialize(asn1SccSensor_msgs_JointState_name_value* pVal);
void asn1SccSensor_msgs_JointState_position_Initialize(asn1SccSensor_msgs_JointState_position* pVal);
void asn1SccSensor_msgs_JointState_velocity_Initialize(asn1SccSensor_msgs_JointState_velocity* pVal);
void asn1SccSensor_msgs_JointState_effort_Initialize(asn1SccSensor_msgs_JointState_effort* pVal);
void asn1SccSensor_msgs_JointState_Initialize(asn1SccSensor_msgs_JointState* pVal);

#define ERR_SENSOR_MSGS_JOINTSTATE_HEADER_SEQ		1180  /**/
#define ERR_SENSOR_MSGS_JOINTSTATE_HEADER_STAMP_SEC		1191  /**/
#define ERR_SENSOR_MSGS_JOINTSTATE_HEADER_STAMP_NSEC		1202  /**/
#define ERR_SENSOR_MSGS_JOINTSTATE_HEADER_FRAME_ID		1223  /**/
#define ERR_SENSOR_MSGS_JOINTSTATE_NAME_VALUE_ELM		1244  /**/
#define ERR_SENSOR_MSGS_JOINTSTATE_NAME_VALUE		1255  /**/
#define ERR_SENSOR_MSGS_JOINTSTATE_POSITION_ELM		1262  /**/
#define ERR_SENSOR_MSGS_JOINTSTATE_POSITION		1273  /**/
#define ERR_SENSOR_MSGS_JOINTSTATE_VELOCITY_ELM		1280  /**/
#define ERR_SENSOR_MSGS_JOINTSTATE_VELOCITY		1291  /**/
#define ERR_SENSOR_MSGS_JOINTSTATE_EFFORT_ELM		1298  /**/
#define ERR_SENSOR_MSGS_JOINTSTATE_EFFORT		1309  /**/
flag asn1SccSensor_msgs_JointState_IsConstraintValid(const asn1SccSensor_msgs_JointState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_JOINTSTATE		1316  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOINTSTATE_HEADER_2		1240  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOINTSTATE_NAME_VALUE		1256  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOINTSTATE_NAME_VALUE_ELM_2		1251  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOINTSTATE_POSITION		1274  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOINTSTATE_POSITION_ELM_2		1269  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOINTSTATE_VELOCITY		1292  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOINTSTATE_VELOCITY_ELM_2		1287  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOINTSTATE_EFFORT		1310  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOINTSTATE_EFFORT_ELM_2		1305  /**/
#define asn1SccSensor_msgs_JointState_REQUIRED_BYTES_FOR_ENCODING       6061 
#define asn1SccSensor_msgs_JointState_REQUIRED_BITS_FOR_ENCODING        48486

flag asn1SccSensor_msgs_JointState_Encode(const asn1SccSensor_msgs_JointState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_JOINTSTATE		1317  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOINTSTATE_HEADER_2		1241  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOINTSTATE_NAME_VALUE		1257  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOINTSTATE_NAME_VALUE_ELM_2		1252  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOINTSTATE_POSITION		1275  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOINTSTATE_POSITION_ELM_2		1270  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOINTSTATE_VELOCITY		1293  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOINTSTATE_VELOCITY_ELM_2		1288  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOINTSTATE_EFFORT		1311  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOINTSTATE_EFFORT_ELM_2		1306  /**/
flag asn1SccSensor_msgs_JointState_Decode(asn1SccSensor_msgs_JointState* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[60];
} asn1SccSensor_msgs_Joy_axes;

typedef struct {    int nCount; 
    
    asn1SccT_Int32 arr[60];
} asn1SccSensor_msgs_Joy_buttons;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccSensor_msgs_Joy_axes axes;
    asn1SccSensor_msgs_Joy_buttons buttons;
} asn1SccSensor_msgs_Joy;

flag asn1SccSensor_msgs_Joy_axes_Equal(const asn1SccSensor_msgs_Joy_axes* pVal1, const asn1SccSensor_msgs_Joy_axes* pVal2);

flag asn1SccSensor_msgs_Joy_buttons_Equal(const asn1SccSensor_msgs_Joy_buttons* pVal1, const asn1SccSensor_msgs_Joy_buttons* pVal2);

flag asn1SccSensor_msgs_Joy_Equal(const asn1SccSensor_msgs_Joy* pVal1, const asn1SccSensor_msgs_Joy* pVal2);

void asn1SccSensor_msgs_Joy_axes_Initialize(asn1SccSensor_msgs_Joy_axes* pVal);
void asn1SccSensor_msgs_Joy_buttons_Initialize(asn1SccSensor_msgs_Joy_buttons* pVal);
void asn1SccSensor_msgs_Joy_Initialize(asn1SccSensor_msgs_Joy* pVal);

#define ERR_SENSOR_MSGS_JOY_HEADER_SEQ		1322  /**/
#define ERR_SENSOR_MSGS_JOY_HEADER_STAMP_SEC		1333  /**/
#define ERR_SENSOR_MSGS_JOY_HEADER_STAMP_NSEC		1344  /**/
#define ERR_SENSOR_MSGS_JOY_HEADER_FRAME_ID		1365  /**/
#define ERR_SENSOR_MSGS_JOY_AXES_ELM		1386  /**/
#define ERR_SENSOR_MSGS_JOY_AXES		1397  /**/
#define ERR_SENSOR_MSGS_JOY_BUTTONS_ELM		1404  /**/
#define ERR_SENSOR_MSGS_JOY_BUTTONS		1415  /**/
flag asn1SccSensor_msgs_Joy_IsConstraintValid(const asn1SccSensor_msgs_Joy* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_JOY		1422  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOY_HEADER_2		1382  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOY_AXES		1398  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOY_AXES_ELM_2		1393  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOY_BUTTONS		1416  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_JOY_BUTTONS_ELM_2		1411  /**/
#define asn1SccSensor_msgs_Joy_REQUIRED_BYTES_FOR_ENCODING       1095 
#define asn1SccSensor_msgs_Joy_REQUIRED_BITS_FOR_ENCODING        8754

flag asn1SccSensor_msgs_Joy_Encode(const asn1SccSensor_msgs_Joy* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_JOY		1423  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOY_HEADER_2		1383  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOY_AXES		1399  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOY_AXES_ELM_2		1394  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOY_BUTTONS		1417  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_JOY_BUTTONS_ELM_2		1412  /**/
flag asn1SccSensor_msgs_Joy_Decode(asn1SccSensor_msgs_Joy* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[60];
} asn1SccSensor_msgs_LaserScan_ranges;

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[60];
} asn1SccSensor_msgs_LaserScan_intensities;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_Float angle_min;
    asn1SccT_Float angle_max;
    asn1SccT_Float angle_increment;
    asn1SccT_Float time_increment;
    asn1SccT_Float scan_time;
    asn1SccT_Float range_min;
    asn1SccT_Float range_max;
    asn1SccSensor_msgs_LaserScan_ranges ranges;
    asn1SccSensor_msgs_LaserScan_intensities intensities;
} asn1SccSensor_msgs_LaserScan;

flag asn1SccSensor_msgs_LaserScan_ranges_Equal(const asn1SccSensor_msgs_LaserScan_ranges* pVal1, const asn1SccSensor_msgs_LaserScan_ranges* pVal2);

flag asn1SccSensor_msgs_LaserScan_intensities_Equal(const asn1SccSensor_msgs_LaserScan_intensities* pVal1, const asn1SccSensor_msgs_LaserScan_intensities* pVal2);

flag asn1SccSensor_msgs_LaserScan_Equal(const asn1SccSensor_msgs_LaserScan* pVal1, const asn1SccSensor_msgs_LaserScan* pVal2);

void asn1SccSensor_msgs_LaserScan_ranges_Initialize(asn1SccSensor_msgs_LaserScan_ranges* pVal);
void asn1SccSensor_msgs_LaserScan_intensities_Initialize(asn1SccSensor_msgs_LaserScan_intensities* pVal);
void asn1SccSensor_msgs_LaserScan_Initialize(asn1SccSensor_msgs_LaserScan* pVal);

#define ERR_SENSOR_MSGS_LASERSCAN_HEADER_SEQ		1535  /**/
#define ERR_SENSOR_MSGS_LASERSCAN_HEADER_STAMP_SEC		1546  /**/
#define ERR_SENSOR_MSGS_LASERSCAN_HEADER_STAMP_NSEC		1557  /**/
#define ERR_SENSOR_MSGS_LASERSCAN_HEADER_FRAME_ID		1578  /**/
#define ERR_SENSOR_MSGS_LASERSCAN_ANGLE_MIN		1599  /**/
#define ERR_SENSOR_MSGS_LASERSCAN_ANGLE_MAX		1610  /**/
#define ERR_SENSOR_MSGS_LASERSCAN_ANGLE_INCREMENT		1621  /**/
#define ERR_SENSOR_MSGS_LASERSCAN_TIME_INCREMENT		1632  /**/
#define ERR_SENSOR_MSGS_LASERSCAN_SCAN_TIME		1643  /**/
#define ERR_SENSOR_MSGS_LASERSCAN_RANGE_MIN		1654  /**/
#define ERR_SENSOR_MSGS_LASERSCAN_RANGE_MAX		1665  /**/
#define ERR_SENSOR_MSGS_LASERSCAN_RANGES_ELM		1676  /**/
#define ERR_SENSOR_MSGS_LASERSCAN_RANGES		1687  /**/
#define ERR_SENSOR_MSGS_LASERSCAN_INTENSITIES_ELM		1694  /**/
#define ERR_SENSOR_MSGS_LASERSCAN_INTENSITIES		1705  /**/
flag asn1SccSensor_msgs_LaserScan_IsConstraintValid(const asn1SccSensor_msgs_LaserScan* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERSCAN		1712  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERSCAN_HEADER_2		1595  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERSCAN_ANGLE_MIN_2		1606  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERSCAN_ANGLE_MAX_2		1617  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERSCAN_ANGLE_INCREMENT_2		1628  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERSCAN_TIME_INCREMENT_2		1639  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERSCAN_SCAN_TIME_2		1650  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERSCAN_RANGE_MIN_2		1661  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERSCAN_RANGE_MAX_2		1672  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERSCAN_RANGES		1688  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERSCAN_RANGES_ELM_2		1683  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERSCAN_INTENSITIES		1706  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_LASERSCAN_INTENSITIES_ELM_2		1701  /**/
#define asn1SccSensor_msgs_LaserScan_REQUIRED_BYTES_FOR_ENCODING       1726 
#define asn1SccSensor_msgs_LaserScan_REQUIRED_BITS_FOR_ENCODING        13802

flag asn1SccSensor_msgs_LaserScan_Encode(const asn1SccSensor_msgs_LaserScan* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_LASERSCAN		1713  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_LASERSCAN_HEADER_2		1596  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_LASERSCAN_ANGLE_MIN_2		1607  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_LASERSCAN_ANGLE_MAX_2		1618  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_LASERSCAN_ANGLE_INCREMENT_2		1629  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_LASERSCAN_TIME_INCREMENT_2		1640  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_LASERSCAN_SCAN_TIME_2		1651  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_LASERSCAN_RANGE_MIN_2		1662  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_LASERSCAN_RANGE_MAX_2		1673  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_LASERSCAN_RANGES		1689  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_LASERSCAN_RANGES_ELM_2		1684  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_LASERSCAN_INTENSITIES		1707  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_LASERSCAN_INTENSITIES_ELM_2		1702  /**/
flag asn1SccSensor_msgs_LaserScan_Decode(asn1SccSensor_msgs_LaserScan* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    
    asn1SccT_Double arr[9];
} asn1SccSensor_msgs_MagneticField_magnetic_field_covariance;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Vector3 magnetic_field;
    asn1SccSensor_msgs_MagneticField_magnetic_field_covariance magnetic_field_covariance;
} asn1SccSensor_msgs_MagneticField;

flag asn1SccSensor_msgs_MagneticField_magnetic_field_covariance_Equal(const asn1SccSensor_msgs_MagneticField_magnetic_field_covariance* pVal1, const asn1SccSensor_msgs_MagneticField_magnetic_field_covariance* pVal2);

flag asn1SccSensor_msgs_MagneticField_Equal(const asn1SccSensor_msgs_MagneticField* pVal1, const asn1SccSensor_msgs_MagneticField* pVal2);

void asn1SccSensor_msgs_MagneticField_magnetic_field_covariance_Initialize(asn1SccSensor_msgs_MagneticField_magnetic_field_covariance* pVal);
void asn1SccSensor_msgs_MagneticField_Initialize(asn1SccSensor_msgs_MagneticField* pVal);

#define ERR_SENSOR_MSGS_MAGNETICFIELD_HEADER_SEQ		1718  /**/
#define ERR_SENSOR_MSGS_MAGNETICFIELD_HEADER_STAMP_SEC		1729  /**/
#define ERR_SENSOR_MSGS_MAGNETICFIELD_HEADER_STAMP_NSEC		1740  /**/
#define ERR_SENSOR_MSGS_MAGNETICFIELD_HEADER_FRAME_ID		1761  /**/
#define ERR_SENSOR_MSGS_MAGNETICFIELD_MAGNETIC_FIELD_X		1782  /**/
#define ERR_SENSOR_MSGS_MAGNETICFIELD_MAGNETIC_FIELD_Y		1793  /**/
#define ERR_SENSOR_MSGS_MAGNETICFIELD_MAGNETIC_FIELD_Z		1804  /**/
#define ERR_SENSOR_MSGS_MAGNETICFIELD_MAGNETIC_FIELD_COVARIANCE_ELM		1825  /**/
flag asn1SccSensor_msgs_MagneticField_IsConstraintValid(const asn1SccSensor_msgs_MagneticField* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_MAGNETICFIELD		1842  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MAGNETICFIELD_HEADER_2		1778  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MAGNETICFIELD_MAGNETIC_FIELD_2		1821  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MAGNETICFIELD_MAGNETIC_FIELD_COVARIANCE		1836  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MAGNETICFIELD_MAGNETIC_FIELD_COVARIANCE_ELM_2		1832  /**/
#define asn1SccSensor_msgs_MagneticField_REQUIRED_BYTES_FOR_ENCODING       229 
#define asn1SccSensor_msgs_MagneticField_REQUIRED_BITS_FOR_ENCODING        1830

flag asn1SccSensor_msgs_MagneticField_Encode(const asn1SccSensor_msgs_MagneticField* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_MAGNETICFIELD		1843  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MAGNETICFIELD_HEADER_2		1779  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MAGNETICFIELD_MAGNETIC_FIELD_2		1822  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MAGNETICFIELD_MAGNETIC_FIELD_COVARIANCE		1837  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MAGNETICFIELD_MAGNETIC_FIELD_COVARIANCE_ELM_2		1833  /**/
flag asn1SccSensor_msgs_MagneticField_Decode(asn1SccSensor_msgs_MagneticField* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_String arr[60];
} asn1SccSensor_msgs_MultiDOFJointState_joint_names;

typedef struct {    int nCount; 
    
    asn1SccGeometry_msgs_Transform arr[60];
} asn1SccSensor_msgs_MultiDOFJointState_transforms;

typedef struct {    int nCount; 
    
    asn1SccGeometry_msgs_Twist arr[60];
} asn1SccSensor_msgs_MultiDOFJointState_twist;

typedef struct {    int nCount; 
    
    asn1SccGeometry_msgs_Wrench arr[60];
} asn1SccSensor_msgs_MultiDOFJointState_wrench;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccSensor_msgs_MultiDOFJointState_joint_names joint_names;
    asn1SccSensor_msgs_MultiDOFJointState_transforms transforms;
    asn1SccSensor_msgs_MultiDOFJointState_twist twist;
    asn1SccSensor_msgs_MultiDOFJointState_wrench wrench;
} asn1SccSensor_msgs_MultiDOFJointState;

flag asn1SccSensor_msgs_MultiDOFJointState_joint_names_Equal(const asn1SccSensor_msgs_MultiDOFJointState_joint_names* pVal1, const asn1SccSensor_msgs_MultiDOFJointState_joint_names* pVal2);

flag asn1SccSensor_msgs_MultiDOFJointState_transforms_Equal(const asn1SccSensor_msgs_MultiDOFJointState_transforms* pVal1, const asn1SccSensor_msgs_MultiDOFJointState_transforms* pVal2);

flag asn1SccSensor_msgs_MultiDOFJointState_twist_Equal(const asn1SccSensor_msgs_MultiDOFJointState_twist* pVal1, const asn1SccSensor_msgs_MultiDOFJointState_twist* pVal2);

flag asn1SccSensor_msgs_MultiDOFJointState_wrench_Equal(const asn1SccSensor_msgs_MultiDOFJointState_wrench* pVal1, const asn1SccSensor_msgs_MultiDOFJointState_wrench* pVal2);

flag asn1SccSensor_msgs_MultiDOFJointState_Equal(const asn1SccSensor_msgs_MultiDOFJointState* pVal1, const asn1SccSensor_msgs_MultiDOFJointState* pVal2);

void asn1SccSensor_msgs_MultiDOFJointState_joint_names_Initialize(asn1SccSensor_msgs_MultiDOFJointState_joint_names* pVal);
void asn1SccSensor_msgs_MultiDOFJointState_transforms_Initialize(asn1SccSensor_msgs_MultiDOFJointState_transforms* pVal);
void asn1SccSensor_msgs_MultiDOFJointState_twist_Initialize(asn1SccSensor_msgs_MultiDOFJointState_twist* pVal);
void asn1SccSensor_msgs_MultiDOFJointState_wrench_Initialize(asn1SccSensor_msgs_MultiDOFJointState_wrench* pVal);
void asn1SccSensor_msgs_MultiDOFJointState_Initialize(asn1SccSensor_msgs_MultiDOFJointState* pVal);

#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_HEADER_SEQ		1848  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_HEADER_STAMP_SEC		1859  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_HEADER_STAMP_NSEC		1870  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_HEADER_FRAME_ID		1891  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_JOINT_NAMES_ELM		1912  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_JOINT_NAMES		1923  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TRANSFORMS_ELM_TRANSLATION_X		1930  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TRANSFORMS_ELM_TRANSLATION_Y		1941  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TRANSFORMS_ELM_TRANSLATION_Z		1952  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TRANSFORMS_ELM_ROTATION_X		1973  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TRANSFORMS_ELM_ROTATION_Y		1984  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TRANSFORMS_ELM_ROTATION_Z		1995  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TRANSFORMS_ELM_ROTATION_W		2006  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TRANSFORMS		2037  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TWIST_ELM_LINEAR_X		2044  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TWIST_ELM_LINEAR_Y		2055  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TWIST_ELM_LINEAR_Z		2066  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TWIST_ELM_ANGULAR_X		2087  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TWIST_ELM_ANGULAR_Y		2098  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TWIST_ELM_ANGULAR_Z		2109  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_TWIST		2140  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_WRENCH_ELM_FORCE_X		2147  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_WRENCH_ELM_FORCE_Y		2158  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_WRENCH_ELM_FORCE_Z		2169  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_WRENCH_ELM_TORQUE_X		2190  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_WRENCH_ELM_TORQUE_Y		2201  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_WRENCH_ELM_TORQUE_Z		2212  /**/
#define ERR_SENSOR_MSGS_MULTIDOFJOINTSTATE_WRENCH		2243  /**/
flag asn1SccSensor_msgs_MultiDOFJointState_IsConstraintValid(const asn1SccSensor_msgs_MultiDOFJointState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIDOFJOINTSTATE		2250  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_HEADER_2		1908  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_JOINT_NAMES		1924  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_JOINT_NAMES_ELM_2		1919  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_TRANSFORMS		2038  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_TRANSFORMS_ELM_2		2033  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_TWIST		2141  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_TWIST_ELM_2		2136  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_WRENCH		2244  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_WRENCH_ELM_2		2239  /**/
#define asn1SccSensor_msgs_MultiDOFJointState_REQUIRED_BYTES_FOR_ENCODING       18541 
#define asn1SccSensor_msgs_MultiDOFJointState_REQUIRED_BITS_FOR_ENCODING        148326

flag asn1SccSensor_msgs_MultiDOFJointState_Encode(const asn1SccSensor_msgs_MultiDOFJointState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIDOFJOINTSTATE		2251  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_HEADER_2		1909  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_JOINT_NAMES		1925  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_JOINT_NAMES_ELM_2		1920  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_TRANSFORMS		2039  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_TRANSFORMS_ELM_2		2034  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_TWIST		2142  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_TWIST_ELM_2		2137  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_WRENCH		2245  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIDOFJOINTSTATE_WRENCH_ELM_2		2240  /**/
flag asn1SccSensor_msgs_MultiDOFJointState_Decode(asn1SccSensor_msgs_MultiDOFJointState* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccSensor_msgs_LaserEcho arr[60];
} asn1SccSensor_msgs_MultiEchoLaserScan_ranges;

typedef struct {    int nCount; 
    
    asn1SccSensor_msgs_LaserEcho arr[60];
} asn1SccSensor_msgs_MultiEchoLaserScan_intensities;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_Float angle_min;
    asn1SccT_Float angle_max;
    asn1SccT_Float angle_increment;
    asn1SccT_Float time_increment;
    asn1SccT_Float scan_time;
    asn1SccT_Float range_min;
    asn1SccT_Float range_max;
    asn1SccSensor_msgs_MultiEchoLaserScan_ranges ranges;
    asn1SccSensor_msgs_MultiEchoLaserScan_intensities intensities;
} asn1SccSensor_msgs_MultiEchoLaserScan;

flag asn1SccSensor_msgs_MultiEchoLaserScan_ranges_Equal(const asn1SccSensor_msgs_MultiEchoLaserScan_ranges* pVal1, const asn1SccSensor_msgs_MultiEchoLaserScan_ranges* pVal2);

flag asn1SccSensor_msgs_MultiEchoLaserScan_intensities_Equal(const asn1SccSensor_msgs_MultiEchoLaserScan_intensities* pVal1, const asn1SccSensor_msgs_MultiEchoLaserScan_intensities* pVal2);

flag asn1SccSensor_msgs_MultiEchoLaserScan_Equal(const asn1SccSensor_msgs_MultiEchoLaserScan* pVal1, const asn1SccSensor_msgs_MultiEchoLaserScan* pVal2);

void asn1SccSensor_msgs_MultiEchoLaserScan_ranges_Initialize(asn1SccSensor_msgs_MultiEchoLaserScan_ranges* pVal);
void asn1SccSensor_msgs_MultiEchoLaserScan_intensities_Initialize(asn1SccSensor_msgs_MultiEchoLaserScan_intensities* pVal);
void asn1SccSensor_msgs_MultiEchoLaserScan_Initialize(asn1SccSensor_msgs_MultiEchoLaserScan* pVal);

#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_HEADER_SEQ		2256  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_HEADER_STAMP_SEC		2267  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_HEADER_STAMP_NSEC		2278  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_HEADER_FRAME_ID		2299  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_ANGLE_MIN		2320  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_ANGLE_MAX		2331  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_ANGLE_INCREMENT		2342  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_TIME_INCREMENT		2353  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_SCAN_TIME		2364  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_RANGE_MIN		2375  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_RANGE_MAX		2386  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_RANGES_ELM_ELM		2397  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_RANGES_ELM		2408  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_RANGES		2419  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_INTENSITIES_ELM_ELM		2426  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_INTENSITIES_ELM		2437  /**/
#define ERR_SENSOR_MSGS_MULTIECHOLASERSCAN_INTENSITIES		2448  /**/
flag asn1SccSensor_msgs_MultiEchoLaserScan_IsConstraintValid(const asn1SccSensor_msgs_MultiEchoLaserScan* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIECHOLASERSCAN		2455  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIECHOLASERSCAN_HEADER_2		2316  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIECHOLASERSCAN_ANGLE_MIN_2		2327  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIECHOLASERSCAN_ANGLE_MAX_2		2338  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIECHOLASERSCAN_ANGLE_INCREMENT_2		2349  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIECHOLASERSCAN_TIME_INCREMENT_2		2360  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIECHOLASERSCAN_SCAN_TIME_2		2371  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIECHOLASERSCAN_RANGE_MIN_2		2382  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIECHOLASERSCAN_RANGE_MAX_2		2393  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIECHOLASERSCAN_RANGES		2420  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIECHOLASERSCAN_RANGES_ELM_2		2415  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIECHOLASERSCAN_INTENSITIES		2449  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_MULTIECHOLASERSCAN_INTENSITIES_ELM_2		2444  /**/
#define asn1SccSensor_msgs_MultiEchoLaserScan_REQUIRED_BYTES_FOR_ENCODING       93856 
#define asn1SccSensor_msgs_MultiEchoLaserScan_REQUIRED_BITS_FOR_ENCODING        750842

flag asn1SccSensor_msgs_MultiEchoLaserScan_Encode(const asn1SccSensor_msgs_MultiEchoLaserScan* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIECHOLASERSCAN		2456  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIECHOLASERSCAN_HEADER_2		2317  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIECHOLASERSCAN_ANGLE_MIN_2		2328  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIECHOLASERSCAN_ANGLE_MAX_2		2339  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIECHOLASERSCAN_ANGLE_INCREMENT_2		2350  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIECHOLASERSCAN_TIME_INCREMENT_2		2361  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIECHOLASERSCAN_SCAN_TIME_2		2372  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIECHOLASERSCAN_RANGE_MIN_2		2383  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIECHOLASERSCAN_RANGE_MAX_2		2394  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIECHOLASERSCAN_RANGES		2421  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIECHOLASERSCAN_RANGES_ELM_2		2416  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIECHOLASERSCAN_INTENSITIES		2450  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_MULTIECHOLASERSCAN_INTENSITIES_ELM_2		2445  /**/
flag asn1SccSensor_msgs_MultiEchoLaserScan_Decode(asn1SccSensor_msgs_MultiEchoLaserScan* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    
    asn1SccT_Double arr[9];
} asn1SccSensor_msgs_NavSatFix_position_covariance;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccSensor_msgs_NavSatStatus status;
    asn1SccT_Double latitude;
    asn1SccT_Double longitude;
    asn1SccT_Double altitude;
    asn1SccSensor_msgs_NavSatFix_position_covariance position_covariance;
    asn1SccT_UInt8 position_covariance_type;
} asn1SccSensor_msgs_NavSatFix;

flag asn1SccSensor_msgs_NavSatFix_position_covariance_Equal(const asn1SccSensor_msgs_NavSatFix_position_covariance* pVal1, const asn1SccSensor_msgs_NavSatFix_position_covariance* pVal2);

flag asn1SccSensor_msgs_NavSatFix_Equal(const asn1SccSensor_msgs_NavSatFix* pVal1, const asn1SccSensor_msgs_NavSatFix* pVal2);

void asn1SccSensor_msgs_NavSatFix_position_covariance_Initialize(asn1SccSensor_msgs_NavSatFix_position_covariance* pVal);
void asn1SccSensor_msgs_NavSatFix_Initialize(asn1SccSensor_msgs_NavSatFix* pVal);

#define ERR_SENSOR_MSGS_NAVSATFIX_HEADER_SEQ		2461  /**/
#define ERR_SENSOR_MSGS_NAVSATFIX_HEADER_STAMP_SEC		2472  /**/
#define ERR_SENSOR_MSGS_NAVSATFIX_HEADER_STAMP_NSEC		2483  /**/
#define ERR_SENSOR_MSGS_NAVSATFIX_HEADER_FRAME_ID		2504  /**/
#define ERR_SENSOR_MSGS_NAVSATFIX_STATUS_STATUS		2525  /**/
#define ERR_SENSOR_MSGS_NAVSATFIX_STATUS_SERVICE_VALUE		2536  /**/
#define ERR_SENSOR_MSGS_NAVSATFIX_LATITUDE		2557  /**/
#define ERR_SENSOR_MSGS_NAVSATFIX_LONGITUDE		2568  /**/
#define ERR_SENSOR_MSGS_NAVSATFIX_ALTITUDE		2579  /**/
#define ERR_SENSOR_MSGS_NAVSATFIX_POSITION_COVARIANCE_ELM		2590  /**/
#define ERR_SENSOR_MSGS_NAVSATFIX_POSITION_COVARIANCE_TYPE		2607  /**/
flag asn1SccSensor_msgs_NavSatFix_IsConstraintValid(const asn1SccSensor_msgs_NavSatFix* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_NAVSATFIX		2618  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_NAVSATFIX_HEADER_2		2521  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_NAVSATFIX_STATUS_2		2553  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_NAVSATFIX_LATITUDE_2		2564  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_NAVSATFIX_LONGITUDE_2		2575  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_NAVSATFIX_ALTITUDE_2		2586  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_NAVSATFIX_POSITION_COVARIANCE		2601  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_NAVSATFIX_POSITION_COVARIANCE_ELM_2		2597  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_NAVSATFIX_POSITION_COVARIANCE_TYPE_2		2614  /**/
#define asn1SccSensor_msgs_NavSatFix_REQUIRED_BYTES_FOR_ENCODING       233 
#define asn1SccSensor_msgs_NavSatFix_REQUIRED_BITS_FOR_ENCODING        1862

flag asn1SccSensor_msgs_NavSatFix_Encode(const asn1SccSensor_msgs_NavSatFix* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_NAVSATFIX		2619  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_NAVSATFIX_HEADER_2		2522  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_NAVSATFIX_STATUS_2		2554  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_NAVSATFIX_LATITUDE_2		2565  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_NAVSATFIX_LONGITUDE_2		2576  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_NAVSATFIX_ALTITUDE_2		2587  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_NAVSATFIX_POSITION_COVARIANCE		2602  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_NAVSATFIX_POSITION_COVARIANCE_ELM_2		2598  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_NAVSATFIX_POSITION_COVARIANCE_TYPE_2		2615  /**/
flag asn1SccSensor_msgs_NavSatFix_Decode(asn1SccSensor_msgs_NavSatFix* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccGeometry_msgs_Point32 arr[60];
} asn1SccSensor_msgs_PointCloud_points;

typedef struct {    int nCount; 
    
    asn1SccSensor_msgs_ChannelFloat32 arr[60];
} asn1SccSensor_msgs_PointCloud_channels;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccSensor_msgs_PointCloud_points points;
    asn1SccSensor_msgs_PointCloud_channels channels;
} asn1SccSensor_msgs_PointCloud;

flag asn1SccSensor_msgs_PointCloud_points_Equal(const asn1SccSensor_msgs_PointCloud_points* pVal1, const asn1SccSensor_msgs_PointCloud_points* pVal2);

flag asn1SccSensor_msgs_PointCloud_channels_Equal(const asn1SccSensor_msgs_PointCloud_channels* pVal1, const asn1SccSensor_msgs_PointCloud_channels* pVal2);

flag asn1SccSensor_msgs_PointCloud_Equal(const asn1SccSensor_msgs_PointCloud* pVal1, const asn1SccSensor_msgs_PointCloud* pVal2);

void asn1SccSensor_msgs_PointCloud_points_Initialize(asn1SccSensor_msgs_PointCloud_points* pVal);
void asn1SccSensor_msgs_PointCloud_channels_Initialize(asn1SccSensor_msgs_PointCloud_channels* pVal);
void asn1SccSensor_msgs_PointCloud_Initialize(asn1SccSensor_msgs_PointCloud* pVal);

#define ERR_SENSOR_MSGS_POINTCLOUD_HEADER_SEQ		2652  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD_HEADER_STAMP_SEC		2663  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD_HEADER_STAMP_NSEC		2674  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD_HEADER_FRAME_ID		2695  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD_POINTS_ELM_X		2716  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD_POINTS_ELM_Y		2727  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD_POINTS_ELM_Z		2738  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD_POINTS		2759  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD_CHANNELS_ELM_NAME_VALUE		2766  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD_CHANNELS_ELM_VALUES_ELM		2777  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD_CHANNELS_ELM_VALUES		2788  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD_CHANNELS		2805  /**/
flag asn1SccSensor_msgs_PointCloud_IsConstraintValid(const asn1SccSensor_msgs_PointCloud* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD		2812  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD_HEADER_2		2712  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD_POINTS		2760  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD_POINTS_ELM_2		2755  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD_CHANNELS		2806  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD_CHANNELS_ELM_2		2801  /**/
#define asn1SccSensor_msgs_PointCloud_REQUIRED_BYTES_FOR_ENCODING       52905 
#define asn1SccSensor_msgs_PointCloud_REQUIRED_BITS_FOR_ENCODING        423234

flag asn1SccSensor_msgs_PointCloud_Encode(const asn1SccSensor_msgs_PointCloud* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD		2813  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD_HEADER_2		2713  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD_POINTS		2761  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD_POINTS_ELM_2		2756  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD_CHANNELS		2807  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD_CHANNELS_ELM_2		2802  /**/
flag asn1SccSensor_msgs_PointCloud_Decode(asn1SccSensor_msgs_PointCloud* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccSensor_msgs_PointField arr[60];
} asn1SccSensor_msgs_PointCloud2_fields;

typedef struct {
    int nCount; 
    
    byte arr[60];
} asn1SccSensor_msgs_PointCloud2_data_value;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_UInt32 height;
    asn1SccT_UInt32 width;
    asn1SccSensor_msgs_PointCloud2_fields fields;
    asn1SccT_Boolean is_bigendian;
    asn1SccT_UInt32 point_step;
    asn1SccT_UInt32 row_step;
    asn1SccSensor_msgs_PointCloud2_data_value data_value;
    asn1SccT_Boolean is_dense;
} asn1SccSensor_msgs_PointCloud2;

flag asn1SccSensor_msgs_PointCloud2_fields_Equal(const asn1SccSensor_msgs_PointCloud2_fields* pVal1, const asn1SccSensor_msgs_PointCloud2_fields* pVal2);

flag asn1SccSensor_msgs_PointCloud2_data_value_Equal(const asn1SccSensor_msgs_PointCloud2_data_value* pVal1, const asn1SccSensor_msgs_PointCloud2_data_value* pVal2);

flag asn1SccSensor_msgs_PointCloud2_Equal(const asn1SccSensor_msgs_PointCloud2* pVal1, const asn1SccSensor_msgs_PointCloud2* pVal2);

void asn1SccSensor_msgs_PointCloud2_fields_Initialize(asn1SccSensor_msgs_PointCloud2_fields* pVal);
void asn1SccSensor_msgs_PointCloud2_data_value_Initialize(asn1SccSensor_msgs_PointCloud2_data_value* pVal);
void asn1SccSensor_msgs_PointCloud2_Initialize(asn1SccSensor_msgs_PointCloud2* pVal);

#define ERR_SENSOR_MSGS_POINTCLOUD2_HEADER_SEQ		2818  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_HEADER_STAMP_SEC		2829  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_HEADER_STAMP_NSEC		2840  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_HEADER_FRAME_ID		2861  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_HEIGHT		2882  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_WIDTH		2893  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_FIELDS_ELM_NAME_VALUE		2904  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_FIELDS_ELM_OFFSET		2915  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_FIELDS_ELM_DATATYPE		2926  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_FIELDS_ELM_COUNT		2937  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_FIELDS		2958  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_IS_BIGENDIAN		2965  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_POINT_STEP		2976  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_ROW_STEP		2987  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_DATA_VALUE		2998  /**/
#define ERR_SENSOR_MSGS_POINTCLOUD2_IS_DENSE		3005  /**/
flag asn1SccSensor_msgs_PointCloud2_IsConstraintValid(const asn1SccSensor_msgs_PointCloud2* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD2		3016  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD2_HEADER_2		2878  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD2_HEIGHT_2		2889  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD2_WIDTH_2		2900  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD2_FIELDS		2959  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD2_FIELDS_ELM_2		2954  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD2_IS_BIGENDIAN_2		2972  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD2_POINT_STEP_2		2983  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD2_ROW_STEP_2		2994  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD2_DATA_VALUE		2999  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_POINTCLOUD2_IS_DENSE_2		3012  /**/
#define asn1SccSensor_msgs_PointCloud2_REQUIRED_BYTES_FOR_ENCODING       4336 
#define asn1SccSensor_msgs_PointCloud2_REQUIRED_BITS_FOR_ENCODING        34684

flag asn1SccSensor_msgs_PointCloud2_Encode(const asn1SccSensor_msgs_PointCloud2* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD2		3017  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD2_HEADER_2		2879  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD2_HEIGHT_2		2890  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD2_WIDTH_2		2901  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD2_FIELDS		2960  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD2_FIELDS_ELM_2		2955  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD2_IS_BIGENDIAN_2		2973  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD2_POINT_STEP_2		2984  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD2_ROW_STEP_2		2995  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD2_DATA_VALUE		3000  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_POINTCLOUD2_IS_DENSE_2		3013  /**/
flag asn1SccSensor_msgs_PointCloud2_Decode(asn1SccSensor_msgs_PointCloud2* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_UInt8 radiation_type;
    asn1SccT_Float field_of_view;
    asn1SccT_Float min_range;
    asn1SccT_Float max_range;
    asn1SccT_Float range_value;
} asn1SccSensor_msgs_Range;

flag asn1SccSensor_msgs_Range_Equal(const asn1SccSensor_msgs_Range* pVal1, const asn1SccSensor_msgs_Range* pVal2);

void asn1SccSensor_msgs_Range_Initialize(asn1SccSensor_msgs_Range* pVal);

#define ERR_SENSOR_MSGS_RANGE_HEADER_SEQ		3072  /**/
#define ERR_SENSOR_MSGS_RANGE_HEADER_STAMP_SEC		3083  /**/
#define ERR_SENSOR_MSGS_RANGE_HEADER_STAMP_NSEC		3094  /**/
#define ERR_SENSOR_MSGS_RANGE_HEADER_FRAME_ID		3115  /**/
#define ERR_SENSOR_MSGS_RANGE_RADIATION_TYPE		3136  /**/
#define ERR_SENSOR_MSGS_RANGE_FIELD_OF_VIEW		3147  /**/
#define ERR_SENSOR_MSGS_RANGE_MIN_RANGE		3158  /**/
#define ERR_SENSOR_MSGS_RANGE_MAX_RANGE		3169  /**/
#define ERR_SENSOR_MSGS_RANGE_RANGE_VALUE		3180  /**/
flag asn1SccSensor_msgs_Range_IsConstraintValid(const asn1SccSensor_msgs_Range* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_RANGE		3191  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_RANGE_HEADER_2		3132  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_RANGE_RADIATION_TYPE_2		3143  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_RANGE_FIELD_OF_VIEW_2		3154  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_RANGE_MIN_RANGE_2		3165  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_RANGE_MAX_RANGE_2		3176  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_RANGE_RANGE_VALUE_2		3187  /**/
#define asn1SccSensor_msgs_Range_REQUIRED_BYTES_FOR_ENCODING       126 
#define asn1SccSensor_msgs_Range_REQUIRED_BITS_FOR_ENCODING        1006

flag asn1SccSensor_msgs_Range_Encode(const asn1SccSensor_msgs_Range* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_RANGE		3192  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_RANGE_HEADER_2		3133  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_RANGE_RADIATION_TYPE_2		3144  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_RANGE_FIELD_OF_VIEW_2		3155  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_RANGE_MIN_RANGE_2		3166  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_RANGE_MAX_RANGE_2		3177  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_RANGE_RANGE_VALUE_2		3188  /**/
flag asn1SccSensor_msgs_Range_Decode(asn1SccSensor_msgs_Range* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_Double relative_humidity;
    asn1SccT_Double variance;
} asn1SccSensor_msgs_RelativeHumidity;

flag asn1SccSensor_msgs_RelativeHumidity_Equal(const asn1SccSensor_msgs_RelativeHumidity* pVal1, const asn1SccSensor_msgs_RelativeHumidity* pVal2);

void asn1SccSensor_msgs_RelativeHumidity_Initialize(asn1SccSensor_msgs_RelativeHumidity* pVal);

#define ERR_SENSOR_MSGS_RELATIVEHUMIDITY_HEADER_SEQ		3258  /**/
#define ERR_SENSOR_MSGS_RELATIVEHUMIDITY_HEADER_STAMP_SEC		3269  /**/
#define ERR_SENSOR_MSGS_RELATIVEHUMIDITY_HEADER_STAMP_NSEC		3280  /**/
#define ERR_SENSOR_MSGS_RELATIVEHUMIDITY_HEADER_FRAME_ID		3301  /**/
#define ERR_SENSOR_MSGS_RELATIVEHUMIDITY_RELATIVE_HUMIDITY		3322  /**/
#define ERR_SENSOR_MSGS_RELATIVEHUMIDITY_VARIANCE		3333  /**/
flag asn1SccSensor_msgs_RelativeHumidity_IsConstraintValid(const asn1SccSensor_msgs_RelativeHumidity* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_RELATIVEHUMIDITY		3344  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_RELATIVEHUMIDITY_HEADER_2		3318  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_RELATIVEHUMIDITY_RELATIVE_HUMIDITY_2		3329  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_RELATIVEHUMIDITY_VARIANCE_2		3340  /**/
#define asn1SccSensor_msgs_RelativeHumidity_REQUIRED_BYTES_FOR_ENCODING       99 
#define asn1SccSensor_msgs_RelativeHumidity_REQUIRED_BITS_FOR_ENCODING        790

flag asn1SccSensor_msgs_RelativeHumidity_Encode(const asn1SccSensor_msgs_RelativeHumidity* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_RELATIVEHUMIDITY		3345  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_RELATIVEHUMIDITY_HEADER_2		3319  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_RELATIVEHUMIDITY_RELATIVE_HUMIDITY_2		3330  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_RELATIVEHUMIDITY_VARIANCE_2		3341  /**/
flag asn1SccSensor_msgs_RelativeHumidity_Decode(asn1SccSensor_msgs_RelativeHumidity* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_Double temperature;
    asn1SccT_Double variance;
} asn1SccSensor_msgs_Temperature;

flag asn1SccSensor_msgs_Temperature_Equal(const asn1SccSensor_msgs_Temperature* pVal1, const asn1SccSensor_msgs_Temperature* pVal2);

void asn1SccSensor_msgs_Temperature_Initialize(asn1SccSensor_msgs_Temperature* pVal);

#define ERR_SENSOR_MSGS_TEMPERATURE_HEADER_SEQ		3350  /**/
#define ERR_SENSOR_MSGS_TEMPERATURE_HEADER_STAMP_SEC		3361  /**/
#define ERR_SENSOR_MSGS_TEMPERATURE_HEADER_STAMP_NSEC		3372  /**/
#define ERR_SENSOR_MSGS_TEMPERATURE_HEADER_FRAME_ID		3393  /**/
#define ERR_SENSOR_MSGS_TEMPERATURE_TEMPERATURE		3414  /**/
#define ERR_SENSOR_MSGS_TEMPERATURE_VARIANCE		3425  /**/
flag asn1SccSensor_msgs_Temperature_IsConstraintValid(const asn1SccSensor_msgs_Temperature* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_TEMPERATURE		3436  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_TEMPERATURE_HEADER_2		3410  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_TEMPERATURE_TEMPERATURE_2		3421  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_TEMPERATURE_VARIANCE_2		3432  /**/
#define asn1SccSensor_msgs_Temperature_REQUIRED_BYTES_FOR_ENCODING       99 
#define asn1SccSensor_msgs_Temperature_REQUIRED_BITS_FOR_ENCODING        790

flag asn1SccSensor_msgs_Temperature_Encode(const asn1SccSensor_msgs_Temperature* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_TEMPERATURE		3437  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_TEMPERATURE_HEADER_2		3411  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_TEMPERATURE_TEMPERATURE_2		3422  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_TEMPERATURE_VARIANCE_2		3433  /**/
flag asn1SccSensor_msgs_Temperature_Decode(asn1SccSensor_msgs_Temperature* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_Time time_ref;
    asn1SccT_String source;
} asn1SccSensor_msgs_TimeReference;

flag asn1SccSensor_msgs_TimeReference_Equal(const asn1SccSensor_msgs_TimeReference* pVal1, const asn1SccSensor_msgs_TimeReference* pVal2);

void asn1SccSensor_msgs_TimeReference_Initialize(asn1SccSensor_msgs_TimeReference* pVal);

#define ERR_SENSOR_MSGS_TIMEREFERENCE_HEADER_SEQ		3442  /**/
#define ERR_SENSOR_MSGS_TIMEREFERENCE_HEADER_STAMP_SEC		3453  /**/
#define ERR_SENSOR_MSGS_TIMEREFERENCE_HEADER_STAMP_NSEC		3464  /**/
#define ERR_SENSOR_MSGS_TIMEREFERENCE_HEADER_FRAME_ID		3485  /**/
#define ERR_SENSOR_MSGS_TIMEREFERENCE_TIME_REF_SEC		3506  /**/
#define ERR_SENSOR_MSGS_TIMEREFERENCE_TIME_REF_NSEC		3517  /**/
#define ERR_SENSOR_MSGS_TIMEREFERENCE_SOURCE		3538  /**/
flag asn1SccSensor_msgs_TimeReference_IsConstraintValid(const asn1SccSensor_msgs_TimeReference* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SENSOR_MSGS_TIMEREFERENCE		3549  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_TIMEREFERENCE_HEADER_2		3502  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_TIMEREFERENCE_TIME_REF_2		3534  /**/
#define ERR_UPER_ENCODE_SENSOR_MSGS_TIMEREFERENCE_SOURCE_2		3545  /**/
#define asn1SccSensor_msgs_TimeReference_REQUIRED_BYTES_FOR_ENCODING       142 
#define asn1SccSensor_msgs_TimeReference_REQUIRED_BITS_FOR_ENCODING        1132

flag asn1SccSensor_msgs_TimeReference_Encode(const asn1SccSensor_msgs_TimeReference* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SENSOR_MSGS_TIMEREFERENCE		3550  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_TIMEREFERENCE_HEADER_2		3503  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_TIMEREFERENCE_TIME_REF_2		3535  /**/
#define ERR_UPER_DECODE_SENSOR_MSGS_TIMEREFERENCE_SOURCE_2		3546  /**/
flag asn1SccSensor_msgs_TimeReference_Decode(asn1SccSensor_msgs_TimeReference* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Accel accel;
} asn1SccGeometry_msgs_AccelStamped;

flag asn1SccGeometry_msgs_AccelStamped_Equal(const asn1SccGeometry_msgs_AccelStamped* pVal1, const asn1SccGeometry_msgs_AccelStamped* pVal2);

void asn1SccGeometry_msgs_AccelStamped_Initialize(asn1SccGeometry_msgs_AccelStamped* pVal);

#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_HEADER_SEQ		5145  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_HEADER_STAMP_SEC		5156  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_HEADER_STAMP_NSEC		5167  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_HEADER_FRAME_ID		5188  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_LINEAR_X		5209  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_LINEAR_Y		5220  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_LINEAR_Z		5231  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_ANGULAR_X		5252  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_ANGULAR_Y		5263  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_ANGULAR_Z		5274  /**/
flag asn1SccGeometry_msgs_AccelStamped_IsConstraintValid(const asn1SccGeometry_msgs_AccelStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELSTAMPED		5305  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELSTAMPED_HEADER_2		5205  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_2		5301  /**/
#define asn1SccGeometry_msgs_AccelStamped_REQUIRED_BYTES_FOR_ENCODING       151 
#define asn1SccGeometry_msgs_AccelStamped_REQUIRED_BITS_FOR_ENCODING        1206

flag asn1SccGeometry_msgs_AccelStamped_Encode(const asn1SccGeometry_msgs_AccelStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELSTAMPED		5306  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELSTAMPED_HEADER_2		5206  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_2		5302  /**/
flag asn1SccGeometry_msgs_AccelStamped_Decode(asn1SccGeometry_msgs_AccelStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_AccelWithCovariance accel;
} asn1SccGeometry_msgs_AccelWithCovarianceStamped;

flag asn1SccGeometry_msgs_AccelWithCovarianceStamped_Equal(const asn1SccGeometry_msgs_AccelWithCovarianceStamped* pVal1, const asn1SccGeometry_msgs_AccelWithCovarianceStamped* pVal2);

void asn1SccGeometry_msgs_AccelWithCovarianceStamped_Initialize(asn1SccGeometry_msgs_AccelWithCovarianceStamped* pVal);

#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_HEADER_SEQ		5430  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_HEADER_STAMP_SEC		5441  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_HEADER_STAMP_NSEC		5452  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_HEADER_FRAME_ID		5473  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_ACCEL_LINEAR_X		5494  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_ACCEL_LINEAR_Y		5505  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_ACCEL_LINEAR_Z		5516  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_ACCEL_ANGULAR_X		5537  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_ACCEL_ANGULAR_Y		5548  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_ACCEL_ANGULAR_Z		5559  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_COVARIANCE_ELM		5590  /**/
flag asn1SccGeometry_msgs_AccelWithCovarianceStamped_IsConstraintValid(const asn1SccGeometry_msgs_AccelWithCovarianceStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED		5617  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_HEADER_2		5490  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_2		5613  /**/
#define asn1SccGeometry_msgs_AccelWithCovarianceStamped_REQUIRED_BYTES_FOR_ENCODING       619 
#define asn1SccGeometry_msgs_AccelWithCovarianceStamped_REQUIRED_BITS_FOR_ENCODING        4950

flag asn1SccGeometry_msgs_AccelWithCovarianceStamped_Encode(const asn1SccGeometry_msgs_AccelWithCovarianceStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED		5618  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_HEADER_2		5491  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_2		5614  /**/
flag asn1SccGeometry_msgs_AccelWithCovarianceStamped_Decode(asn1SccGeometry_msgs_AccelWithCovarianceStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Inertia inertia;
} asn1SccGeometry_msgs_InertiaStamped;

flag asn1SccGeometry_msgs_InertiaStamped_Equal(const asn1SccGeometry_msgs_InertiaStamped* pVal1, const asn1SccGeometry_msgs_InertiaStamped* pVal2);

void asn1SccGeometry_msgs_InertiaStamped_Initialize(asn1SccGeometry_msgs_InertiaStamped* pVal);

#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_HEADER_SEQ		5749  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_HEADER_STAMP_SEC		5760  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_HEADER_STAMP_NSEC		5771  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_HEADER_FRAME_ID		5792  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_M		5813  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_COM_X		5824  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_COM_Y		5835  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_COM_Z		5846  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_IXX		5867  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_IXY		5878  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_IXZ		5889  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_IYY		5900  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_IYZ		5911  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_IZZ		5922  /**/
flag asn1SccGeometry_msgs_InertiaStamped_IsConstraintValid(const asn1SccGeometry_msgs_InertiaStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIASTAMPED		5943  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIASTAMPED_HEADER_2		5809  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_2		5939  /**/
#define asn1SccGeometry_msgs_InertiaStamped_REQUIRED_BYTES_FOR_ENCODING       203 
#define asn1SccGeometry_msgs_InertiaStamped_REQUIRED_BITS_FOR_ENCODING        1622

flag asn1SccGeometry_msgs_InertiaStamped_Encode(const asn1SccGeometry_msgs_InertiaStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIASTAMPED		5944  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIASTAMPED_HEADER_2		5810  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_2		5940  /**/
flag asn1SccGeometry_msgs_InertiaStamped_Decode(asn1SccGeometry_msgs_InertiaStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Point point;
} asn1SccGeometry_msgs_PointStamped;

flag asn1SccGeometry_msgs_PointStamped_Equal(const asn1SccGeometry_msgs_PointStamped* pVal1, const asn1SccGeometry_msgs_PointStamped* pVal2);

void asn1SccGeometry_msgs_PointStamped_Initialize(asn1SccGeometry_msgs_PointStamped* pVal);

#define ERR_GEOMETRY_MSGS_POINTSTAMPED_HEADER_SEQ		6027  /**/
#define ERR_GEOMETRY_MSGS_POINTSTAMPED_HEADER_STAMP_SEC		6038  /**/
#define ERR_GEOMETRY_MSGS_POINTSTAMPED_HEADER_STAMP_NSEC		6049  /**/
#define ERR_GEOMETRY_MSGS_POINTSTAMPED_HEADER_FRAME_ID		6070  /**/
#define ERR_GEOMETRY_MSGS_POINTSTAMPED_POINT_X		6091  /**/
#define ERR_GEOMETRY_MSGS_POINTSTAMPED_POINT_Y		6102  /**/
#define ERR_GEOMETRY_MSGS_POINTSTAMPED_POINT_Z		6113  /**/
flag asn1SccGeometry_msgs_PointStamped_IsConstraintValid(const asn1SccGeometry_msgs_PointStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINTSTAMPED		6134  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINTSTAMPED_HEADER_2		6087  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINTSTAMPED_POINT_2		6130  /**/
#define asn1SccGeometry_msgs_PointStamped_REQUIRED_BYTES_FOR_ENCODING       112 
#define asn1SccGeometry_msgs_PointStamped_REQUIRED_BITS_FOR_ENCODING        894

flag asn1SccGeometry_msgs_PointStamped_Encode(const asn1SccGeometry_msgs_PointStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINTSTAMPED		6135  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINTSTAMPED_HEADER_2		6088  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINTSTAMPED_POINT_2		6131  /**/
flag asn1SccGeometry_msgs_PointStamped_Decode(asn1SccGeometry_msgs_PointStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Polygon polygon;
} asn1SccGeometry_msgs_PolygonStamped;

flag asn1SccGeometry_msgs_PolygonStamped_Equal(const asn1SccGeometry_msgs_PolygonStamped* pVal1, const asn1SccGeometry_msgs_PolygonStamped* pVal2);

void asn1SccGeometry_msgs_PolygonStamped_Initialize(asn1SccGeometry_msgs_PolygonStamped* pVal);

#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_HEADER_SEQ		6190  /**/
#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_HEADER_STAMP_SEC		6201  /**/
#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_HEADER_STAMP_NSEC		6212  /**/
#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_HEADER_FRAME_ID		6233  /**/
#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_POLYGON_ELM_X		6254  /**/
#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_POLYGON_ELM_Y		6265  /**/
#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_POLYGON_ELM_Z		6276  /**/
#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_POLYGON		6297  /**/
flag asn1SccGeometry_msgs_PolygonStamped_IsConstraintValid(const asn1SccGeometry_msgs_PolygonStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POLYGONSTAMPED		6308  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POLYGONSTAMPED_HEADER_2		6250  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POLYGONSTAMPED_POLYGON_2		6304  /**/
#define asn1SccGeometry_msgs_PolygonStamped_REQUIRED_BYTES_FOR_ENCODING       2414 
#define asn1SccGeometry_msgs_PolygonStamped_REQUIRED_BITS_FOR_ENCODING        19308

flag asn1SccGeometry_msgs_PolygonStamped_Encode(const asn1SccGeometry_msgs_PolygonStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POLYGONSTAMPED		6309  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POLYGONSTAMPED_HEADER_2		6251  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POLYGONSTAMPED_POLYGON_2		6305  /**/
flag asn1SccGeometry_msgs_PolygonStamped_Decode(asn1SccGeometry_msgs_PolygonStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccGeometry_msgs_Pose arr[60];
} asn1SccGeometry_msgs_PoseArray_poses;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_PoseArray_poses poses;
} asn1SccGeometry_msgs_PoseArray;

flag asn1SccGeometry_msgs_PoseArray_poses_Equal(const asn1SccGeometry_msgs_PoseArray_poses* pVal1, const asn1SccGeometry_msgs_PoseArray_poses* pVal2);

flag asn1SccGeometry_msgs_PoseArray_Equal(const asn1SccGeometry_msgs_PoseArray* pVal1, const asn1SccGeometry_msgs_PoseArray* pVal2);

void asn1SccGeometry_msgs_PoseArray_poses_Initialize(asn1SccGeometry_msgs_PoseArray_poses* pVal);
void asn1SccGeometry_msgs_PoseArray_Initialize(asn1SccGeometry_msgs_PoseArray* pVal);

#define ERR_GEOMETRY_MSGS_POSEARRAY_HEADER_SEQ		6456  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_HEADER_STAMP_SEC		6467  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_HEADER_STAMP_NSEC		6478  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_HEADER_FRAME_ID		6499  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_POSITION_X		6520  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_POSITION_Y		6531  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_POSITION_Z		6542  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_ORIENTATION_X		6563  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_ORIENTATION_Y		6574  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_ORIENTATION_Z		6585  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_ORIENTATION_W		6596  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES		6627  /**/
flag asn1SccGeometry_msgs_PoseArray_IsConstraintValid(const asn1SccGeometry_msgs_PoseArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEARRAY		6634  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEARRAY_HEADER_2		6516  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEARRAY_POSES		6628  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_2		6623  /**/
#define asn1SccGeometry_msgs_PoseArray_REQUIRED_BYTES_FOR_ENCODING       5534 
#define asn1SccGeometry_msgs_PoseArray_REQUIRED_BITS_FOR_ENCODING        44268

flag asn1SccGeometry_msgs_PoseArray_Encode(const asn1SccGeometry_msgs_PoseArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEARRAY		6635  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEARRAY_HEADER_2		6517  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEARRAY_POSES		6629  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_2		6624  /**/
flag asn1SccGeometry_msgs_PoseArray_Decode(asn1SccGeometry_msgs_PoseArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Pose pose;
} asn1SccGeometry_msgs_PoseStamped;

flag asn1SccGeometry_msgs_PoseStamped_Equal(const asn1SccGeometry_msgs_PoseStamped* pVal1, const asn1SccGeometry_msgs_PoseStamped* pVal2);

void asn1SccGeometry_msgs_PoseStamped_Initialize(asn1SccGeometry_msgs_PoseStamped* pVal);

#define ERR_GEOMETRY_MSGS_POSESTAMPED_HEADER_SEQ		6640  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_HEADER_STAMP_SEC		6651  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_HEADER_STAMP_NSEC		6662  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_HEADER_FRAME_ID		6683  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_POSE_POSITION_X		6704  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_POSE_POSITION_Y		6715  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_POSE_POSITION_Z		6726  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_POSE_ORIENTATION_X		6747  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_POSE_ORIENTATION_Y		6758  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_POSE_ORIENTATION_Z		6769  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_POSE_ORIENTATION_W		6780  /**/
flag asn1SccGeometry_msgs_PoseStamped_IsConstraintValid(const asn1SccGeometry_msgs_PoseStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSESTAMPED		6811  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSESTAMPED_HEADER_2		6700  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSESTAMPED_POSE_2		6807  /**/
#define asn1SccGeometry_msgs_PoseStamped_REQUIRED_BYTES_FOR_ENCODING       164 
#define asn1SccGeometry_msgs_PoseStamped_REQUIRED_BITS_FOR_ENCODING        1310

flag asn1SccGeometry_msgs_PoseStamped_Encode(const asn1SccGeometry_msgs_PoseStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSESTAMPED		6812  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSESTAMPED_HEADER_2		6701  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSESTAMPED_POSE_2		6808  /**/
flag asn1SccGeometry_msgs_PoseStamped_Decode(asn1SccGeometry_msgs_PoseStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_PoseWithCovariance pose;
} asn1SccGeometry_msgs_PoseWithCovarianceStamped;

flag asn1SccGeometry_msgs_PoseWithCovarianceStamped_Equal(const asn1SccGeometry_msgs_PoseWithCovarianceStamped* pVal1, const asn1SccGeometry_msgs_PoseWithCovarianceStamped* pVal2);

void asn1SccGeometry_msgs_PoseWithCovarianceStamped_Initialize(asn1SccGeometry_msgs_PoseWithCovarianceStamped* pVal);

#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_HEADER_SEQ		6947  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_HEADER_STAMP_SEC		6958  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_HEADER_STAMP_NSEC		6969  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_HEADER_FRAME_ID		6990  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_POSE_POSITION_X		7011  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_POSE_POSITION_Y		7022  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_POSE_POSITION_Z		7033  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_POSE_ORIENTATION_X		7054  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_POSE_ORIENTATION_Y		7065  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_POSE_ORIENTATION_Z		7076  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_POSE_ORIENTATION_W		7087  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_COVARIANCE_ELM		7118  /**/
flag asn1SccGeometry_msgs_PoseWithCovarianceStamped_IsConstraintValid(const asn1SccGeometry_msgs_PoseWithCovarianceStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED		7145  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_HEADER_2		7007  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_2		7141  /**/
#define asn1SccGeometry_msgs_PoseWithCovarianceStamped_REQUIRED_BYTES_FOR_ENCODING       632 
#define asn1SccGeometry_msgs_PoseWithCovarianceStamped_REQUIRED_BITS_FOR_ENCODING        5054

flag asn1SccGeometry_msgs_PoseWithCovarianceStamped_Encode(const asn1SccGeometry_msgs_PoseWithCovarianceStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED		7146  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_HEADER_2		7008  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_2		7142  /**/
flag asn1SccGeometry_msgs_PoseWithCovarianceStamped_Decode(asn1SccGeometry_msgs_PoseWithCovarianceStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Quaternion quaternion;
} asn1SccGeometry_msgs_QuaternionStamped;

flag asn1SccGeometry_msgs_QuaternionStamped_Equal(const asn1SccGeometry_msgs_QuaternionStamped* pVal1, const asn1SccGeometry_msgs_QuaternionStamped* pVal2);

void asn1SccGeometry_msgs_QuaternionStamped_Initialize(asn1SccGeometry_msgs_QuaternionStamped* pVal);

#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_HEADER_SEQ		7201  /**/
#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_HEADER_STAMP_SEC		7212  /**/
#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_HEADER_STAMP_NSEC		7223  /**/
#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_HEADER_FRAME_ID		7244  /**/
#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_QUATERNION_X		7265  /**/
#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_QUATERNION_Y		7276  /**/
#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_QUATERNION_Z		7287  /**/
#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_QUATERNION_W		7298  /**/
flag asn1SccGeometry_msgs_QuaternionStamped_IsConstraintValid(const asn1SccGeometry_msgs_QuaternionStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNIONSTAMPED		7319  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNIONSTAMPED_HEADER_2		7261  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNIONSTAMPED_QUATERNION_2		7315  /**/
#define asn1SccGeometry_msgs_QuaternionStamped_REQUIRED_BYTES_FOR_ENCODING       125 
#define asn1SccGeometry_msgs_QuaternionStamped_REQUIRED_BITS_FOR_ENCODING        998

flag asn1SccGeometry_msgs_QuaternionStamped_Encode(const asn1SccGeometry_msgs_QuaternionStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNIONSTAMPED		7320  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNIONSTAMPED_HEADER_2		7262  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNIONSTAMPED_QUATERNION_2		7316  /**/
flag asn1SccGeometry_msgs_QuaternionStamped_Decode(asn1SccGeometry_msgs_QuaternionStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_String child_frame_id;
    asn1SccGeometry_msgs_Transform transform;
} asn1SccGeometry_msgs_TransformStamped;

flag asn1SccGeometry_msgs_TransformStamped_Equal(const asn1SccGeometry_msgs_TransformStamped* pVal1, const asn1SccGeometry_msgs_TransformStamped* pVal2);

void asn1SccGeometry_msgs_TransformStamped_Initialize(asn1SccGeometry_msgs_TransformStamped* pVal);

#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_HEADER_SEQ		7428  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_HEADER_STAMP_SEC		7439  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_HEADER_STAMP_NSEC		7450  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_HEADER_FRAME_ID		7471  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_CHILD_FRAME_ID		7492  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_TRANSLATION_X		7503  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_TRANSLATION_Y		7514  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_TRANSLATION_Z		7525  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_ROTATION_X		7546  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_ROTATION_Y		7557  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_ROTATION_Z		7568  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_ROTATION_W		7579  /**/
flag asn1SccGeometry_msgs_TransformStamped_IsConstraintValid(const asn1SccGeometry_msgs_TransformStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TRANSFORMSTAMPED		7610  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TRANSFORMSTAMPED_HEADER_2		7488  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TRANSFORMSTAMPED_CHILD_FRAME_ID_2		7499  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_2		7606  /**/
#define asn1SccGeometry_msgs_TransformStamped_REQUIRED_BYTES_FOR_ENCODING       225 
#define asn1SccGeometry_msgs_TransformStamped_REQUIRED_BITS_FOR_ENCODING        1796

flag asn1SccGeometry_msgs_TransformStamped_Encode(const asn1SccGeometry_msgs_TransformStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_TRANSFORMSTAMPED		7611  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TRANSFORMSTAMPED_HEADER_2		7489  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TRANSFORMSTAMPED_CHILD_FRAME_ID_2		7500  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_2		7607  /**/
flag asn1SccGeometry_msgs_TransformStamped_Decode(asn1SccGeometry_msgs_TransformStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Twist twist;
} asn1SccGeometry_msgs_TwistStamped;

flag asn1SccGeometry_msgs_TwistStamped_Equal(const asn1SccGeometry_msgs_TwistStamped* pVal1, const asn1SccGeometry_msgs_TwistStamped* pVal2);

void asn1SccGeometry_msgs_TwistStamped_Initialize(asn1SccGeometry_msgs_TwistStamped* pVal);

#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_HEADER_SEQ		7708  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_HEADER_STAMP_SEC		7719  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_HEADER_STAMP_NSEC		7730  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_HEADER_FRAME_ID		7751  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_LINEAR_X		7772  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_LINEAR_Y		7783  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_LINEAR_Z		7794  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_ANGULAR_X		7815  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_ANGULAR_Y		7826  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_ANGULAR_Z		7837  /**/
flag asn1SccGeometry_msgs_TwistStamped_IsConstraintValid(const asn1SccGeometry_msgs_TwistStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTSTAMPED		7868  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTSTAMPED_HEADER_2		7768  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_2		7864  /**/
#define asn1SccGeometry_msgs_TwistStamped_REQUIRED_BYTES_FOR_ENCODING       151 
#define asn1SccGeometry_msgs_TwistStamped_REQUIRED_BITS_FOR_ENCODING        1206

flag asn1SccGeometry_msgs_TwistStamped_Encode(const asn1SccGeometry_msgs_TwistStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTSTAMPED		7869  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTSTAMPED_HEADER_2		7769  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_2		7865  /**/
flag asn1SccGeometry_msgs_TwistStamped_Decode(asn1SccGeometry_msgs_TwistStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_TwistWithCovariance twist;
} asn1SccGeometry_msgs_TwistWithCovarianceStamped;

flag asn1SccGeometry_msgs_TwistWithCovarianceStamped_Equal(const asn1SccGeometry_msgs_TwistWithCovarianceStamped* pVal1, const asn1SccGeometry_msgs_TwistWithCovarianceStamped* pVal2);

void asn1SccGeometry_msgs_TwistWithCovarianceStamped_Initialize(asn1SccGeometry_msgs_TwistWithCovarianceStamped* pVal);

#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_HEADER_SEQ		7993  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_HEADER_STAMP_SEC		8004  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_HEADER_STAMP_NSEC		8015  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_HEADER_FRAME_ID		8036  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_TWIST_LINEAR_X		8057  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_TWIST_LINEAR_Y		8068  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_TWIST_LINEAR_Z		8079  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_TWIST_ANGULAR_X		8100  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_TWIST_ANGULAR_Y		8111  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_TWIST_ANGULAR_Z		8122  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_COVARIANCE_ELM		8153  /**/
flag asn1SccGeometry_msgs_TwistWithCovarianceStamped_IsConstraintValid(const asn1SccGeometry_msgs_TwistWithCovarianceStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED		8180  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_HEADER_2		8053  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_2		8176  /**/
#define asn1SccGeometry_msgs_TwistWithCovarianceStamped_REQUIRED_BYTES_FOR_ENCODING       619 
#define asn1SccGeometry_msgs_TwistWithCovarianceStamped_REQUIRED_BITS_FOR_ENCODING        4950

flag asn1SccGeometry_msgs_TwistWithCovarianceStamped_Encode(const asn1SccGeometry_msgs_TwistWithCovarianceStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED		8181  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_HEADER_2		8054  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_2		8177  /**/
flag asn1SccGeometry_msgs_TwistWithCovarianceStamped_Decode(asn1SccGeometry_msgs_TwistWithCovarianceStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Vector3 vector;
} asn1SccGeometry_msgs_Vector3Stamped;

flag asn1SccGeometry_msgs_Vector3Stamped_Equal(const asn1SccGeometry_msgs_Vector3Stamped* pVal1, const asn1SccGeometry_msgs_Vector3Stamped* pVal2);

void asn1SccGeometry_msgs_Vector3Stamped_Initialize(asn1SccGeometry_msgs_Vector3Stamped* pVal);

#define ERR_GEOMETRY_MSGS_VECTOR3STAMPED_HEADER_SEQ		8225  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3STAMPED_HEADER_STAMP_SEC		8236  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3STAMPED_HEADER_STAMP_NSEC		8247  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3STAMPED_HEADER_FRAME_ID		8268  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3STAMPED_VECTOR_X		8289  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3STAMPED_VECTOR_Y		8300  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3STAMPED_VECTOR_Z		8311  /**/
flag asn1SccGeometry_msgs_Vector3Stamped_IsConstraintValid(const asn1SccGeometry_msgs_Vector3Stamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_VECTOR3STAMPED		8332  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_VECTOR3STAMPED_HEADER_2		8285  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_VECTOR3STAMPED_VECTOR_2		8328  /**/
#define asn1SccGeometry_msgs_Vector3Stamped_REQUIRED_BYTES_FOR_ENCODING       112 
#define asn1SccGeometry_msgs_Vector3Stamped_REQUIRED_BITS_FOR_ENCODING        894

flag asn1SccGeometry_msgs_Vector3Stamped_Encode(const asn1SccGeometry_msgs_Vector3Stamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_VECTOR3STAMPED		8333  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_VECTOR3STAMPED_HEADER_2		8286  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_VECTOR3STAMPED_VECTOR_2		8329  /**/
flag asn1SccGeometry_msgs_Vector3Stamped_Decode(asn1SccGeometry_msgs_Vector3Stamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Wrench wrench;
} asn1SccGeometry_msgs_WrenchStamped;

flag asn1SccGeometry_msgs_WrenchStamped_Equal(const asn1SccGeometry_msgs_WrenchStamped* pVal1, const asn1SccGeometry_msgs_WrenchStamped* pVal2);

void asn1SccGeometry_msgs_WrenchStamped_Initialize(asn1SccGeometry_msgs_WrenchStamped* pVal);

#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_HEADER_SEQ		8430  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_HEADER_STAMP_SEC		8441  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_HEADER_STAMP_NSEC		8452  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_HEADER_FRAME_ID		8473  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_FORCE_X		8494  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_FORCE_Y		8505  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_FORCE_Z		8516  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_TORQUE_X		8537  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_TORQUE_Y		8548  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_TORQUE_Z		8559  /**/
flag asn1SccGeometry_msgs_WrenchStamped_IsConstraintValid(const asn1SccGeometry_msgs_WrenchStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_WRENCHSTAMPED		8590  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_WRENCHSTAMPED_HEADER_2		8490  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_2		8586  /**/
#define asn1SccGeometry_msgs_WrenchStamped_REQUIRED_BYTES_FOR_ENCODING       151 
#define asn1SccGeometry_msgs_WrenchStamped_REQUIRED_BITS_FOR_ENCODING        1206

flag asn1SccGeometry_msgs_WrenchStamped_Encode(const asn1SccGeometry_msgs_WrenchStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_WRENCHSTAMPED		8591  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_WRENCHSTAMPED_HEADER_2		8491  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_2		8587  /**/
flag asn1SccGeometry_msgs_WrenchStamped_Decode(asn1SccGeometry_msgs_WrenchStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_String label;
    asn1SccT_UInt32 size_value;
    asn1SccT_UInt32 stride;
} asn1SccStd_msgs_MultiArrayDimension;

flag asn1SccStd_msgs_MultiArrayDimension_Equal(const asn1SccStd_msgs_MultiArrayDimension* pVal1, const asn1SccStd_msgs_MultiArrayDimension* pVal2);

void asn1SccStd_msgs_MultiArrayDimension_Initialize(asn1SccStd_msgs_MultiArrayDimension* pVal);

#define ERR_STD_MSGS_MULTIARRAYDIMENSION_LABEL		4491  /**/
#define ERR_STD_MSGS_MULTIARRAYDIMENSION_SIZE_VALUE		4502  /**/
#define ERR_STD_MSGS_MULTIARRAYDIMENSION_STRIDE		4513  /**/
flag asn1SccStd_msgs_MultiArrayDimension_IsConstraintValid(const asn1SccStd_msgs_MultiArrayDimension* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYDIMENSION		4524  /**/
#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYDIMENSION_LABEL_2		4498  /**/
#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYDIMENSION_SIZE_VALUE_2		4509  /**/
#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYDIMENSION_STRIDE_2		4520  /**/
#define asn1SccStd_msgs_MultiArrayDimension_REQUIRED_BYTES_FOR_ENCODING       69 
#define asn1SccStd_msgs_MultiArrayDimension_REQUIRED_BITS_FOR_ENCODING        550

flag asn1SccStd_msgs_MultiArrayDimension_Encode(const asn1SccStd_msgs_MultiArrayDimension* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYDIMENSION		4525  /**/
#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYDIMENSION_LABEL_2		4499  /**/
#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYDIMENSION_SIZE_VALUE_2		4510  /**/
#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYDIMENSION_STRIDE_2		4521  /**/
flag asn1SccStd_msgs_MultiArrayDimension_Decode(asn1SccStd_msgs_MultiArrayDimension* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccStd_msgs_MultiArrayDimension arr[60];
} asn1SccStd_msgs_MultiArrayLayout_dim;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout_dim dim;
    asn1SccT_UInt32 data_offset;
} asn1SccStd_msgs_MultiArrayLayout;

flag asn1SccStd_msgs_MultiArrayLayout_dim_Equal(const asn1SccStd_msgs_MultiArrayLayout_dim* pVal1, const asn1SccStd_msgs_MultiArrayLayout_dim* pVal2);

flag asn1SccStd_msgs_MultiArrayLayout_Equal(const asn1SccStd_msgs_MultiArrayLayout* pVal1, const asn1SccStd_msgs_MultiArrayLayout* pVal2);

void asn1SccStd_msgs_MultiArrayLayout_dim_Initialize(asn1SccStd_msgs_MultiArrayLayout_dim* pVal);
void asn1SccStd_msgs_MultiArrayLayout_Initialize(asn1SccStd_msgs_MultiArrayLayout* pVal);

#define ERR_STD_MSGS_MULTIARRAYLAYOUT_DIM_ELM_LABEL		4530  /**/
#define ERR_STD_MSGS_MULTIARRAYLAYOUT_DIM_ELM_SIZE_VALUE		4541  /**/
#define ERR_STD_MSGS_MULTIARRAYLAYOUT_DIM_ELM_STRIDE		4552  /**/
#define ERR_STD_MSGS_MULTIARRAYLAYOUT_DIM		4573  /**/
#define ERR_STD_MSGS_MULTIARRAYLAYOUT_DATA_OFFSET		4580  /**/
flag asn1SccStd_msgs_MultiArrayLayout_IsConstraintValid(const asn1SccStd_msgs_MultiArrayLayout* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYLAYOUT		4591  /**/
#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYLAYOUT_DIM		4574  /**/
#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYLAYOUT_DIM_ELM_2		4569  /**/
#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYLAYOUT_DATA_OFFSET_2		4587  /**/
#define asn1SccStd_msgs_MultiArrayLayout_REQUIRED_BYTES_FOR_ENCODING       4130 
#define asn1SccStd_msgs_MultiArrayLayout_REQUIRED_BITS_FOR_ENCODING        33038

flag asn1SccStd_msgs_MultiArrayLayout_Encode(const asn1SccStd_msgs_MultiArrayLayout* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYLAYOUT		4592  /**/
#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYLAYOUT_DIM		4575  /**/
#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYLAYOUT_DIM_ELM_2		4570  /**/
#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYLAYOUT_DATA_OFFSET_2		4588  /**/
flag asn1SccStd_msgs_MultiArrayLayout_Decode(asn1SccStd_msgs_MultiArrayLayout* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    int nCount; 
    
    byte arr[60];
} asn1SccStd_msgs_ByteMultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_ByteMultiArray_data_value data_value;
} asn1SccStd_msgs_ByteMultiArray;

flag asn1SccStd_msgs_ByteMultiArray_data_value_Equal(const asn1SccStd_msgs_ByteMultiArray_data_value* pVal1, const asn1SccStd_msgs_ByteMultiArray_data_value* pVal2);

flag asn1SccStd_msgs_ByteMultiArray_Equal(const asn1SccStd_msgs_ByteMultiArray* pVal1, const asn1SccStd_msgs_ByteMultiArray* pVal2);

void asn1SccStd_msgs_ByteMultiArray_data_value_Initialize(asn1SccStd_msgs_ByteMultiArray_data_value* pVal);
void asn1SccStd_msgs_ByteMultiArray_Initialize(asn1SccStd_msgs_ByteMultiArray* pVal);

#define ERR_STD_MSGS_BYTEMULTIARRAY_LAYOUT_DIM_ELM_LABEL		3612  /**/
#define ERR_STD_MSGS_BYTEMULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		3623  /**/
#define ERR_STD_MSGS_BYTEMULTIARRAY_LAYOUT_DIM_ELM_STRIDE		3634  /**/
#define ERR_STD_MSGS_BYTEMULTIARRAY_LAYOUT_DIM		3655  /**/
#define ERR_STD_MSGS_BYTEMULTIARRAY_LAYOUT_DATA_OFFSET		3662  /**/
#define ERR_STD_MSGS_BYTEMULTIARRAY_DATA_VALUE		3683  /**/
flag asn1SccStd_msgs_ByteMultiArray_IsConstraintValid(const asn1SccStd_msgs_ByteMultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_BYTEMULTIARRAY		3690  /**/
#define ERR_UPER_ENCODE_STD_MSGS_BYTEMULTIARRAY_LAYOUT_2		3679  /**/
#define ERR_UPER_ENCODE_STD_MSGS_BYTEMULTIARRAY_DATA_VALUE		3684  /**/
#define asn1SccStd_msgs_ByteMultiArray_REQUIRED_BYTES_FOR_ENCODING       4191 
#define asn1SccStd_msgs_ByteMultiArray_REQUIRED_BITS_FOR_ENCODING        33524

flag asn1SccStd_msgs_ByteMultiArray_Encode(const asn1SccStd_msgs_ByteMultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_BYTEMULTIARRAY		3691  /**/
#define ERR_UPER_DECODE_STD_MSGS_BYTEMULTIARRAY_LAYOUT_2		3680  /**/
#define ERR_UPER_DECODE_STD_MSGS_BYTEMULTIARRAY_DATA_VALUE		3685  /**/
flag asn1SccStd_msgs_ByteMultiArray_Decode(asn1SccStd_msgs_ByteMultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[60];
} asn1SccStd_msgs_Float32MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_Float32MultiArray_data_value data_value;
} asn1SccStd_msgs_Float32MultiArray;

flag asn1SccStd_msgs_Float32MultiArray_data_value_Equal(const asn1SccStd_msgs_Float32MultiArray_data_value* pVal1, const asn1SccStd_msgs_Float32MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_Float32MultiArray_Equal(const asn1SccStd_msgs_Float32MultiArray* pVal1, const asn1SccStd_msgs_Float32MultiArray* pVal2);

void asn1SccStd_msgs_Float32MultiArray_data_value_Initialize(asn1SccStd_msgs_Float32MultiArray_data_value* pVal);
void asn1SccStd_msgs_Float32MultiArray_Initialize(asn1SccStd_msgs_Float32MultiArray* pVal);

#define ERR_STD_MSGS_FLOAT32MULTIARRAY_LAYOUT_DIM_ELM_LABEL		3806  /**/
#define ERR_STD_MSGS_FLOAT32MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		3817  /**/
#define ERR_STD_MSGS_FLOAT32MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		3828  /**/
#define ERR_STD_MSGS_FLOAT32MULTIARRAY_LAYOUT_DIM		3849  /**/
#define ERR_STD_MSGS_FLOAT32MULTIARRAY_LAYOUT_DATA_OFFSET		3856  /**/
#define ERR_STD_MSGS_FLOAT32MULTIARRAY_DATA_VALUE_ELM		3877  /**/
#define ERR_STD_MSGS_FLOAT32MULTIARRAY_DATA_VALUE		3888  /**/
flag asn1SccStd_msgs_Float32MultiArray_IsConstraintValid(const asn1SccStd_msgs_Float32MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_FLOAT32MULTIARRAY		3895  /**/
#define ERR_UPER_ENCODE_STD_MSGS_FLOAT32MULTIARRAY_LAYOUT_2		3873  /**/
#define ERR_UPER_ENCODE_STD_MSGS_FLOAT32MULTIARRAY_DATA_VALUE		3889  /**/
#define ERR_UPER_ENCODE_STD_MSGS_FLOAT32MULTIARRAY_DATA_VALUE_ELM_2		3884  /**/
#define asn1SccStd_msgs_Float32MultiArray_REQUIRED_BYTES_FOR_ENCODING       4911 
#define asn1SccStd_msgs_Float32MultiArray_REQUIRED_BITS_FOR_ENCODING        39284

flag asn1SccStd_msgs_Float32MultiArray_Encode(const asn1SccStd_msgs_Float32MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_FLOAT32MULTIARRAY		3896  /**/
#define ERR_UPER_DECODE_STD_MSGS_FLOAT32MULTIARRAY_LAYOUT_2		3874  /**/
#define ERR_UPER_DECODE_STD_MSGS_FLOAT32MULTIARRAY_DATA_VALUE		3890  /**/
#define ERR_UPER_DECODE_STD_MSGS_FLOAT32MULTIARRAY_DATA_VALUE_ELM_2		3885  /**/
flag asn1SccStd_msgs_Float32MultiArray_Decode(asn1SccStd_msgs_Float32MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[60];
} asn1SccStd_msgs_Float64MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_Float64MultiArray_data_value data_value;
} asn1SccStd_msgs_Float64MultiArray;

flag asn1SccStd_msgs_Float64MultiArray_data_value_Equal(const asn1SccStd_msgs_Float64MultiArray_data_value* pVal1, const asn1SccStd_msgs_Float64MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_Float64MultiArray_Equal(const asn1SccStd_msgs_Float64MultiArray* pVal1, const asn1SccStd_msgs_Float64MultiArray* pVal2);

void asn1SccStd_msgs_Float64MultiArray_data_value_Initialize(asn1SccStd_msgs_Float64MultiArray_data_value* pVal);
void asn1SccStd_msgs_Float64MultiArray_Initialize(asn1SccStd_msgs_Float64MultiArray* pVal);

#define ERR_STD_MSGS_FLOAT64MULTIARRAY_LAYOUT_DIM_ELM_LABEL		3912  /**/
#define ERR_STD_MSGS_FLOAT64MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		3923  /**/
#define ERR_STD_MSGS_FLOAT64MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		3934  /**/
#define ERR_STD_MSGS_FLOAT64MULTIARRAY_LAYOUT_DIM		3955  /**/
#define ERR_STD_MSGS_FLOAT64MULTIARRAY_LAYOUT_DATA_OFFSET		3962  /**/
#define ERR_STD_MSGS_FLOAT64MULTIARRAY_DATA_VALUE_ELM		3983  /**/
#define ERR_STD_MSGS_FLOAT64MULTIARRAY_DATA_VALUE		3994  /**/
flag asn1SccStd_msgs_Float64MultiArray_IsConstraintValid(const asn1SccStd_msgs_Float64MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_FLOAT64MULTIARRAY		4001  /**/
#define ERR_UPER_ENCODE_STD_MSGS_FLOAT64MULTIARRAY_LAYOUT_2		3979  /**/
#define ERR_UPER_ENCODE_STD_MSGS_FLOAT64MULTIARRAY_DATA_VALUE		3995  /**/
#define ERR_UPER_ENCODE_STD_MSGS_FLOAT64MULTIARRAY_DATA_VALUE_ELM_2		3990  /**/
#define asn1SccStd_msgs_Float64MultiArray_REQUIRED_BYTES_FOR_ENCODING       4911 
#define asn1SccStd_msgs_Float64MultiArray_REQUIRED_BITS_FOR_ENCODING        39284

flag asn1SccStd_msgs_Float64MultiArray_Encode(const asn1SccStd_msgs_Float64MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_FLOAT64MULTIARRAY		4002  /**/
#define ERR_UPER_DECODE_STD_MSGS_FLOAT64MULTIARRAY_LAYOUT_2		3980  /**/
#define ERR_UPER_DECODE_STD_MSGS_FLOAT64MULTIARRAY_DATA_VALUE		3996  /**/
#define ERR_UPER_DECODE_STD_MSGS_FLOAT64MULTIARRAY_DATA_VALUE_ELM_2		3991  /**/
flag asn1SccStd_msgs_Float64MultiArray_Decode(asn1SccStd_msgs_Float64MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Int16 arr[60];
} asn1SccStd_msgs_Int16MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_Int16MultiArray_data_value data_value;
} asn1SccStd_msgs_Int16MultiArray;

flag asn1SccStd_msgs_Int16MultiArray_data_value_Equal(const asn1SccStd_msgs_Int16MultiArray_data_value* pVal1, const asn1SccStd_msgs_Int16MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_Int16MultiArray_Equal(const asn1SccStd_msgs_Int16MultiArray* pVal1, const asn1SccStd_msgs_Int16MultiArray* pVal2);

void asn1SccStd_msgs_Int16MultiArray_data_value_Initialize(asn1SccStd_msgs_Int16MultiArray_data_value* pVal);
void asn1SccStd_msgs_Int16MultiArray_Initialize(asn1SccStd_msgs_Int16MultiArray* pVal);

#define ERR_STD_MSGS_INT16MULTIARRAY_LAYOUT_DIM_ELM_LABEL		4078  /**/
#define ERR_STD_MSGS_INT16MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		4089  /**/
#define ERR_STD_MSGS_INT16MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		4100  /**/
#define ERR_STD_MSGS_INT16MULTIARRAY_LAYOUT_DIM		4121  /**/
#define ERR_STD_MSGS_INT16MULTIARRAY_LAYOUT_DATA_OFFSET		4128  /**/
#define ERR_STD_MSGS_INT16MULTIARRAY_DATA_VALUE_ELM		4149  /**/
#define ERR_STD_MSGS_INT16MULTIARRAY_DATA_VALUE		4160  /**/
flag asn1SccStd_msgs_Int16MultiArray_IsConstraintValid(const asn1SccStd_msgs_Int16MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT16MULTIARRAY		4167  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT16MULTIARRAY_LAYOUT_2		4145  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT16MULTIARRAY_DATA_VALUE		4161  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT16MULTIARRAY_DATA_VALUE_ELM_2		4156  /**/
#define asn1SccStd_msgs_Int16MultiArray_REQUIRED_BYTES_FOR_ENCODING       4251 
#define asn1SccStd_msgs_Int16MultiArray_REQUIRED_BITS_FOR_ENCODING        34004

flag asn1SccStd_msgs_Int16MultiArray_Encode(const asn1SccStd_msgs_Int16MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT16MULTIARRAY		4168  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT16MULTIARRAY_LAYOUT_2		4146  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT16MULTIARRAY_DATA_VALUE		4162  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT16MULTIARRAY_DATA_VALUE_ELM_2		4157  /**/
flag asn1SccStd_msgs_Int16MultiArray_Decode(asn1SccStd_msgs_Int16MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Int32 arr[60];
} asn1SccStd_msgs_Int32MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_Int32MultiArray_data_value data_value;
} asn1SccStd_msgs_Int32MultiArray;

flag asn1SccStd_msgs_Int32MultiArray_data_value_Equal(const asn1SccStd_msgs_Int32MultiArray_data_value* pVal1, const asn1SccStd_msgs_Int32MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_Int32MultiArray_Equal(const asn1SccStd_msgs_Int32MultiArray* pVal1, const asn1SccStd_msgs_Int32MultiArray* pVal2);

void asn1SccStd_msgs_Int32MultiArray_data_value_Initialize(asn1SccStd_msgs_Int32MultiArray_data_value* pVal);
void asn1SccStd_msgs_Int32MultiArray_Initialize(asn1SccStd_msgs_Int32MultiArray* pVal);

#define ERR_STD_MSGS_INT32MULTIARRAY_LAYOUT_DIM_ELM_LABEL		4184  /**/
#define ERR_STD_MSGS_INT32MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		4195  /**/
#define ERR_STD_MSGS_INT32MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		4206  /**/
#define ERR_STD_MSGS_INT32MULTIARRAY_LAYOUT_DIM		4227  /**/
#define ERR_STD_MSGS_INT32MULTIARRAY_LAYOUT_DATA_OFFSET		4234  /**/
#define ERR_STD_MSGS_INT32MULTIARRAY_DATA_VALUE_ELM		4255  /**/
#define ERR_STD_MSGS_INT32MULTIARRAY_DATA_VALUE		4266  /**/
flag asn1SccStd_msgs_Int32MultiArray_IsConstraintValid(const asn1SccStd_msgs_Int32MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT32MULTIARRAY		4273  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT32MULTIARRAY_LAYOUT_2		4251  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT32MULTIARRAY_DATA_VALUE		4267  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT32MULTIARRAY_DATA_VALUE_ELM_2		4262  /**/
#define asn1SccStd_msgs_Int32MultiArray_REQUIRED_BYTES_FOR_ENCODING       4371 
#define asn1SccStd_msgs_Int32MultiArray_REQUIRED_BITS_FOR_ENCODING        34964

flag asn1SccStd_msgs_Int32MultiArray_Encode(const asn1SccStd_msgs_Int32MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT32MULTIARRAY		4274  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT32MULTIARRAY_LAYOUT_2		4252  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT32MULTIARRAY_DATA_VALUE		4268  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT32MULTIARRAY_DATA_VALUE_ELM_2		4263  /**/
flag asn1SccStd_msgs_Int32MultiArray_Decode(asn1SccStd_msgs_Int32MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Int64 arr[60];
} asn1SccStd_msgs_Int64MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_Int64MultiArray_data_value data_value;
} asn1SccStd_msgs_Int64MultiArray;

flag asn1SccStd_msgs_Int64MultiArray_data_value_Equal(const asn1SccStd_msgs_Int64MultiArray_data_value* pVal1, const asn1SccStd_msgs_Int64MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_Int64MultiArray_Equal(const asn1SccStd_msgs_Int64MultiArray* pVal1, const asn1SccStd_msgs_Int64MultiArray* pVal2);

void asn1SccStd_msgs_Int64MultiArray_data_value_Initialize(asn1SccStd_msgs_Int64MultiArray_data_value* pVal);
void asn1SccStd_msgs_Int64MultiArray_Initialize(asn1SccStd_msgs_Int64MultiArray* pVal);

#define ERR_STD_MSGS_INT64MULTIARRAY_LAYOUT_DIM_ELM_LABEL		4290  /**/
#define ERR_STD_MSGS_INT64MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		4301  /**/
#define ERR_STD_MSGS_INT64MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		4312  /**/
#define ERR_STD_MSGS_INT64MULTIARRAY_LAYOUT_DIM		4333  /**/
#define ERR_STD_MSGS_INT64MULTIARRAY_LAYOUT_DATA_OFFSET		4340  /**/
#define ERR_STD_MSGS_INT64MULTIARRAY_DATA_VALUE_ELM		4361  /**/
#define ERR_STD_MSGS_INT64MULTIARRAY_DATA_VALUE		4372  /**/
flag asn1SccStd_msgs_Int64MultiArray_IsConstraintValid(const asn1SccStd_msgs_Int64MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT64MULTIARRAY		4379  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT64MULTIARRAY_LAYOUT_2		4357  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT64MULTIARRAY_DATA_VALUE		4373  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT64MULTIARRAY_DATA_VALUE_ELM_2		4368  /**/
#define asn1SccStd_msgs_Int64MultiArray_REQUIRED_BYTES_FOR_ENCODING       4611 
#define asn1SccStd_msgs_Int64MultiArray_REQUIRED_BITS_FOR_ENCODING        36884

flag asn1SccStd_msgs_Int64MultiArray_Encode(const asn1SccStd_msgs_Int64MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT64MULTIARRAY		4380  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT64MULTIARRAY_LAYOUT_2		4358  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT64MULTIARRAY_DATA_VALUE		4374  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT64MULTIARRAY_DATA_VALUE_ELM_2		4369  /**/
flag asn1SccStd_msgs_Int64MultiArray_Decode(asn1SccStd_msgs_Int64MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Int8 arr[60];
} asn1SccStd_msgs_Int8MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_Int8MultiArray_data_value data_value;
} asn1SccStd_msgs_Int8MultiArray;

flag asn1SccStd_msgs_Int8MultiArray_data_value_Equal(const asn1SccStd_msgs_Int8MultiArray_data_value* pVal1, const asn1SccStd_msgs_Int8MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_Int8MultiArray_Equal(const asn1SccStd_msgs_Int8MultiArray* pVal1, const asn1SccStd_msgs_Int8MultiArray* pVal2);

void asn1SccStd_msgs_Int8MultiArray_data_value_Initialize(asn1SccStd_msgs_Int8MultiArray_data_value* pVal);
void asn1SccStd_msgs_Int8MultiArray_Initialize(asn1SccStd_msgs_Int8MultiArray* pVal);

#define ERR_STD_MSGS_INT8MULTIARRAY_LAYOUT_DIM_ELM_LABEL		4396  /**/
#define ERR_STD_MSGS_INT8MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		4407  /**/
#define ERR_STD_MSGS_INT8MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		4418  /**/
#define ERR_STD_MSGS_INT8MULTIARRAY_LAYOUT_DIM		4439  /**/
#define ERR_STD_MSGS_INT8MULTIARRAY_LAYOUT_DATA_OFFSET		4446  /**/
#define ERR_STD_MSGS_INT8MULTIARRAY_DATA_VALUE_ELM		4467  /**/
#define ERR_STD_MSGS_INT8MULTIARRAY_DATA_VALUE		4478  /**/
flag asn1SccStd_msgs_Int8MultiArray_IsConstraintValid(const asn1SccStd_msgs_Int8MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT8MULTIARRAY		4485  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT8MULTIARRAY_LAYOUT_2		4463  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT8MULTIARRAY_DATA_VALUE		4479  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT8MULTIARRAY_DATA_VALUE_ELM_2		4474  /**/
#define asn1SccStd_msgs_Int8MultiArray_REQUIRED_BYTES_FOR_ENCODING       4191 
#define asn1SccStd_msgs_Int8MultiArray_REQUIRED_BITS_FOR_ENCODING        33524

flag asn1SccStd_msgs_Int8MultiArray_Encode(const asn1SccStd_msgs_Int8MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT8MULTIARRAY		4486  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT8MULTIARRAY_LAYOUT_2		4464  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT8MULTIARRAY_DATA_VALUE		4480  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT8MULTIARRAY_DATA_VALUE_ELM_2		4475  /**/
flag asn1SccStd_msgs_Int8MultiArray_Decode(asn1SccStd_msgs_Int8MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_UInt16 arr[60];
} asn1SccStd_msgs_UInt16MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_UInt16MultiArray_data_value data_value;
} asn1SccStd_msgs_UInt16MultiArray;

flag asn1SccStd_msgs_UInt16MultiArray_data_value_Equal(const asn1SccStd_msgs_UInt16MultiArray_data_value* pVal1, const asn1SccStd_msgs_UInt16MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_UInt16MultiArray_Equal(const asn1SccStd_msgs_UInt16MultiArray* pVal1, const asn1SccStd_msgs_UInt16MultiArray* pVal2);

void asn1SccStd_msgs_UInt16MultiArray_data_value_Initialize(asn1SccStd_msgs_UInt16MultiArray_data_value* pVal);
void asn1SccStd_msgs_UInt16MultiArray_Initialize(asn1SccStd_msgs_UInt16MultiArray* pVal);

#define ERR_STD_MSGS_UINT16MULTIARRAY_LAYOUT_DIM_ELM_LABEL		4651  /**/
#define ERR_STD_MSGS_UINT16MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		4662  /**/
#define ERR_STD_MSGS_UINT16MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		4673  /**/
#define ERR_STD_MSGS_UINT16MULTIARRAY_LAYOUT_DIM		4694  /**/
#define ERR_STD_MSGS_UINT16MULTIARRAY_LAYOUT_DATA_OFFSET		4701  /**/
#define ERR_STD_MSGS_UINT16MULTIARRAY_DATA_VALUE_ELM		4722  /**/
#define ERR_STD_MSGS_UINT16MULTIARRAY_DATA_VALUE		4733  /**/
flag asn1SccStd_msgs_UInt16MultiArray_IsConstraintValid(const asn1SccStd_msgs_UInt16MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT16MULTIARRAY		4740  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT16MULTIARRAY_LAYOUT_2		4718  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT16MULTIARRAY_DATA_VALUE		4734  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT16MULTIARRAY_DATA_VALUE_ELM_2		4729  /**/
#define asn1SccStd_msgs_UInt16MultiArray_REQUIRED_BYTES_FOR_ENCODING       4251 
#define asn1SccStd_msgs_UInt16MultiArray_REQUIRED_BITS_FOR_ENCODING        34004

flag asn1SccStd_msgs_UInt16MultiArray_Encode(const asn1SccStd_msgs_UInt16MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT16MULTIARRAY		4741  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT16MULTIARRAY_LAYOUT_2		4719  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT16MULTIARRAY_DATA_VALUE		4735  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT16MULTIARRAY_DATA_VALUE_ELM_2		4730  /**/
flag asn1SccStd_msgs_UInt16MultiArray_Decode(asn1SccStd_msgs_UInt16MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_UInt32 arr[60];
} asn1SccStd_msgs_UInt32MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_UInt32MultiArray_data_value data_value;
} asn1SccStd_msgs_UInt32MultiArray;

flag asn1SccStd_msgs_UInt32MultiArray_data_value_Equal(const asn1SccStd_msgs_UInt32MultiArray_data_value* pVal1, const asn1SccStd_msgs_UInt32MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_UInt32MultiArray_Equal(const asn1SccStd_msgs_UInt32MultiArray* pVal1, const asn1SccStd_msgs_UInt32MultiArray* pVal2);

void asn1SccStd_msgs_UInt32MultiArray_data_value_Initialize(asn1SccStd_msgs_UInt32MultiArray_data_value* pVal);
void asn1SccStd_msgs_UInt32MultiArray_Initialize(asn1SccStd_msgs_UInt32MultiArray* pVal);

#define ERR_STD_MSGS_UINT32MULTIARRAY_LAYOUT_DIM_ELM_LABEL		4757  /**/
#define ERR_STD_MSGS_UINT32MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		4768  /**/
#define ERR_STD_MSGS_UINT32MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		4779  /**/
#define ERR_STD_MSGS_UINT32MULTIARRAY_LAYOUT_DIM		4800  /**/
#define ERR_STD_MSGS_UINT32MULTIARRAY_LAYOUT_DATA_OFFSET		4807  /**/
#define ERR_STD_MSGS_UINT32MULTIARRAY_DATA_VALUE_ELM		4828  /**/
#define ERR_STD_MSGS_UINT32MULTIARRAY_DATA_VALUE		4839  /**/
flag asn1SccStd_msgs_UInt32MultiArray_IsConstraintValid(const asn1SccStd_msgs_UInt32MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT32MULTIARRAY		4846  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT32MULTIARRAY_LAYOUT_2		4824  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT32MULTIARRAY_DATA_VALUE		4840  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT32MULTIARRAY_DATA_VALUE_ELM_2		4835  /**/
#define asn1SccStd_msgs_UInt32MultiArray_REQUIRED_BYTES_FOR_ENCODING       4371 
#define asn1SccStd_msgs_UInt32MultiArray_REQUIRED_BITS_FOR_ENCODING        34964

flag asn1SccStd_msgs_UInt32MultiArray_Encode(const asn1SccStd_msgs_UInt32MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT32MULTIARRAY		4847  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT32MULTIARRAY_LAYOUT_2		4825  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT32MULTIARRAY_DATA_VALUE		4841  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT32MULTIARRAY_DATA_VALUE_ELM_2		4836  /**/
flag asn1SccStd_msgs_UInt32MultiArray_Decode(asn1SccStd_msgs_UInt32MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_UInt64 arr[60];
} asn1SccStd_msgs_UInt64MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_UInt64MultiArray_data_value data_value;
} asn1SccStd_msgs_UInt64MultiArray;

flag asn1SccStd_msgs_UInt64MultiArray_data_value_Equal(const asn1SccStd_msgs_UInt64MultiArray_data_value* pVal1, const asn1SccStd_msgs_UInt64MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_UInt64MultiArray_Equal(const asn1SccStd_msgs_UInt64MultiArray* pVal1, const asn1SccStd_msgs_UInt64MultiArray* pVal2);

void asn1SccStd_msgs_UInt64MultiArray_data_value_Initialize(asn1SccStd_msgs_UInt64MultiArray_data_value* pVal);
void asn1SccStd_msgs_UInt64MultiArray_Initialize(asn1SccStd_msgs_UInt64MultiArray* pVal);

#define ERR_STD_MSGS_UINT64MULTIARRAY_LAYOUT_DIM_ELM_LABEL		4863  /**/
#define ERR_STD_MSGS_UINT64MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		4874  /**/
#define ERR_STD_MSGS_UINT64MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		4885  /**/
#define ERR_STD_MSGS_UINT64MULTIARRAY_LAYOUT_DIM		4906  /**/
#define ERR_STD_MSGS_UINT64MULTIARRAY_LAYOUT_DATA_OFFSET		4913  /**/
#define ERR_STD_MSGS_UINT64MULTIARRAY_DATA_VALUE_ELM		4934  /**/
#define ERR_STD_MSGS_UINT64MULTIARRAY_DATA_VALUE		4945  /**/
flag asn1SccStd_msgs_UInt64MultiArray_IsConstraintValid(const asn1SccStd_msgs_UInt64MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT64MULTIARRAY		4952  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT64MULTIARRAY_LAYOUT_2		4930  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT64MULTIARRAY_DATA_VALUE		4946  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT64MULTIARRAY_DATA_VALUE_ELM_2		4941  /**/
#define asn1SccStd_msgs_UInt64MultiArray_REQUIRED_BYTES_FOR_ENCODING       4603 
#define asn1SccStd_msgs_UInt64MultiArray_REQUIRED_BITS_FOR_ENCODING        36824

flag asn1SccStd_msgs_UInt64MultiArray_Encode(const asn1SccStd_msgs_UInt64MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT64MULTIARRAY		4953  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT64MULTIARRAY_LAYOUT_2		4931  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT64MULTIARRAY_DATA_VALUE		4947  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT64MULTIARRAY_DATA_VALUE_ELM_2		4942  /**/
flag asn1SccStd_msgs_UInt64MultiArray_Decode(asn1SccStd_msgs_UInt64MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    int nCount; 
    
    byte arr[60];
} asn1SccStd_msgs_UInt8MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_UInt8MultiArray_data_value data_value;
} asn1SccStd_msgs_UInt8MultiArray;

flag asn1SccStd_msgs_UInt8MultiArray_data_value_Equal(const asn1SccStd_msgs_UInt8MultiArray_data_value* pVal1, const asn1SccStd_msgs_UInt8MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_UInt8MultiArray_Equal(const asn1SccStd_msgs_UInt8MultiArray* pVal1, const asn1SccStd_msgs_UInt8MultiArray* pVal2);

void asn1SccStd_msgs_UInt8MultiArray_data_value_Initialize(asn1SccStd_msgs_UInt8MultiArray_data_value* pVal);
void asn1SccStd_msgs_UInt8MultiArray_Initialize(asn1SccStd_msgs_UInt8MultiArray* pVal);

#define ERR_STD_MSGS_UINT8MULTIARRAY_LAYOUT_DIM_ELM_LABEL		4969  /**/
#define ERR_STD_MSGS_UINT8MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		4980  /**/
#define ERR_STD_MSGS_UINT8MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		4991  /**/
#define ERR_STD_MSGS_UINT8MULTIARRAY_LAYOUT_DIM		5012  /**/
#define ERR_STD_MSGS_UINT8MULTIARRAY_LAYOUT_DATA_OFFSET		5019  /**/
#define ERR_STD_MSGS_UINT8MULTIARRAY_DATA_VALUE		5040  /**/
flag asn1SccStd_msgs_UInt8MultiArray_IsConstraintValid(const asn1SccStd_msgs_UInt8MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT8MULTIARRAY		5047  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT8MULTIARRAY_LAYOUT_2		5036  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT8MULTIARRAY_DATA_VALUE		5041  /**/
#define asn1SccStd_msgs_UInt8MultiArray_REQUIRED_BYTES_FOR_ENCODING       4191 
#define asn1SccStd_msgs_UInt8MultiArray_REQUIRED_BITS_FOR_ENCODING        33524

flag asn1SccStd_msgs_UInt8MultiArray_Encode(const asn1SccStd_msgs_UInt8MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT8MULTIARRAY		5048  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT8MULTIARRAY_LAYOUT_2		5037  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT8MULTIARRAY_DATA_VALUE		5042  /**/
flag asn1SccStd_msgs_UInt8MultiArray_Decode(asn1SccStd_msgs_UInt8MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_String asn1SccStd_msgs_String;


flag asn1SccStd_msgs_String_Equal(const asn1SccStd_msgs_String* pVal1, const asn1SccStd_msgs_String* pVal2);

void asn1SccStd_msgs_String_Initialize(asn1SccStd_msgs_String* pVal);

#define ERR_STD_MSGS_STRING		4597  /**/
flag asn1SccStd_msgs_String_IsConstraintValid(const asn1SccStd_msgs_String* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_STRING_2		4604  /**/
#define asn1SccStd_msgs_String_REQUIRED_BYTES_FOR_ENCODING       61 
#define asn1SccStd_msgs_String_REQUIRED_BITS_FOR_ENCODING        486

flag asn1SccStd_msgs_String_Encode(const asn1SccStd_msgs_String* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_STRING_2		4605  /**/
flag asn1SccStd_msgs_String_Decode(asn1SccStd_msgs_String* pVal, BitStream* pBitStrm, int* pErrCode);

extern const asn1SccT_UInt32 numT_String;
extern const asn1SccT_UInt32 max_Geometry_msgs_PoseArray;
extern const asn1SccT_UInt32 max_Geometry_msgs_Polygon;
extern const asn1SccT_UInt32 max_Std_msgs_UInt8MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_Int16MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_Int32MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_Float32MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_UInt16MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_ByteMultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_MultiArrayLayout;
extern const asn1SccT_UInt32 max_Std_msgs_Float64MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_Int8MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_UInt64MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_Int64MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_UInt32MultiArray;
extern const asn1SccT_UInt32 max_Sensor_msgs_CameraInfo;
extern const asn1SccT_UInt32 max_Sensor_msgs_Joy;
extern const asn1SccT_UInt32 max_Sensor_msgs_Image;
extern const asn1SccT_UInt32 max_Sensor_msgs_LaserScan;
extern const asn1SccT_UInt32 max_Sensor_msgs_MultiEchoLaserScan;
extern const asn1SccT_UInt32 max_Sensor_msgs_JointState;
extern const asn1SccT_UInt32 max_Sensor_msgs_JoyFeedbackArray;
extern const asn1SccT_UInt32 max_Sensor_msgs_BatteryState;
extern const asn1SccT_UInt32 max_Sensor_msgs_LaserEcho;
extern const asn1SccT_UInt32 max_Sensor_msgs_ChannelFloat32;
extern const asn1SccT_UInt32 max_Sensor_msgs_CompressedImage;
extern const asn1SccT_UInt32 max_Sensor_msgs_PointCloud;
extern const asn1SccT_UInt32 max_Sensor_msgs_PointCloud2;
extern const asn1SccT_UInt32 max_Sensor_msgs_MultiDOFJointState; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif