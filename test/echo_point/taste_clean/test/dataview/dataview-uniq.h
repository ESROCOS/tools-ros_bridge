#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {
} asn1SccStd_msgs_Empty;

flag asn1SccStd_msgs_Empty_Equal(const asn1SccStd_msgs_Empty* pVal1, const asn1SccStd_msgs_Empty* pVal2);

void asn1SccStd_msgs_Empty_Initialize(asn1SccStd_msgs_Empty* pVal);

#define asn1SccStd_msgs_Empty_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccStd_msgs_Empty_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccStd_msgs_Empty_Encode(const asn1SccStd_msgs_Empty* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccStd_msgs_Empty_Decode(asn1SccStd_msgs_Empty* pVal, BitStream* pBitStrm, int* pErrCode);
typedef double asn1SccT_Double;


flag asn1SccT_Double_Equal(const asn1SccT_Double* pVal1, const asn1SccT_Double* pVal2);

void asn1SccT_Double_Initialize(asn1SccT_Double* pVal);

#define ERR_T_DOUBLE		1464  /**/
flag asn1SccT_Double_IsConstraintValid(const asn1SccT_Double* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_DOUBLE		1465  /**/
#define asn1SccT_Double_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Double_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccT_Double_Encode(const asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_DOUBLE		1466  /**/
flag asn1SccT_Double_Decode(asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Double asn1SccStd_msgs_Float64;


flag asn1SccStd_msgs_Float64_Equal(const asn1SccStd_msgs_Float64* pVal1, const asn1SccStd_msgs_Float64* pVal2);

void asn1SccStd_msgs_Float64_Initialize(asn1SccStd_msgs_Float64* pVal);

#define ERR_STD_MSGS_FLOAT64		312  /**/
flag asn1SccStd_msgs_Float64_IsConstraintValid(const asn1SccStd_msgs_Float64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_FLOAT64_2		319  /**/
#define asn1SccStd_msgs_Float64_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccStd_msgs_Float64_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccStd_msgs_Float64_Encode(const asn1SccStd_msgs_Float64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_FLOAT64_2		320  /**/
flag asn1SccStd_msgs_Float64_Decode(asn1SccStd_msgs_Float64* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double x;
    asn1SccT_Double y;
    asn1SccT_Double z;
} asn1SccGeometry_msgs_Point;

flag asn1SccGeometry_msgs_Point_Equal(const asn1SccGeometry_msgs_Point* pVal1, const asn1SccGeometry_msgs_Point* pVal2);

void asn1SccGeometry_msgs_Point_Initialize(asn1SccGeometry_msgs_Point* pVal);

#define ERR_GEOMETRY_MSGS_POINT_X		2437  /**/
#define ERR_GEOMETRY_MSGS_POINT_Y		2448  /**/
#define ERR_GEOMETRY_MSGS_POINT_Z		2459  /**/
flag asn1SccGeometry_msgs_Point_IsConstraintValid(const asn1SccGeometry_msgs_Point* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT		2470  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT_X_2		2444  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT_Y_2		2455  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT_Z_2		2466  /**/
#define asn1SccGeometry_msgs_Point_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccGeometry_msgs_Point_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccGeometry_msgs_Point_Encode(const asn1SccGeometry_msgs_Point* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT		2471  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT_X_2		2445  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT_Y_2		2456  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT_Z_2		2467  /**/
flag asn1SccGeometry_msgs_Point_Decode(asn1SccGeometry_msgs_Point* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double x;
    asn1SccT_Double y;
    asn1SccT_Double theta;
} asn1SccGeometry_msgs_Pose2D;

flag asn1SccGeometry_msgs_Pose2D_Equal(const asn1SccGeometry_msgs_Pose2D* pVal1, const asn1SccGeometry_msgs_Pose2D* pVal2);

void asn1SccGeometry_msgs_Pose2D_Initialize(asn1SccGeometry_msgs_Pose2D* pVal);

#define ERR_GEOMETRY_MSGS_POSE2D_X		2905  /**/
#define ERR_GEOMETRY_MSGS_POSE2D_Y		2916  /**/
#define ERR_GEOMETRY_MSGS_POSE2D_THETA		2927  /**/
flag asn1SccGeometry_msgs_Pose2D_IsConstraintValid(const asn1SccGeometry_msgs_Pose2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSE2D		2938  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSE2D_X_2		2912  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSE2D_Y_2		2923  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSE2D_THETA_2		2934  /**/
#define asn1SccGeometry_msgs_Pose2D_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccGeometry_msgs_Pose2D_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccGeometry_msgs_Pose2D_Encode(const asn1SccGeometry_msgs_Pose2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSE2D		2939  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSE2D_X_2		2913  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSE2D_Y_2		2924  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSE2D_THETA_2		2935  /**/
flag asn1SccGeometry_msgs_Pose2D_Decode(asn1SccGeometry_msgs_Pose2D* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double x;
    asn1SccT_Double y;
    asn1SccT_Double z;
    asn1SccT_Double w;
} asn1SccGeometry_msgs_Quaternion;

flag asn1SccGeometry_msgs_Quaternion_Equal(const asn1SccGeometry_msgs_Quaternion* pVal1, const asn1SccGeometry_msgs_Quaternion* pVal2);

void asn1SccGeometry_msgs_Quaternion_Initialize(asn1SccGeometry_msgs_Quaternion* pVal);

#define ERR_GEOMETRY_MSGS_QUATERNION_X		3639  /**/
#define ERR_GEOMETRY_MSGS_QUATERNION_Y		3650  /**/
#define ERR_GEOMETRY_MSGS_QUATERNION_Z		3661  /**/
#define ERR_GEOMETRY_MSGS_QUATERNION_W		3672  /**/
flag asn1SccGeometry_msgs_Quaternion_IsConstraintValid(const asn1SccGeometry_msgs_Quaternion* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNION		3683  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNION_X_2		3646  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNION_Y_2		3657  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNION_Z_2		3668  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNION_W_2		3679  /**/
#define asn1SccGeometry_msgs_Quaternion_REQUIRED_BYTES_FOR_ENCODING       52 
#define asn1SccGeometry_msgs_Quaternion_REQUIRED_BITS_FOR_ENCODING        416

flag asn1SccGeometry_msgs_Quaternion_Encode(const asn1SccGeometry_msgs_Quaternion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNION		3684  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNION_X_2		3647  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNION_Y_2		3658  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNION_Z_2		3669  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNION_W_2		3680  /**/
flag asn1SccGeometry_msgs_Quaternion_Decode(asn1SccGeometry_msgs_Quaternion* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccGeometry_msgs_Point position;
    asn1SccGeometry_msgs_Quaternion orientation;
} asn1SccGeometry_msgs_Pose;

flag asn1SccGeometry_msgs_Pose_Equal(const asn1SccGeometry_msgs_Pose* pVal1, const asn1SccGeometry_msgs_Pose* pVal2);

void asn1SccGeometry_msgs_Pose_Initialize(asn1SccGeometry_msgs_Pose* pVal);

#define ERR_GEOMETRY_MSGS_POSE_POSITION_X		2802  /**/
#define ERR_GEOMETRY_MSGS_POSE_POSITION_Y		2813  /**/
#define ERR_GEOMETRY_MSGS_POSE_POSITION_Z		2824  /**/
#define ERR_GEOMETRY_MSGS_POSE_ORIENTATION_X		2845  /**/
#define ERR_GEOMETRY_MSGS_POSE_ORIENTATION_Y		2856  /**/
#define ERR_GEOMETRY_MSGS_POSE_ORIENTATION_Z		2867  /**/
#define ERR_GEOMETRY_MSGS_POSE_ORIENTATION_W		2878  /**/
flag asn1SccGeometry_msgs_Pose_IsConstraintValid(const asn1SccGeometry_msgs_Pose* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSE		2899  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSE_POSITION_2		2841  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSE_ORIENTATION_2		2895  /**/
#define asn1SccGeometry_msgs_Pose_REQUIRED_BYTES_FOR_ENCODING       91 
#define asn1SccGeometry_msgs_Pose_REQUIRED_BITS_FOR_ENCODING        728

flag asn1SccGeometry_msgs_Pose_Encode(const asn1SccGeometry_msgs_Pose* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSE		2900  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSE_POSITION_2		2842  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSE_ORIENTATION_2		2896  /**/
flag asn1SccGeometry_msgs_Pose_Decode(asn1SccGeometry_msgs_Pose* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    
    asn1SccT_Double arr[36];
} asn1SccGeometry_msgs_PoseWithCovariance_covariance;

typedef struct {
    asn1SccGeometry_msgs_Pose pose;
    asn1SccGeometry_msgs_PoseWithCovariance_covariance covariance;
} asn1SccGeometry_msgs_PoseWithCovariance;

flag asn1SccGeometry_msgs_PoseWithCovariance_covariance_Equal(const asn1SccGeometry_msgs_PoseWithCovariance_covariance* pVal1, const asn1SccGeometry_msgs_PoseWithCovariance_covariance* pVal2);

flag asn1SccGeometry_msgs_PoseWithCovariance_Equal(const asn1SccGeometry_msgs_PoseWithCovariance* pVal1, const asn1SccGeometry_msgs_PoseWithCovariance* pVal2);

void asn1SccGeometry_msgs_PoseWithCovariance_covariance_Initialize(asn1SccGeometry_msgs_PoseWithCovariance_covariance* pVal);
void asn1SccGeometry_msgs_PoseWithCovariance_Initialize(asn1SccGeometry_msgs_PoseWithCovariance* pVal);

#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_POSITION_X		3305  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_POSITION_Y		3316  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_POSITION_Z		3327  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_ORIENTATION_X		3348  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_ORIENTATION_Y		3359  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_ORIENTATION_Z		3370  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_ORIENTATION_W		3381  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCE_COVARIANCE_ELM		3412  /**/
flag asn1SccGeometry_msgs_PoseWithCovariance_IsConstraintValid(const asn1SccGeometry_msgs_PoseWithCovariance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE		3429  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_2		3408  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE_COVARIANCE		3423  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE_COVARIANCE_ELM_2		3419  /**/
#define asn1SccGeometry_msgs_PoseWithCovariance_REQUIRED_BYTES_FOR_ENCODING       559 
#define asn1SccGeometry_msgs_PoseWithCovariance_REQUIRED_BITS_FOR_ENCODING        4472

flag asn1SccGeometry_msgs_PoseWithCovariance_Encode(const asn1SccGeometry_msgs_PoseWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE		3430  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE_POSE_2		3409  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE_COVARIANCE		3424  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEWITHCOVARIANCE_COVARIANCE_ELM_2		3420  /**/
flag asn1SccGeometry_msgs_PoseWithCovariance_Decode(asn1SccGeometry_msgs_PoseWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double x;
    asn1SccT_Double y;
    asn1SccT_Double z;
} asn1SccGeometry_msgs_Vector3;

flag asn1SccGeometry_msgs_Vector3_Equal(const asn1SccGeometry_msgs_Vector3* pVal1, const asn1SccGeometry_msgs_Vector3* pVal2);

void asn1SccGeometry_msgs_Vector3_Initialize(asn1SccGeometry_msgs_Vector3* pVal);

#define ERR_GEOMETRY_MSGS_VECTOR3_X		4674  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3_Y		4685  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3_Z		4696  /**/
flag asn1SccGeometry_msgs_Vector3_IsConstraintValid(const asn1SccGeometry_msgs_Vector3* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_VECTOR3		4707  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_VECTOR3_X_2		4681  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_VECTOR3_Y_2		4692  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_VECTOR3_Z_2		4703  /**/
#define asn1SccGeometry_msgs_Vector3_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccGeometry_msgs_Vector3_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccGeometry_msgs_Vector3_Encode(const asn1SccGeometry_msgs_Vector3* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_VECTOR3		4708  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_VECTOR3_X_2		4682  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_VECTOR3_Y_2		4693  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_VECTOR3_Z_2		4704  /**/
flag asn1SccGeometry_msgs_Vector3_Decode(asn1SccGeometry_msgs_Vector3* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccGeometry_msgs_Vector3 linear;
    asn1SccGeometry_msgs_Vector3 angular;
} asn1SccGeometry_msgs_Accel;

flag asn1SccGeometry_msgs_Accel_Equal(const asn1SccGeometry_msgs_Accel* pVal1, const asn1SccGeometry_msgs_Accel* pVal2);

void asn1SccGeometry_msgs_Accel_Initialize(asn1SccGeometry_msgs_Accel* pVal);

#define ERR_GEOMETRY_MSGS_ACCEL_LINEAR_X		1541  /**/
#define ERR_GEOMETRY_MSGS_ACCEL_LINEAR_Y		1552  /**/
#define ERR_GEOMETRY_MSGS_ACCEL_LINEAR_Z		1563  /**/
#define ERR_GEOMETRY_MSGS_ACCEL_ANGULAR_X		1584  /**/
#define ERR_GEOMETRY_MSGS_ACCEL_ANGULAR_Y		1595  /**/
#define ERR_GEOMETRY_MSGS_ACCEL_ANGULAR_Z		1606  /**/
flag asn1SccGeometry_msgs_Accel_IsConstraintValid(const asn1SccGeometry_msgs_Accel* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCEL		1627  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCEL_LINEAR_2		1580  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCEL_ANGULAR_2		1623  /**/
#define asn1SccGeometry_msgs_Accel_REQUIRED_BYTES_FOR_ENCODING       78 
#define asn1SccGeometry_msgs_Accel_REQUIRED_BITS_FOR_ENCODING        624

flag asn1SccGeometry_msgs_Accel_Encode(const asn1SccGeometry_msgs_Accel* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCEL		1628  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCEL_LINEAR_2		1581  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCEL_ANGULAR_2		1624  /**/
flag asn1SccGeometry_msgs_Accel_Decode(asn1SccGeometry_msgs_Accel* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    
    asn1SccT_Double arr[36];
} asn1SccGeometry_msgs_AccelWithCovariance_covariance;

typedef struct {
    asn1SccGeometry_msgs_Accel accel;
    asn1SccGeometry_msgs_AccelWithCovariance_covariance covariance;
} asn1SccGeometry_msgs_AccelWithCovariance;

flag asn1SccGeometry_msgs_AccelWithCovariance_covariance_Equal(const asn1SccGeometry_msgs_AccelWithCovariance_covariance* pVal1, const asn1SccGeometry_msgs_AccelWithCovariance_covariance* pVal2);

flag asn1SccGeometry_msgs_AccelWithCovariance_Equal(const asn1SccGeometry_msgs_AccelWithCovariance* pVal1, const asn1SccGeometry_msgs_AccelWithCovariance* pVal2);

void asn1SccGeometry_msgs_AccelWithCovariance_covariance_Initialize(asn1SccGeometry_msgs_AccelWithCovariance_covariance* pVal);
void asn1SccGeometry_msgs_AccelWithCovariance_Initialize(asn1SccGeometry_msgs_AccelWithCovariance* pVal);

#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_LINEAR_X		1799  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_LINEAR_Y		1810  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_LINEAR_Z		1821  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_ANGULAR_X		1842  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_ANGULAR_Y		1853  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_ANGULAR_Z		1864  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_COVARIANCE_ELM		1895  /**/
flag asn1SccGeometry_msgs_AccelWithCovariance_IsConstraintValid(const asn1SccGeometry_msgs_AccelWithCovariance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE		1912  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_2		1891  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_COVARIANCE		1906  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_COVARIANCE_ELM_2		1902  /**/
#define asn1SccGeometry_msgs_AccelWithCovariance_REQUIRED_BYTES_FOR_ENCODING       546 
#define asn1SccGeometry_msgs_AccelWithCovariance_REQUIRED_BITS_FOR_ENCODING        4368

flag asn1SccGeometry_msgs_AccelWithCovariance_Encode(const asn1SccGeometry_msgs_AccelWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE		1913  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_ACCEL_2		1892  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_COVARIANCE		1907  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCE_COVARIANCE_ELM_2		1903  /**/
flag asn1SccGeometry_msgs_AccelWithCovariance_Decode(asn1SccGeometry_msgs_AccelWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Double m;
    asn1SccGeometry_msgs_Vector3 com;
    asn1SccT_Double ixx;
    asn1SccT_Double ixy;
    asn1SccT_Double ixz;
    asn1SccT_Double iyy;
    asn1SccT_Double iyz;
    asn1SccT_Double izz;
} asn1SccGeometry_msgs_Inertia;

flag asn1SccGeometry_msgs_Inertia_Equal(const asn1SccGeometry_msgs_Inertia* pVal1, const asn1SccGeometry_msgs_Inertia* pVal2);

void asn1SccGeometry_msgs_Inertia_Initialize(asn1SccGeometry_msgs_Inertia* pVal);

#define ERR_GEOMETRY_MSGS_INERTIA_M		2111  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_COM_X		2122  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_COM_Y		2133  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_COM_Z		2144  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_IXX		2165  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_IXY		2176  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_IXZ		2187  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_IYY		2198  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_IYZ		2209  /**/
#define ERR_GEOMETRY_MSGS_INERTIA_IZZ		2220  /**/
flag asn1SccGeometry_msgs_Inertia_IsConstraintValid(const asn1SccGeometry_msgs_Inertia* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA		2231  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_M_2		2118  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_COM_2		2161  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_IXX_2		2172  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_IXY_2		2183  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_IXZ_2		2194  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_IYY_2		2205  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_IYZ_2		2216  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIA_IZZ_2		2227  /**/
#define asn1SccGeometry_msgs_Inertia_REQUIRED_BYTES_FOR_ENCODING       130 
#define asn1SccGeometry_msgs_Inertia_REQUIRED_BITS_FOR_ENCODING        1040

flag asn1SccGeometry_msgs_Inertia_Encode(const asn1SccGeometry_msgs_Inertia* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA		2232  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_M_2		2119  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_COM_2		2162  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_IXX_2		2173  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_IXY_2		2184  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_IXZ_2		2195  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_IYY_2		2206  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_IYZ_2		2217  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIA_IZZ_2		2228  /**/
flag asn1SccGeometry_msgs_Inertia_Decode(asn1SccGeometry_msgs_Inertia* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccGeometry_msgs_Vector3 translation;
    asn1SccGeometry_msgs_Quaternion rotation;
} asn1SccGeometry_msgs_Transform;

flag asn1SccGeometry_msgs_Transform_Equal(const asn1SccGeometry_msgs_Transform* pVal1, const asn1SccGeometry_msgs_Transform* pVal2);

void asn1SccGeometry_msgs_Transform_Initialize(asn1SccGeometry_msgs_Transform* pVal);

#define ERR_GEOMETRY_MSGS_TRANSFORM_TRANSLATION_X		3813  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORM_TRANSLATION_Y		3824  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORM_TRANSLATION_Z		3835  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORM_ROTATION_X		3856  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORM_ROTATION_Y		3867  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORM_ROTATION_Z		3878  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORM_ROTATION_W		3889  /**/
flag asn1SccGeometry_msgs_Transform_IsConstraintValid(const asn1SccGeometry_msgs_Transform* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TRANSFORM		3910  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TRANSFORM_TRANSLATION_2		3852  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TRANSFORM_ROTATION_2		3906  /**/
#define asn1SccGeometry_msgs_Transform_REQUIRED_BYTES_FOR_ENCODING       91 
#define asn1SccGeometry_msgs_Transform_REQUIRED_BITS_FOR_ENCODING        728

flag asn1SccGeometry_msgs_Transform_Encode(const asn1SccGeometry_msgs_Transform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_TRANSFORM		3911  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TRANSFORM_TRANSLATION_2		3853  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TRANSFORM_ROTATION_2		3907  /**/
flag asn1SccGeometry_msgs_Transform_Decode(asn1SccGeometry_msgs_Transform* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccGeometry_msgs_Vector3 linear;
    asn1SccGeometry_msgs_Vector3 angular;
} asn1SccGeometry_msgs_Twist;

flag asn1SccGeometry_msgs_Twist_Equal(const asn1SccGeometry_msgs_Twist* pVal1, const asn1SccGeometry_msgs_Twist* pVal2);

void asn1SccGeometry_msgs_Twist_Initialize(asn1SccGeometry_msgs_Twist* pVal);

#define ERR_GEOMETRY_MSGS_TWIST_LINEAR_X		4104  /**/
#define ERR_GEOMETRY_MSGS_TWIST_LINEAR_Y		4115  /**/
#define ERR_GEOMETRY_MSGS_TWIST_LINEAR_Z		4126  /**/
#define ERR_GEOMETRY_MSGS_TWIST_ANGULAR_X		4147  /**/
#define ERR_GEOMETRY_MSGS_TWIST_ANGULAR_Y		4158  /**/
#define ERR_GEOMETRY_MSGS_TWIST_ANGULAR_Z		4169  /**/
flag asn1SccGeometry_msgs_Twist_IsConstraintValid(const asn1SccGeometry_msgs_Twist* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWIST		4190  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWIST_LINEAR_2		4143  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWIST_ANGULAR_2		4186  /**/
#define asn1SccGeometry_msgs_Twist_REQUIRED_BYTES_FOR_ENCODING       78 
#define asn1SccGeometry_msgs_Twist_REQUIRED_BITS_FOR_ENCODING        624

flag asn1SccGeometry_msgs_Twist_Encode(const asn1SccGeometry_msgs_Twist* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWIST		4191  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWIST_LINEAR_2		4144  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWIST_ANGULAR_2		4187  /**/
flag asn1SccGeometry_msgs_Twist_Decode(asn1SccGeometry_msgs_Twist* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    
    asn1SccT_Double arr[36];
} asn1SccGeometry_msgs_TwistWithCovariance_covariance;

typedef struct {
    asn1SccGeometry_msgs_Twist twist;
    asn1SccGeometry_msgs_TwistWithCovariance_covariance covariance;
} asn1SccGeometry_msgs_TwistWithCovariance;

flag asn1SccGeometry_msgs_TwistWithCovariance_covariance_Equal(const asn1SccGeometry_msgs_TwistWithCovariance_covariance* pVal1, const asn1SccGeometry_msgs_TwistWithCovariance_covariance* pVal2);

flag asn1SccGeometry_msgs_TwistWithCovariance_Equal(const asn1SccGeometry_msgs_TwistWithCovariance* pVal1, const asn1SccGeometry_msgs_TwistWithCovariance* pVal2);

void asn1SccGeometry_msgs_TwistWithCovariance_covariance_Initialize(asn1SccGeometry_msgs_TwistWithCovariance_covariance* pVal);
void asn1SccGeometry_msgs_TwistWithCovariance_Initialize(asn1SccGeometry_msgs_TwistWithCovariance* pVal);

#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_LINEAR_X		4362  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_LINEAR_Y		4373  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_LINEAR_Z		4384  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_ANGULAR_X		4405  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_ANGULAR_Y		4416  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_ANGULAR_Z		4427  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_COVARIANCE_ELM		4458  /**/
flag asn1SccGeometry_msgs_TwistWithCovariance_IsConstraintValid(const asn1SccGeometry_msgs_TwistWithCovariance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE		4475  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_2		4454  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_COVARIANCE		4469  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_COVARIANCE_ELM_2		4465  /**/
#define asn1SccGeometry_msgs_TwistWithCovariance_REQUIRED_BYTES_FOR_ENCODING       546 
#define asn1SccGeometry_msgs_TwistWithCovariance_REQUIRED_BITS_FOR_ENCODING        4368

flag asn1SccGeometry_msgs_TwistWithCovariance_Encode(const asn1SccGeometry_msgs_TwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE		4476  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_TWIST_2		4455  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_COVARIANCE		4470  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCE_COVARIANCE_ELM_2		4466  /**/
flag asn1SccGeometry_msgs_TwistWithCovariance_Decode(asn1SccGeometry_msgs_TwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccGeometry_msgs_Vector3 force;
    asn1SccGeometry_msgs_Vector3 torque;
} asn1SccGeometry_msgs_Wrench;

flag asn1SccGeometry_msgs_Wrench_Equal(const asn1SccGeometry_msgs_Wrench* pVal1, const asn1SccGeometry_msgs_Wrench* pVal2);

void asn1SccGeometry_msgs_Wrench_Initialize(asn1SccGeometry_msgs_Wrench* pVal);

#define ERR_GEOMETRY_MSGS_WRENCH_FORCE_X		4826  /**/
#define ERR_GEOMETRY_MSGS_WRENCH_FORCE_Y		4837  /**/
#define ERR_GEOMETRY_MSGS_WRENCH_FORCE_Z		4848  /**/
#define ERR_GEOMETRY_MSGS_WRENCH_TORQUE_X		4869  /**/
#define ERR_GEOMETRY_MSGS_WRENCH_TORQUE_Y		4880  /**/
#define ERR_GEOMETRY_MSGS_WRENCH_TORQUE_Z		4891  /**/
flag asn1SccGeometry_msgs_Wrench_IsConstraintValid(const asn1SccGeometry_msgs_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_WRENCH		4912  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_WRENCH_FORCE_2		4865  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_WRENCH_TORQUE_2		4908  /**/
#define asn1SccGeometry_msgs_Wrench_REQUIRED_BYTES_FOR_ENCODING       78 
#define asn1SccGeometry_msgs_Wrench_REQUIRED_BITS_FOR_ENCODING        624

flag asn1SccGeometry_msgs_Wrench_Encode(const asn1SccGeometry_msgs_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_WRENCH		4913  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_WRENCH_FORCE_2		4866  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_WRENCH_TORQUE_2		4909  /**/
flag asn1SccGeometry_msgs_Wrench_Decode(asn1SccGeometry_msgs_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);
typedef double asn1SccT_Float;


flag asn1SccT_Float_Equal(const asn1SccT_Float* pVal1, const asn1SccT_Float* pVal2);

void asn1SccT_Float_Initialize(asn1SccT_Float* pVal);

#define ERR_T_FLOAT		1471  /**/
flag asn1SccT_Float_IsConstraintValid(const asn1SccT_Float* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_FLOAT		1472  /**/
#define asn1SccT_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Float_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccT_Float_Encode(const asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FLOAT		1473  /**/
flag asn1SccT_Float_Decode(asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Float r;
    asn1SccT_Float g;
    asn1SccT_Float b;
    asn1SccT_Float a;
} asn1SccStd_msgs_ColorRGBA;

flag asn1SccStd_msgs_ColorRGBA_Equal(const asn1SccStd_msgs_ColorRGBA* pVal1, const asn1SccStd_msgs_ColorRGBA* pVal2);

void asn1SccStd_msgs_ColorRGBA_Initialize(asn1SccStd_msgs_ColorRGBA* pVal);

#define ERR_STD_MSGS_COLORRGBA_R		118  /**/
#define ERR_STD_MSGS_COLORRGBA_G		129  /**/
#define ERR_STD_MSGS_COLORRGBA_B		140  /**/
#define ERR_STD_MSGS_COLORRGBA_A		151  /**/
flag asn1SccStd_msgs_ColorRGBA_IsConstraintValid(const asn1SccStd_msgs_ColorRGBA* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_COLORRGBA		162  /**/
#define ERR_UPER_ENCODE_STD_MSGS_COLORRGBA_R_2		125  /**/
#define ERR_UPER_ENCODE_STD_MSGS_COLORRGBA_G_2		136  /**/
#define ERR_UPER_ENCODE_STD_MSGS_COLORRGBA_B_2		147  /**/
#define ERR_UPER_ENCODE_STD_MSGS_COLORRGBA_A_2		158  /**/
#define asn1SccStd_msgs_ColorRGBA_REQUIRED_BYTES_FOR_ENCODING       52 
#define asn1SccStd_msgs_ColorRGBA_REQUIRED_BITS_FOR_ENCODING        416

flag asn1SccStd_msgs_ColorRGBA_Encode(const asn1SccStd_msgs_ColorRGBA* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_COLORRGBA		163  /**/
#define ERR_UPER_DECODE_STD_MSGS_COLORRGBA_R_2		126  /**/
#define ERR_UPER_DECODE_STD_MSGS_COLORRGBA_G_2		137  /**/
#define ERR_UPER_DECODE_STD_MSGS_COLORRGBA_B_2		148  /**/
#define ERR_UPER_DECODE_STD_MSGS_COLORRGBA_A_2		159  /**/
flag asn1SccStd_msgs_ColorRGBA_Decode(asn1SccStd_msgs_ColorRGBA* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Float asn1SccStd_msgs_Float32;


flag asn1SccStd_msgs_Float32_Equal(const asn1SccStd_msgs_Float32* pVal1, const asn1SccStd_msgs_Float32* pVal2);

void asn1SccStd_msgs_Float32_Initialize(asn1SccStd_msgs_Float32* pVal);

#define ERR_STD_MSGS_FLOAT32		206  /**/
flag asn1SccStd_msgs_Float32_IsConstraintValid(const asn1SccStd_msgs_Float32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_FLOAT32_2		213  /**/
#define asn1SccStd_msgs_Float32_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccStd_msgs_Float32_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccStd_msgs_Float32_Encode(const asn1SccStd_msgs_Float32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_FLOAT32_2		214  /**/
flag asn1SccStd_msgs_Float32_Decode(asn1SccStd_msgs_Float32* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_Float x;
    asn1SccT_Float y;
    asn1SccT_Float z;
} asn1SccGeometry_msgs_Point32;

flag asn1SccGeometry_msgs_Point32_Equal(const asn1SccGeometry_msgs_Point32* pVal1, const asn1SccGeometry_msgs_Point32* pVal2);

void asn1SccGeometry_msgs_Point32_Initialize(asn1SccGeometry_msgs_Point32* pVal);

#define ERR_GEOMETRY_MSGS_POINT32_X		2476  /**/
#define ERR_GEOMETRY_MSGS_POINT32_Y		2487  /**/
#define ERR_GEOMETRY_MSGS_POINT32_Z		2498  /**/
flag asn1SccGeometry_msgs_Point32_IsConstraintValid(const asn1SccGeometry_msgs_Point32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT32		2509  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT32_X_2		2483  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT32_Y_2		2494  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT32_Z_2		2505  /**/
#define asn1SccGeometry_msgs_Point32_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccGeometry_msgs_Point32_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccGeometry_msgs_Point32_Encode(const asn1SccGeometry_msgs_Point32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT32		2510  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT32_X_2		2484  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT32_Y_2		2495  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT32_Z_2		2506  /**/
flag asn1SccGeometry_msgs_Point32_Decode(asn1SccGeometry_msgs_Point32* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccGeometry_msgs_Point32 arr[60];
} asn1SccGeometry_msgs_Polygon;

flag asn1SccGeometry_msgs_Polygon_Equal(const asn1SccGeometry_msgs_Polygon* pVal1, const asn1SccGeometry_msgs_Polygon* pVal2);

void asn1SccGeometry_msgs_Polygon_Initialize(asn1SccGeometry_msgs_Polygon* pVal);

#define ERR_GEOMETRY_MSGS_POLYGON_ELM_X		2628  /**/
#define ERR_GEOMETRY_MSGS_POLYGON_ELM_Y		2639  /**/
#define ERR_GEOMETRY_MSGS_POLYGON_ELM_Z		2650  /**/
#define ERR_GEOMETRY_MSGS_POLYGON		2671  /**/
flag asn1SccGeometry_msgs_Polygon_IsConstraintValid(const asn1SccGeometry_msgs_Polygon* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POLYGON		2672  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POLYGON_ELM_2		2667  /**/
#define asn1SccGeometry_msgs_Polygon_REQUIRED_BYTES_FOR_ENCODING       2341 
#define asn1SccGeometry_msgs_Polygon_REQUIRED_BITS_FOR_ENCODING        18726

flag asn1SccGeometry_msgs_Polygon_Encode(const asn1SccGeometry_msgs_Polygon* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POLYGON		2673  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POLYGON_ELM_2		2668  /**/
flag asn1SccGeometry_msgs_Polygon_Decode(asn1SccGeometry_msgs_Polygon* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int16;


flag asn1SccT_Int16_Equal(const asn1SccT_Int16* pVal1, const asn1SccT_Int16* pVal2);

void asn1SccT_Int16_Initialize(asn1SccT_Int16* pVal);

#define ERR_T_INT16		1478  /**/
flag asn1SccT_Int16_IsConstraintValid(const asn1SccT_Int16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT16		1479  /**/
#define asn1SccT_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_Int16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccT_Int16_Encode(const asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT16		1480  /**/
flag asn1SccT_Int16_Decode(asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Int16 asn1SccStd_msgs_Int16;


flag asn1SccStd_msgs_Int16_Equal(const asn1SccStd_msgs_Int16* pVal1, const asn1SccStd_msgs_Int16* pVal2);

void asn1SccStd_msgs_Int16_Initialize(asn1SccStd_msgs_Int16* pVal);

#define ERR_STD_MSGS_INT16		478  /**/
flag asn1SccStd_msgs_Int16_IsConstraintValid(const asn1SccStd_msgs_Int16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT16_2		485  /**/
#define asn1SccStd_msgs_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccStd_msgs_Int16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccStd_msgs_Int16_Encode(const asn1SccStd_msgs_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT16_2		486  /**/
flag asn1SccStd_msgs_Int16_Decode(asn1SccStd_msgs_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt16;


flag asn1SccT_UInt16_Equal(const asn1SccT_UInt16* pVal1, const asn1SccT_UInt16* pVal2);

void asn1SccT_UInt16_Initialize(asn1SccT_UInt16* pVal);

#define ERR_T_UINT16		1485  /**/
flag asn1SccT_UInt16_IsConstraintValid(const asn1SccT_UInt16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT16		1486  /**/
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccT_UInt16_Encode(const asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT16		1487  /**/
flag asn1SccT_UInt16_Decode(asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt16 asn1SccStd_msgs_UInt16;


flag asn1SccStd_msgs_UInt16_Equal(const asn1SccStd_msgs_UInt16* pVal1, const asn1SccStd_msgs_UInt16* pVal2);

void asn1SccStd_msgs_UInt16_Initialize(asn1SccStd_msgs_UInt16* pVal);

#define ERR_STD_MSGS_UINT16		1051  /**/
flag asn1SccStd_msgs_UInt16_IsConstraintValid(const asn1SccStd_msgs_UInt16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT16_2		1058  /**/
#define asn1SccStd_msgs_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccStd_msgs_UInt16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccStd_msgs_UInt16_Encode(const asn1SccStd_msgs_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT16_2		1059  /**/
flag asn1SccStd_msgs_UInt16_Decode(asn1SccStd_msgs_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt64;


flag asn1SccT_UInt64_Equal(const asn1SccT_UInt64* pVal1, const asn1SccT_UInt64* pVal2);

void asn1SccT_UInt64_Initialize(asn1SccT_UInt64* pVal);

#define ERR_T_UINT64		1492  /**/
flag asn1SccT_UInt64_IsConstraintValid(const asn1SccT_UInt64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT64		1493  /**/
#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_UInt64_REQUIRED_BITS_FOR_ENCODING        63

flag asn1SccT_UInt64_Encode(const asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT64		1494  /**/
flag asn1SccT_UInt64_Decode(asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt64 asn1SccStd_msgs_UInt64;


flag asn1SccStd_msgs_UInt64_Equal(const asn1SccStd_msgs_UInt64* pVal1, const asn1SccStd_msgs_UInt64* pVal2);

void asn1SccStd_msgs_UInt64_Initialize(asn1SccStd_msgs_UInt64* pVal);

#define ERR_STD_MSGS_UINT64		1263  /**/
flag asn1SccStd_msgs_UInt64_IsConstraintValid(const asn1SccStd_msgs_UInt64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT64_2		1270  /**/
#define asn1SccStd_msgs_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccStd_msgs_UInt64_REQUIRED_BITS_FOR_ENCODING        63

flag asn1SccStd_msgs_UInt64_Encode(const asn1SccStd_msgs_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT64_2		1271  /**/
flag asn1SccStd_msgs_UInt64_Decode(asn1SccStd_msgs_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int64;


flag asn1SccT_Int64_Equal(const asn1SccT_Int64* pVal1, const asn1SccT_Int64* pVal2);

void asn1SccT_Int64_Initialize(asn1SccT_Int64* pVal);

#define ERR_T_INT64		1499  /**/
flag asn1SccT_Int64_IsConstraintValid(const asn1SccT_Int64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT64		1500  /**/
#define asn1SccT_Int64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_Int64_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccT_Int64_Encode(const asn1SccT_Int64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT64		1501  /**/
flag asn1SccT_Int64_Decode(asn1SccT_Int64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Int64 asn1SccStd_msgs_Int64;


flag asn1SccStd_msgs_Int64_Equal(const asn1SccStd_msgs_Int64* pVal1, const asn1SccStd_msgs_Int64* pVal2);

void asn1SccStd_msgs_Int64_Initialize(asn1SccStd_msgs_Int64* pVal);

#define ERR_STD_MSGS_INT64		690  /**/
flag asn1SccStd_msgs_Int64_IsConstraintValid(const asn1SccStd_msgs_Int64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT64_2		697  /**/
#define asn1SccStd_msgs_Int64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccStd_msgs_Int64_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccStd_msgs_Int64_Encode(const asn1SccStd_msgs_Int64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT64_2		698  /**/
flag asn1SccStd_msgs_Int64_Decode(asn1SccStd_msgs_Int64* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    int nCount; 
    
    byte arr[60];
} asn1SccT_String;

flag asn1SccT_String_Equal(const asn1SccT_String* pVal1, const asn1SccT_String* pVal2);

void asn1SccT_String_Initialize(asn1SccT_String* pVal);

#define ERR_T_STRING		1506  /**/
flag asn1SccT_String_IsConstraintValid(const asn1SccT_String* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_STRING		1507  /**/
#define asn1SccT_String_REQUIRED_BYTES_FOR_ENCODING       61 
#define asn1SccT_String_REQUIRED_BITS_FOR_ENCODING        486

flag asn1SccT_String_Encode(const asn1SccT_String* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_STRING		1508  /**/
flag asn1SccT_String_Decode(asn1SccT_String* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_String asn1SccStd_msgs_String;


flag asn1SccStd_msgs_String_Equal(const asn1SccStd_msgs_String* pVal1, const asn1SccStd_msgs_String* pVal2);

void asn1SccStd_msgs_String_Initialize(asn1SccStd_msgs_String* pVal);

#define ERR_STD_MSGS_STRING		1008  /**/
flag asn1SccStd_msgs_String_IsConstraintValid(const asn1SccStd_msgs_String* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_STRING_2		1015  /**/
#define asn1SccStd_msgs_String_REQUIRED_BYTES_FOR_ENCODING       61 
#define asn1SccStd_msgs_String_REQUIRED_BITS_FOR_ENCODING        486

flag asn1SccStd_msgs_String_Encode(const asn1SccStd_msgs_String* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_STRING_2		1016  /**/
flag asn1SccStd_msgs_String_Decode(asn1SccStd_msgs_String* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


flag asn1SccT_Int32_Equal(const asn1SccT_Int32* pVal1, const asn1SccT_Int32* pVal2);

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_T_INT32		5095  /**/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT32		5096  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		5097  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Int32 asn1SccStd_msgs_Int32;


flag asn1SccStd_msgs_Int32_Equal(const asn1SccStd_msgs_Int32* pVal1, const asn1SccStd_msgs_Int32* pVal2);

void asn1SccStd_msgs_Int32_Initialize(asn1SccStd_msgs_Int32* pVal);

#define ERR_STD_MSGS_INT32		584  /**/
flag asn1SccStd_msgs_Int32_IsConstraintValid(const asn1SccStd_msgs_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT32_2		591  /**/
#define asn1SccStd_msgs_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccStd_msgs_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccStd_msgs_Int32_Encode(const asn1SccStd_msgs_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT32_2		592  /**/
flag asn1SccStd_msgs_Int32_Decode(asn1SccStd_msgs_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


flag asn1SccT_UInt32_Equal(const asn1SccT_UInt32* pVal1, const asn1SccT_UInt32* pVal2);

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_T_UINT32		5102  /**/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT32		5103  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		5104  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_String label;
    asn1SccT_UInt32 size_value;
    asn1SccT_UInt32 stride;
} asn1SccStd_msgs_MultiArrayDimension;

flag asn1SccStd_msgs_MultiArrayDimension_Equal(const asn1SccStd_msgs_MultiArrayDimension* pVal1, const asn1SccStd_msgs_MultiArrayDimension* pVal2);

void asn1SccStd_msgs_MultiArrayDimension_Initialize(asn1SccStd_msgs_MultiArrayDimension* pVal);

#define ERR_STD_MSGS_MULTIARRAYDIMENSION_LABEL		902  /**/
#define ERR_STD_MSGS_MULTIARRAYDIMENSION_SIZE_VALUE		913  /**/
#define ERR_STD_MSGS_MULTIARRAYDIMENSION_STRIDE		924  /**/
flag asn1SccStd_msgs_MultiArrayDimension_IsConstraintValid(const asn1SccStd_msgs_MultiArrayDimension* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYDIMENSION		935  /**/
#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYDIMENSION_LABEL_2		909  /**/
#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYDIMENSION_SIZE_VALUE_2		920  /**/
#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYDIMENSION_STRIDE_2		931  /**/
#define asn1SccStd_msgs_MultiArrayDimension_REQUIRED_BYTES_FOR_ENCODING       69 
#define asn1SccStd_msgs_MultiArrayDimension_REQUIRED_BITS_FOR_ENCODING        550

flag asn1SccStd_msgs_MultiArrayDimension_Encode(const asn1SccStd_msgs_MultiArrayDimension* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYDIMENSION		936  /**/
#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYDIMENSION_LABEL_2		910  /**/
#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYDIMENSION_SIZE_VALUE_2		921  /**/
#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYDIMENSION_STRIDE_2		932  /**/
flag asn1SccStd_msgs_MultiArrayDimension_Decode(asn1SccStd_msgs_MultiArrayDimension* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccStd_msgs_MultiArrayDimension arr[60];
} asn1SccStd_msgs_MultiArrayLayout_dim;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout_dim dim;
    asn1SccT_UInt32 data_offset;
} asn1SccStd_msgs_MultiArrayLayout;

flag asn1SccStd_msgs_MultiArrayLayout_dim_Equal(const asn1SccStd_msgs_MultiArrayLayout_dim* pVal1, const asn1SccStd_msgs_MultiArrayLayout_dim* pVal2);

flag asn1SccStd_msgs_MultiArrayLayout_Equal(const asn1SccStd_msgs_MultiArrayLayout* pVal1, const asn1SccStd_msgs_MultiArrayLayout* pVal2);

void asn1SccStd_msgs_MultiArrayLayout_dim_Initialize(asn1SccStd_msgs_MultiArrayLayout_dim* pVal);
void asn1SccStd_msgs_MultiArrayLayout_Initialize(asn1SccStd_msgs_MultiArrayLayout* pVal);

#define ERR_STD_MSGS_MULTIARRAYLAYOUT_DIM_ELM_LABEL		941  /**/
#define ERR_STD_MSGS_MULTIARRAYLAYOUT_DIM_ELM_SIZE_VALUE		952  /**/
#define ERR_STD_MSGS_MULTIARRAYLAYOUT_DIM_ELM_STRIDE		963  /**/
#define ERR_STD_MSGS_MULTIARRAYLAYOUT_DIM		984  /**/
#define ERR_STD_MSGS_MULTIARRAYLAYOUT_DATA_OFFSET		991  /**/
flag asn1SccStd_msgs_MultiArrayLayout_IsConstraintValid(const asn1SccStd_msgs_MultiArrayLayout* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYLAYOUT		1002  /**/
#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYLAYOUT_DIM		985  /**/
#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYLAYOUT_DIM_ELM_2		980  /**/
#define ERR_UPER_ENCODE_STD_MSGS_MULTIARRAYLAYOUT_DATA_OFFSET_2		998  /**/
#define asn1SccStd_msgs_MultiArrayLayout_REQUIRED_BYTES_FOR_ENCODING       4130 
#define asn1SccStd_msgs_MultiArrayLayout_REQUIRED_BITS_FOR_ENCODING        33038

flag asn1SccStd_msgs_MultiArrayLayout_Encode(const asn1SccStd_msgs_MultiArrayLayout* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYLAYOUT		1003  /**/
#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYLAYOUT_DIM		986  /**/
#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYLAYOUT_DIM_ELM_2		981  /**/
#define ERR_UPER_DECODE_STD_MSGS_MULTIARRAYLAYOUT_DATA_OFFSET_2		999  /**/
flag asn1SccStd_msgs_MultiArrayLayout_Decode(asn1SccStd_msgs_MultiArrayLayout* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    int nCount; 
    
    byte arr[60];
} asn1SccStd_msgs_ByteMultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_ByteMultiArray_data_value data_value;
} asn1SccStd_msgs_ByteMultiArray;

flag asn1SccStd_msgs_ByteMultiArray_data_value_Equal(const asn1SccStd_msgs_ByteMultiArray_data_value* pVal1, const asn1SccStd_msgs_ByteMultiArray_data_value* pVal2);

flag asn1SccStd_msgs_ByteMultiArray_Equal(const asn1SccStd_msgs_ByteMultiArray* pVal1, const asn1SccStd_msgs_ByteMultiArray* pVal2);

void asn1SccStd_msgs_ByteMultiArray_data_value_Initialize(asn1SccStd_msgs_ByteMultiArray_data_value* pVal);
void asn1SccStd_msgs_ByteMultiArray_Initialize(asn1SccStd_msgs_ByteMultiArray* pVal);

#define ERR_STD_MSGS_BYTEMULTIARRAY_LAYOUT_DIM_ELM_LABEL		23  /**/
#define ERR_STD_MSGS_BYTEMULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		34  /**/
#define ERR_STD_MSGS_BYTEMULTIARRAY_LAYOUT_DIM_ELM_STRIDE		45  /**/
#define ERR_STD_MSGS_BYTEMULTIARRAY_LAYOUT_DIM		66  /**/
#define ERR_STD_MSGS_BYTEMULTIARRAY_LAYOUT_DATA_OFFSET		73  /**/
#define ERR_STD_MSGS_BYTEMULTIARRAY_DATA_VALUE		94  /**/
flag asn1SccStd_msgs_ByteMultiArray_IsConstraintValid(const asn1SccStd_msgs_ByteMultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_BYTEMULTIARRAY		101  /**/
#define ERR_UPER_ENCODE_STD_MSGS_BYTEMULTIARRAY_LAYOUT_2		90  /**/
#define ERR_UPER_ENCODE_STD_MSGS_BYTEMULTIARRAY_DATA_VALUE		95  /**/
#define asn1SccStd_msgs_ByteMultiArray_REQUIRED_BYTES_FOR_ENCODING       4191 
#define asn1SccStd_msgs_ByteMultiArray_REQUIRED_BITS_FOR_ENCODING        33524

flag asn1SccStd_msgs_ByteMultiArray_Encode(const asn1SccStd_msgs_ByteMultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_BYTEMULTIARRAY		102  /**/
#define ERR_UPER_DECODE_STD_MSGS_BYTEMULTIARRAY_LAYOUT_2		91  /**/
#define ERR_UPER_DECODE_STD_MSGS_BYTEMULTIARRAY_DATA_VALUE		96  /**/
flag asn1SccStd_msgs_ByteMultiArray_Decode(asn1SccStd_msgs_ByteMultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[60];
} asn1SccStd_msgs_Float32MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_Float32MultiArray_data_value data_value;
} asn1SccStd_msgs_Float32MultiArray;

flag asn1SccStd_msgs_Float32MultiArray_data_value_Equal(const asn1SccStd_msgs_Float32MultiArray_data_value* pVal1, const asn1SccStd_msgs_Float32MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_Float32MultiArray_Equal(const asn1SccStd_msgs_Float32MultiArray* pVal1, const asn1SccStd_msgs_Float32MultiArray* pVal2);

void asn1SccStd_msgs_Float32MultiArray_data_value_Initialize(asn1SccStd_msgs_Float32MultiArray_data_value* pVal);
void asn1SccStd_msgs_Float32MultiArray_Initialize(asn1SccStd_msgs_Float32MultiArray* pVal);

#define ERR_STD_MSGS_FLOAT32MULTIARRAY_LAYOUT_DIM_ELM_LABEL		217  /**/
#define ERR_STD_MSGS_FLOAT32MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		228  /**/
#define ERR_STD_MSGS_FLOAT32MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		239  /**/
#define ERR_STD_MSGS_FLOAT32MULTIARRAY_LAYOUT_DIM		260  /**/
#define ERR_STD_MSGS_FLOAT32MULTIARRAY_LAYOUT_DATA_OFFSET		267  /**/
#define ERR_STD_MSGS_FLOAT32MULTIARRAY_DATA_VALUE_ELM		288  /**/
#define ERR_STD_MSGS_FLOAT32MULTIARRAY_DATA_VALUE		299  /**/
flag asn1SccStd_msgs_Float32MultiArray_IsConstraintValid(const asn1SccStd_msgs_Float32MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_FLOAT32MULTIARRAY		306  /**/
#define ERR_UPER_ENCODE_STD_MSGS_FLOAT32MULTIARRAY_LAYOUT_2		284  /**/
#define ERR_UPER_ENCODE_STD_MSGS_FLOAT32MULTIARRAY_DATA_VALUE		300  /**/
#define ERR_UPER_ENCODE_STD_MSGS_FLOAT32MULTIARRAY_DATA_VALUE_ELM_2		295  /**/
#define asn1SccStd_msgs_Float32MultiArray_REQUIRED_BYTES_FOR_ENCODING       4911 
#define asn1SccStd_msgs_Float32MultiArray_REQUIRED_BITS_FOR_ENCODING        39284

flag asn1SccStd_msgs_Float32MultiArray_Encode(const asn1SccStd_msgs_Float32MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_FLOAT32MULTIARRAY		307  /**/
#define ERR_UPER_DECODE_STD_MSGS_FLOAT32MULTIARRAY_LAYOUT_2		285  /**/
#define ERR_UPER_DECODE_STD_MSGS_FLOAT32MULTIARRAY_DATA_VALUE		301  /**/
#define ERR_UPER_DECODE_STD_MSGS_FLOAT32MULTIARRAY_DATA_VALUE_ELM_2		296  /**/
flag asn1SccStd_msgs_Float32MultiArray_Decode(asn1SccStd_msgs_Float32MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[60];
} asn1SccStd_msgs_Float64MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_Float64MultiArray_data_value data_value;
} asn1SccStd_msgs_Float64MultiArray;

flag asn1SccStd_msgs_Float64MultiArray_data_value_Equal(const asn1SccStd_msgs_Float64MultiArray_data_value* pVal1, const asn1SccStd_msgs_Float64MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_Float64MultiArray_Equal(const asn1SccStd_msgs_Float64MultiArray* pVal1, const asn1SccStd_msgs_Float64MultiArray* pVal2);

void asn1SccStd_msgs_Float64MultiArray_data_value_Initialize(asn1SccStd_msgs_Float64MultiArray_data_value* pVal);
void asn1SccStd_msgs_Float64MultiArray_Initialize(asn1SccStd_msgs_Float64MultiArray* pVal);

#define ERR_STD_MSGS_FLOAT64MULTIARRAY_LAYOUT_DIM_ELM_LABEL		323  /**/
#define ERR_STD_MSGS_FLOAT64MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		334  /**/
#define ERR_STD_MSGS_FLOAT64MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		345  /**/
#define ERR_STD_MSGS_FLOAT64MULTIARRAY_LAYOUT_DIM		366  /**/
#define ERR_STD_MSGS_FLOAT64MULTIARRAY_LAYOUT_DATA_OFFSET		373  /**/
#define ERR_STD_MSGS_FLOAT64MULTIARRAY_DATA_VALUE_ELM		394  /**/
#define ERR_STD_MSGS_FLOAT64MULTIARRAY_DATA_VALUE		405  /**/
flag asn1SccStd_msgs_Float64MultiArray_IsConstraintValid(const asn1SccStd_msgs_Float64MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_FLOAT64MULTIARRAY		412  /**/
#define ERR_UPER_ENCODE_STD_MSGS_FLOAT64MULTIARRAY_LAYOUT_2		390  /**/
#define ERR_UPER_ENCODE_STD_MSGS_FLOAT64MULTIARRAY_DATA_VALUE		406  /**/
#define ERR_UPER_ENCODE_STD_MSGS_FLOAT64MULTIARRAY_DATA_VALUE_ELM_2		401  /**/
#define asn1SccStd_msgs_Float64MultiArray_REQUIRED_BYTES_FOR_ENCODING       4911 
#define asn1SccStd_msgs_Float64MultiArray_REQUIRED_BITS_FOR_ENCODING        39284

flag asn1SccStd_msgs_Float64MultiArray_Encode(const asn1SccStd_msgs_Float64MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_FLOAT64MULTIARRAY		413  /**/
#define ERR_UPER_DECODE_STD_MSGS_FLOAT64MULTIARRAY_LAYOUT_2		391  /**/
#define ERR_UPER_DECODE_STD_MSGS_FLOAT64MULTIARRAY_DATA_VALUE		407  /**/
#define ERR_UPER_DECODE_STD_MSGS_FLOAT64MULTIARRAY_DATA_VALUE_ELM_2		402  /**/
flag asn1SccStd_msgs_Float64MultiArray_Decode(asn1SccStd_msgs_Float64MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Int16 arr[60];
} asn1SccStd_msgs_Int16MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_Int16MultiArray_data_value data_value;
} asn1SccStd_msgs_Int16MultiArray;

flag asn1SccStd_msgs_Int16MultiArray_data_value_Equal(const asn1SccStd_msgs_Int16MultiArray_data_value* pVal1, const asn1SccStd_msgs_Int16MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_Int16MultiArray_Equal(const asn1SccStd_msgs_Int16MultiArray* pVal1, const asn1SccStd_msgs_Int16MultiArray* pVal2);

void asn1SccStd_msgs_Int16MultiArray_data_value_Initialize(asn1SccStd_msgs_Int16MultiArray_data_value* pVal);
void asn1SccStd_msgs_Int16MultiArray_Initialize(asn1SccStd_msgs_Int16MultiArray* pVal);

#define ERR_STD_MSGS_INT16MULTIARRAY_LAYOUT_DIM_ELM_LABEL		489  /**/
#define ERR_STD_MSGS_INT16MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		500  /**/
#define ERR_STD_MSGS_INT16MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		511  /**/
#define ERR_STD_MSGS_INT16MULTIARRAY_LAYOUT_DIM		532  /**/
#define ERR_STD_MSGS_INT16MULTIARRAY_LAYOUT_DATA_OFFSET		539  /**/
#define ERR_STD_MSGS_INT16MULTIARRAY_DATA_VALUE_ELM		560  /**/
#define ERR_STD_MSGS_INT16MULTIARRAY_DATA_VALUE		571  /**/
flag asn1SccStd_msgs_Int16MultiArray_IsConstraintValid(const asn1SccStd_msgs_Int16MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT16MULTIARRAY		578  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT16MULTIARRAY_LAYOUT_2		556  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT16MULTIARRAY_DATA_VALUE		572  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT16MULTIARRAY_DATA_VALUE_ELM_2		567  /**/
#define asn1SccStd_msgs_Int16MultiArray_REQUIRED_BYTES_FOR_ENCODING       4251 
#define asn1SccStd_msgs_Int16MultiArray_REQUIRED_BITS_FOR_ENCODING        34004

flag asn1SccStd_msgs_Int16MultiArray_Encode(const asn1SccStd_msgs_Int16MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT16MULTIARRAY		579  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT16MULTIARRAY_LAYOUT_2		557  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT16MULTIARRAY_DATA_VALUE		573  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT16MULTIARRAY_DATA_VALUE_ELM_2		568  /**/
flag asn1SccStd_msgs_Int16MultiArray_Decode(asn1SccStd_msgs_Int16MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Int32 arr[60];
} asn1SccStd_msgs_Int32MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_Int32MultiArray_data_value data_value;
} asn1SccStd_msgs_Int32MultiArray;

flag asn1SccStd_msgs_Int32MultiArray_data_value_Equal(const asn1SccStd_msgs_Int32MultiArray_data_value* pVal1, const asn1SccStd_msgs_Int32MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_Int32MultiArray_Equal(const asn1SccStd_msgs_Int32MultiArray* pVal1, const asn1SccStd_msgs_Int32MultiArray* pVal2);

void asn1SccStd_msgs_Int32MultiArray_data_value_Initialize(asn1SccStd_msgs_Int32MultiArray_data_value* pVal);
void asn1SccStd_msgs_Int32MultiArray_Initialize(asn1SccStd_msgs_Int32MultiArray* pVal);

#define ERR_STD_MSGS_INT32MULTIARRAY_LAYOUT_DIM_ELM_LABEL		595  /**/
#define ERR_STD_MSGS_INT32MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		606  /**/
#define ERR_STD_MSGS_INT32MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		617  /**/
#define ERR_STD_MSGS_INT32MULTIARRAY_LAYOUT_DIM		638  /**/
#define ERR_STD_MSGS_INT32MULTIARRAY_LAYOUT_DATA_OFFSET		645  /**/
#define ERR_STD_MSGS_INT32MULTIARRAY_DATA_VALUE_ELM		666  /**/
#define ERR_STD_MSGS_INT32MULTIARRAY_DATA_VALUE		677  /**/
flag asn1SccStd_msgs_Int32MultiArray_IsConstraintValid(const asn1SccStd_msgs_Int32MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT32MULTIARRAY		684  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT32MULTIARRAY_LAYOUT_2		662  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT32MULTIARRAY_DATA_VALUE		678  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT32MULTIARRAY_DATA_VALUE_ELM_2		673  /**/
#define asn1SccStd_msgs_Int32MultiArray_REQUIRED_BYTES_FOR_ENCODING       4371 
#define asn1SccStd_msgs_Int32MultiArray_REQUIRED_BITS_FOR_ENCODING        34964

flag asn1SccStd_msgs_Int32MultiArray_Encode(const asn1SccStd_msgs_Int32MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT32MULTIARRAY		685  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT32MULTIARRAY_LAYOUT_2		663  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT32MULTIARRAY_DATA_VALUE		679  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT32MULTIARRAY_DATA_VALUE_ELM_2		674  /**/
flag asn1SccStd_msgs_Int32MultiArray_Decode(asn1SccStd_msgs_Int32MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Int64 arr[60];
} asn1SccStd_msgs_Int64MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_Int64MultiArray_data_value data_value;
} asn1SccStd_msgs_Int64MultiArray;

flag asn1SccStd_msgs_Int64MultiArray_data_value_Equal(const asn1SccStd_msgs_Int64MultiArray_data_value* pVal1, const asn1SccStd_msgs_Int64MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_Int64MultiArray_Equal(const asn1SccStd_msgs_Int64MultiArray* pVal1, const asn1SccStd_msgs_Int64MultiArray* pVal2);

void asn1SccStd_msgs_Int64MultiArray_data_value_Initialize(asn1SccStd_msgs_Int64MultiArray_data_value* pVal);
void asn1SccStd_msgs_Int64MultiArray_Initialize(asn1SccStd_msgs_Int64MultiArray* pVal);

#define ERR_STD_MSGS_INT64MULTIARRAY_LAYOUT_DIM_ELM_LABEL		701  /**/
#define ERR_STD_MSGS_INT64MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		712  /**/
#define ERR_STD_MSGS_INT64MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		723  /**/
#define ERR_STD_MSGS_INT64MULTIARRAY_LAYOUT_DIM		744  /**/
#define ERR_STD_MSGS_INT64MULTIARRAY_LAYOUT_DATA_OFFSET		751  /**/
#define ERR_STD_MSGS_INT64MULTIARRAY_DATA_VALUE_ELM		772  /**/
#define ERR_STD_MSGS_INT64MULTIARRAY_DATA_VALUE		783  /**/
flag asn1SccStd_msgs_Int64MultiArray_IsConstraintValid(const asn1SccStd_msgs_Int64MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT64MULTIARRAY		790  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT64MULTIARRAY_LAYOUT_2		768  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT64MULTIARRAY_DATA_VALUE		784  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT64MULTIARRAY_DATA_VALUE_ELM_2		779  /**/
#define asn1SccStd_msgs_Int64MultiArray_REQUIRED_BYTES_FOR_ENCODING       4611 
#define asn1SccStd_msgs_Int64MultiArray_REQUIRED_BITS_FOR_ENCODING        36884

flag asn1SccStd_msgs_Int64MultiArray_Encode(const asn1SccStd_msgs_Int64MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT64MULTIARRAY		791  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT64MULTIARRAY_LAYOUT_2		769  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT64MULTIARRAY_DATA_VALUE		785  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT64MULTIARRAY_DATA_VALUE_ELM_2		780  /**/
flag asn1SccStd_msgs_Int64MultiArray_Decode(asn1SccStd_msgs_Int64MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_UInt16 arr[60];
} asn1SccStd_msgs_UInt16MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_UInt16MultiArray_data_value data_value;
} asn1SccStd_msgs_UInt16MultiArray;

flag asn1SccStd_msgs_UInt16MultiArray_data_value_Equal(const asn1SccStd_msgs_UInt16MultiArray_data_value* pVal1, const asn1SccStd_msgs_UInt16MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_UInt16MultiArray_Equal(const asn1SccStd_msgs_UInt16MultiArray* pVal1, const asn1SccStd_msgs_UInt16MultiArray* pVal2);

void asn1SccStd_msgs_UInt16MultiArray_data_value_Initialize(asn1SccStd_msgs_UInt16MultiArray_data_value* pVal);
void asn1SccStd_msgs_UInt16MultiArray_Initialize(asn1SccStd_msgs_UInt16MultiArray* pVal);

#define ERR_STD_MSGS_UINT16MULTIARRAY_LAYOUT_DIM_ELM_LABEL		1062  /**/
#define ERR_STD_MSGS_UINT16MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		1073  /**/
#define ERR_STD_MSGS_UINT16MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		1084  /**/
#define ERR_STD_MSGS_UINT16MULTIARRAY_LAYOUT_DIM		1105  /**/
#define ERR_STD_MSGS_UINT16MULTIARRAY_LAYOUT_DATA_OFFSET		1112  /**/
#define ERR_STD_MSGS_UINT16MULTIARRAY_DATA_VALUE_ELM		1133  /**/
#define ERR_STD_MSGS_UINT16MULTIARRAY_DATA_VALUE		1144  /**/
flag asn1SccStd_msgs_UInt16MultiArray_IsConstraintValid(const asn1SccStd_msgs_UInt16MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT16MULTIARRAY		1151  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT16MULTIARRAY_LAYOUT_2		1129  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT16MULTIARRAY_DATA_VALUE		1145  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT16MULTIARRAY_DATA_VALUE_ELM_2		1140  /**/
#define asn1SccStd_msgs_UInt16MultiArray_REQUIRED_BYTES_FOR_ENCODING       4251 
#define asn1SccStd_msgs_UInt16MultiArray_REQUIRED_BITS_FOR_ENCODING        34004

flag asn1SccStd_msgs_UInt16MultiArray_Encode(const asn1SccStd_msgs_UInt16MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT16MULTIARRAY		1152  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT16MULTIARRAY_LAYOUT_2		1130  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT16MULTIARRAY_DATA_VALUE		1146  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT16MULTIARRAY_DATA_VALUE_ELM_2		1141  /**/
flag asn1SccStd_msgs_UInt16MultiArray_Decode(asn1SccStd_msgs_UInt16MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_UInt32 arr[60];
} asn1SccStd_msgs_UInt32MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_UInt32MultiArray_data_value data_value;
} asn1SccStd_msgs_UInt32MultiArray;

flag asn1SccStd_msgs_UInt32MultiArray_data_value_Equal(const asn1SccStd_msgs_UInt32MultiArray_data_value* pVal1, const asn1SccStd_msgs_UInt32MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_UInt32MultiArray_Equal(const asn1SccStd_msgs_UInt32MultiArray* pVal1, const asn1SccStd_msgs_UInt32MultiArray* pVal2);

void asn1SccStd_msgs_UInt32MultiArray_data_value_Initialize(asn1SccStd_msgs_UInt32MultiArray_data_value* pVal);
void asn1SccStd_msgs_UInt32MultiArray_Initialize(asn1SccStd_msgs_UInt32MultiArray* pVal);

#define ERR_STD_MSGS_UINT32MULTIARRAY_LAYOUT_DIM_ELM_LABEL		1168  /**/
#define ERR_STD_MSGS_UINT32MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		1179  /**/
#define ERR_STD_MSGS_UINT32MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		1190  /**/
#define ERR_STD_MSGS_UINT32MULTIARRAY_LAYOUT_DIM		1211  /**/
#define ERR_STD_MSGS_UINT32MULTIARRAY_LAYOUT_DATA_OFFSET		1218  /**/
#define ERR_STD_MSGS_UINT32MULTIARRAY_DATA_VALUE_ELM		1239  /**/
#define ERR_STD_MSGS_UINT32MULTIARRAY_DATA_VALUE		1250  /**/
flag asn1SccStd_msgs_UInt32MultiArray_IsConstraintValid(const asn1SccStd_msgs_UInt32MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT32MULTIARRAY		1257  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT32MULTIARRAY_LAYOUT_2		1235  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT32MULTIARRAY_DATA_VALUE		1251  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT32MULTIARRAY_DATA_VALUE_ELM_2		1246  /**/
#define asn1SccStd_msgs_UInt32MultiArray_REQUIRED_BYTES_FOR_ENCODING       4371 
#define asn1SccStd_msgs_UInt32MultiArray_REQUIRED_BITS_FOR_ENCODING        34964

flag asn1SccStd_msgs_UInt32MultiArray_Encode(const asn1SccStd_msgs_UInt32MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT32MULTIARRAY		1258  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT32MULTIARRAY_LAYOUT_2		1236  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT32MULTIARRAY_DATA_VALUE		1252  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT32MULTIARRAY_DATA_VALUE_ELM_2		1247  /**/
flag asn1SccStd_msgs_UInt32MultiArray_Decode(asn1SccStd_msgs_UInt32MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_UInt64 arr[60];
} asn1SccStd_msgs_UInt64MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_UInt64MultiArray_data_value data_value;
} asn1SccStd_msgs_UInt64MultiArray;

flag asn1SccStd_msgs_UInt64MultiArray_data_value_Equal(const asn1SccStd_msgs_UInt64MultiArray_data_value* pVal1, const asn1SccStd_msgs_UInt64MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_UInt64MultiArray_Equal(const asn1SccStd_msgs_UInt64MultiArray* pVal1, const asn1SccStd_msgs_UInt64MultiArray* pVal2);

void asn1SccStd_msgs_UInt64MultiArray_data_value_Initialize(asn1SccStd_msgs_UInt64MultiArray_data_value* pVal);
void asn1SccStd_msgs_UInt64MultiArray_Initialize(asn1SccStd_msgs_UInt64MultiArray* pVal);

#define ERR_STD_MSGS_UINT64MULTIARRAY_LAYOUT_DIM_ELM_LABEL		1274  /**/
#define ERR_STD_MSGS_UINT64MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		1285  /**/
#define ERR_STD_MSGS_UINT64MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		1296  /**/
#define ERR_STD_MSGS_UINT64MULTIARRAY_LAYOUT_DIM		1317  /**/
#define ERR_STD_MSGS_UINT64MULTIARRAY_LAYOUT_DATA_OFFSET		1324  /**/
#define ERR_STD_MSGS_UINT64MULTIARRAY_DATA_VALUE_ELM		1345  /**/
#define ERR_STD_MSGS_UINT64MULTIARRAY_DATA_VALUE		1356  /**/
flag asn1SccStd_msgs_UInt64MultiArray_IsConstraintValid(const asn1SccStd_msgs_UInt64MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT64MULTIARRAY		1363  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT64MULTIARRAY_LAYOUT_2		1341  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT64MULTIARRAY_DATA_VALUE		1357  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT64MULTIARRAY_DATA_VALUE_ELM_2		1352  /**/
#define asn1SccStd_msgs_UInt64MultiArray_REQUIRED_BYTES_FOR_ENCODING       4603 
#define asn1SccStd_msgs_UInt64MultiArray_REQUIRED_BITS_FOR_ENCODING        36824

flag asn1SccStd_msgs_UInt64MultiArray_Encode(const asn1SccStd_msgs_UInt64MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT64MULTIARRAY		1364  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT64MULTIARRAY_LAYOUT_2		1342  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT64MULTIARRAY_DATA_VALUE		1358  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT64MULTIARRAY_DATA_VALUE_ELM_2		1353  /**/
flag asn1SccStd_msgs_UInt64MultiArray_Decode(asn1SccStd_msgs_UInt64MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    int nCount; 
    
    byte arr[60];
} asn1SccStd_msgs_UInt8MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_UInt8MultiArray_data_value data_value;
} asn1SccStd_msgs_UInt8MultiArray;

flag asn1SccStd_msgs_UInt8MultiArray_data_value_Equal(const asn1SccStd_msgs_UInt8MultiArray_data_value* pVal1, const asn1SccStd_msgs_UInt8MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_UInt8MultiArray_Equal(const asn1SccStd_msgs_UInt8MultiArray* pVal1, const asn1SccStd_msgs_UInt8MultiArray* pVal2);

void asn1SccStd_msgs_UInt8MultiArray_data_value_Initialize(asn1SccStd_msgs_UInt8MultiArray_data_value* pVal);
void asn1SccStd_msgs_UInt8MultiArray_Initialize(asn1SccStd_msgs_UInt8MultiArray* pVal);

#define ERR_STD_MSGS_UINT8MULTIARRAY_LAYOUT_DIM_ELM_LABEL		1380  /**/
#define ERR_STD_MSGS_UINT8MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		1391  /**/
#define ERR_STD_MSGS_UINT8MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		1402  /**/
#define ERR_STD_MSGS_UINT8MULTIARRAY_LAYOUT_DIM		1423  /**/
#define ERR_STD_MSGS_UINT8MULTIARRAY_LAYOUT_DATA_OFFSET		1430  /**/
#define ERR_STD_MSGS_UINT8MULTIARRAY_DATA_VALUE		1451  /**/
flag asn1SccStd_msgs_UInt8MultiArray_IsConstraintValid(const asn1SccStd_msgs_UInt8MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT8MULTIARRAY		1458  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT8MULTIARRAY_LAYOUT_2		1447  /**/
#define ERR_UPER_ENCODE_STD_MSGS_UINT8MULTIARRAY_DATA_VALUE		1452  /**/
#define asn1SccStd_msgs_UInt8MultiArray_REQUIRED_BYTES_FOR_ENCODING       4191 
#define asn1SccStd_msgs_UInt8MultiArray_REQUIRED_BITS_FOR_ENCODING        33524

flag asn1SccStd_msgs_UInt8MultiArray_Encode(const asn1SccStd_msgs_UInt8MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT8MULTIARRAY		1459  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT8MULTIARRAY_LAYOUT_2		1448  /**/
#define ERR_UPER_DECODE_STD_MSGS_UINT8MULTIARRAY_DATA_VALUE		1453  /**/
flag asn1SccStd_msgs_UInt8MultiArray_Decode(asn1SccStd_msgs_UInt8MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt32 asn1SccStd_msgs_UInt32;


flag asn1SccStd_msgs_UInt32_Equal(const asn1SccStd_msgs_UInt32* pVal1, const asn1SccStd_msgs_UInt32* pVal2);

void asn1SccStd_msgs_UInt32_Initialize(asn1SccStd_msgs_UInt32* pVal);

#define ERR_STD_MSGS_UINT32		1157  /**/
flag asn1SccStd_msgs_UInt32_IsConstraintValid(const asn1SccStd_msgs_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT32_2		1164  /**/
#define asn1SccStd_msgs_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccStd_msgs_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccStd_msgs_UInt32_Encode(const asn1SccStd_msgs_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT32_2		1165  /**/
flag asn1SccStd_msgs_UInt32_Decode(asn1SccStd_msgs_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_UInt32 sec;
    asn1SccT_UInt32 nsec;
} asn1SccT_Time;

flag asn1SccT_Time_Equal(const asn1SccT_Time* pVal1, const asn1SccT_Time* pVal2);

void asn1SccT_Time_Initialize(asn1SccT_Time* pVal);

#define ERR_T_TIME_SEC		1513  /**/
#define ERR_T_TIME_NSEC		1524  /**/
flag asn1SccT_Time_IsConstraintValid(const asn1SccT_Time* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_TIME		1535  /**/
#define ERR_UPER_ENCODE_T_TIME_SEC_2		1520  /**/
#define ERR_UPER_ENCODE_T_TIME_NSEC_2		1531  /**/
#define asn1SccT_Time_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_Time_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccT_Time_Encode(const asn1SccT_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_TIME		1536  /**/
#define ERR_UPER_DECODE_T_TIME_SEC_2		1521  /**/
#define ERR_UPER_DECODE_T_TIME_NSEC_2		1532  /**/
flag asn1SccT_Time_Decode(asn1SccT_Time* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Time asn1SccStd_msgs_Duration;


flag asn1SccStd_msgs_Duration_Equal(const asn1SccStd_msgs_Duration* pVal1, const asn1SccStd_msgs_Duration* pVal2);

void asn1SccStd_msgs_Duration_Initialize(asn1SccStd_msgs_Duration* pVal);

#define ERR_STD_MSGS_DURATION_SEC		168  /**/
#define ERR_STD_MSGS_DURATION_NSEC		179  /**/
flag asn1SccStd_msgs_Duration_IsConstraintValid(const asn1SccStd_msgs_Duration* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_DURATION_2		196  /**/
#define asn1SccStd_msgs_Duration_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccStd_msgs_Duration_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccStd_msgs_Duration_Encode(const asn1SccStd_msgs_Duration* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_DURATION_2		197  /**/
flag asn1SccStd_msgs_Duration_Decode(asn1SccStd_msgs_Duration* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccT_UInt32 seq;
    asn1SccT_Time stamp;
    asn1SccT_String frame_id;
} asn1SccStd_msgs_Header;

flag asn1SccStd_msgs_Header_Equal(const asn1SccStd_msgs_Header* pVal1, const asn1SccStd_msgs_Header* pVal2);

void asn1SccStd_msgs_Header_Initialize(asn1SccStd_msgs_Header* pVal);

#define ERR_STD_MSGS_HEADER_SEQ		418  /**/
#define ERR_STD_MSGS_HEADER_STAMP_SEC		429  /**/
#define ERR_STD_MSGS_HEADER_STAMP_NSEC		440  /**/
#define ERR_STD_MSGS_HEADER_FRAME_ID		461  /**/
flag asn1SccStd_msgs_Header_IsConstraintValid(const asn1SccStd_msgs_Header* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_HEADER		472  /**/
#define ERR_UPER_ENCODE_STD_MSGS_HEADER_SEQ_2		425  /**/
#define ERR_UPER_ENCODE_STD_MSGS_HEADER_STAMP_2		457  /**/
#define ERR_UPER_ENCODE_STD_MSGS_HEADER_FRAME_ID_2		468  /**/
#define asn1SccStd_msgs_Header_REQUIRED_BYTES_FOR_ENCODING       73 
#define asn1SccStd_msgs_Header_REQUIRED_BITS_FOR_ENCODING        582

flag asn1SccStd_msgs_Header_Encode(const asn1SccStd_msgs_Header* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_HEADER		473  /**/
#define ERR_UPER_DECODE_STD_MSGS_HEADER_SEQ_2		426  /**/
#define ERR_UPER_DECODE_STD_MSGS_HEADER_STAMP_2		458  /**/
#define ERR_UPER_DECODE_STD_MSGS_HEADER_FRAME_ID_2		469  /**/
flag asn1SccStd_msgs_Header_Decode(asn1SccStd_msgs_Header* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Accel accel;
} asn1SccGeometry_msgs_AccelStamped;

flag asn1SccGeometry_msgs_AccelStamped_Equal(const asn1SccGeometry_msgs_AccelStamped* pVal1, const asn1SccGeometry_msgs_AccelStamped* pVal2);

void asn1SccGeometry_msgs_AccelStamped_Initialize(asn1SccGeometry_msgs_AccelStamped* pVal);

#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_HEADER_SEQ		1633  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_HEADER_STAMP_SEC		1644  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_HEADER_STAMP_NSEC		1655  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_HEADER_FRAME_ID		1676  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_LINEAR_X		1697  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_LINEAR_Y		1708  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_LINEAR_Z		1719  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_ANGULAR_X		1740  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_ANGULAR_Y		1751  /**/
#define ERR_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_ANGULAR_Z		1762  /**/
flag asn1SccGeometry_msgs_AccelStamped_IsConstraintValid(const asn1SccGeometry_msgs_AccelStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELSTAMPED		1793  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELSTAMPED_HEADER_2		1693  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_2		1789  /**/
#define asn1SccGeometry_msgs_AccelStamped_REQUIRED_BYTES_FOR_ENCODING       151 
#define asn1SccGeometry_msgs_AccelStamped_REQUIRED_BITS_FOR_ENCODING        1206

flag asn1SccGeometry_msgs_AccelStamped_Encode(const asn1SccGeometry_msgs_AccelStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELSTAMPED		1794  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELSTAMPED_HEADER_2		1694  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELSTAMPED_ACCEL_2		1790  /**/
flag asn1SccGeometry_msgs_AccelStamped_Decode(asn1SccGeometry_msgs_AccelStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_AccelWithCovariance accel;
} asn1SccGeometry_msgs_AccelWithCovarianceStamped;

flag asn1SccGeometry_msgs_AccelWithCovarianceStamped_Equal(const asn1SccGeometry_msgs_AccelWithCovarianceStamped* pVal1, const asn1SccGeometry_msgs_AccelWithCovarianceStamped* pVal2);

void asn1SccGeometry_msgs_AccelWithCovarianceStamped_Initialize(asn1SccGeometry_msgs_AccelWithCovarianceStamped* pVal);

#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_HEADER_SEQ		1918  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_HEADER_STAMP_SEC		1929  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_HEADER_STAMP_NSEC		1940  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_HEADER_FRAME_ID		1961  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_ACCEL_LINEAR_X		1982  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_ACCEL_LINEAR_Y		1993  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_ACCEL_LINEAR_Z		2004  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_ACCEL_ANGULAR_X		2025  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_ACCEL_ANGULAR_Y		2036  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_ACCEL_ANGULAR_Z		2047  /**/
#define ERR_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_COVARIANCE_ELM		2078  /**/
flag asn1SccGeometry_msgs_AccelWithCovarianceStamped_IsConstraintValid(const asn1SccGeometry_msgs_AccelWithCovarianceStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED		2105  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_HEADER_2		1978  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_2		2101  /**/
#define asn1SccGeometry_msgs_AccelWithCovarianceStamped_REQUIRED_BYTES_FOR_ENCODING       619 
#define asn1SccGeometry_msgs_AccelWithCovarianceStamped_REQUIRED_BITS_FOR_ENCODING        4950

flag asn1SccGeometry_msgs_AccelWithCovarianceStamped_Encode(const asn1SccGeometry_msgs_AccelWithCovarianceStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED		2106  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_HEADER_2		1979  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_ACCELWITHCOVARIANCESTAMPED_ACCEL_2		2102  /**/
flag asn1SccGeometry_msgs_AccelWithCovarianceStamped_Decode(asn1SccGeometry_msgs_AccelWithCovarianceStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Inertia inertia;
} asn1SccGeometry_msgs_InertiaStamped;

flag asn1SccGeometry_msgs_InertiaStamped_Equal(const asn1SccGeometry_msgs_InertiaStamped* pVal1, const asn1SccGeometry_msgs_InertiaStamped* pVal2);

void asn1SccGeometry_msgs_InertiaStamped_Initialize(asn1SccGeometry_msgs_InertiaStamped* pVal);

#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_HEADER_SEQ		2237  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_HEADER_STAMP_SEC		2248  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_HEADER_STAMP_NSEC		2259  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_HEADER_FRAME_ID		2280  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_M		2301  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_COM_X		2312  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_COM_Y		2323  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_COM_Z		2334  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_IXX		2355  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_IXY		2366  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_IXZ		2377  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_IYY		2388  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_IYZ		2399  /**/
#define ERR_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_IZZ		2410  /**/
flag asn1SccGeometry_msgs_InertiaStamped_IsConstraintValid(const asn1SccGeometry_msgs_InertiaStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIASTAMPED		2431  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIASTAMPED_HEADER_2		2297  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_2		2427  /**/
#define asn1SccGeometry_msgs_InertiaStamped_REQUIRED_BYTES_FOR_ENCODING       203 
#define asn1SccGeometry_msgs_InertiaStamped_REQUIRED_BITS_FOR_ENCODING        1622

flag asn1SccGeometry_msgs_InertiaStamped_Encode(const asn1SccGeometry_msgs_InertiaStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIASTAMPED		2432  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIASTAMPED_HEADER_2		2298  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_INERTIASTAMPED_INERTIA_2		2428  /**/
flag asn1SccGeometry_msgs_InertiaStamped_Decode(asn1SccGeometry_msgs_InertiaStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Point point;
} asn1SccGeometry_msgs_PointStamped;

flag asn1SccGeometry_msgs_PointStamped_Equal(const asn1SccGeometry_msgs_PointStamped* pVal1, const asn1SccGeometry_msgs_PointStamped* pVal2);

void asn1SccGeometry_msgs_PointStamped_Initialize(asn1SccGeometry_msgs_PointStamped* pVal);

#define ERR_GEOMETRY_MSGS_POINTSTAMPED_HEADER_SEQ		2515  /**/
#define ERR_GEOMETRY_MSGS_POINTSTAMPED_HEADER_STAMP_SEC		2526  /**/
#define ERR_GEOMETRY_MSGS_POINTSTAMPED_HEADER_STAMP_NSEC		2537  /**/
#define ERR_GEOMETRY_MSGS_POINTSTAMPED_HEADER_FRAME_ID		2558  /**/
#define ERR_GEOMETRY_MSGS_POINTSTAMPED_POINT_X		2579  /**/
#define ERR_GEOMETRY_MSGS_POINTSTAMPED_POINT_Y		2590  /**/
#define ERR_GEOMETRY_MSGS_POINTSTAMPED_POINT_Z		2601  /**/
flag asn1SccGeometry_msgs_PointStamped_IsConstraintValid(const asn1SccGeometry_msgs_PointStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINTSTAMPED		2622  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINTSTAMPED_HEADER_2		2575  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINTSTAMPED_POINT_2		2618  /**/
#define asn1SccGeometry_msgs_PointStamped_REQUIRED_BYTES_FOR_ENCODING       112 
#define asn1SccGeometry_msgs_PointStamped_REQUIRED_BITS_FOR_ENCODING        894

flag asn1SccGeometry_msgs_PointStamped_Encode(const asn1SccGeometry_msgs_PointStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINTSTAMPED		2623  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINTSTAMPED_HEADER_2		2576  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINTSTAMPED_POINT_2		2619  /**/
flag asn1SccGeometry_msgs_PointStamped_Decode(asn1SccGeometry_msgs_PointStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Polygon polygon;
} asn1SccGeometry_msgs_PolygonStamped;

flag asn1SccGeometry_msgs_PolygonStamped_Equal(const asn1SccGeometry_msgs_PolygonStamped* pVal1, const asn1SccGeometry_msgs_PolygonStamped* pVal2);

void asn1SccGeometry_msgs_PolygonStamped_Initialize(asn1SccGeometry_msgs_PolygonStamped* pVal);

#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_HEADER_SEQ		2678  /**/
#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_HEADER_STAMP_SEC		2689  /**/
#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_HEADER_STAMP_NSEC		2700  /**/
#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_HEADER_FRAME_ID		2721  /**/
#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_POLYGON_ELM_X		2742  /**/
#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_POLYGON_ELM_Y		2753  /**/
#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_POLYGON_ELM_Z		2764  /**/
#define ERR_GEOMETRY_MSGS_POLYGONSTAMPED_POLYGON		2785  /**/
flag asn1SccGeometry_msgs_PolygonStamped_IsConstraintValid(const asn1SccGeometry_msgs_PolygonStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POLYGONSTAMPED		2796  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POLYGONSTAMPED_HEADER_2		2738  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POLYGONSTAMPED_POLYGON_2		2792  /**/
#define asn1SccGeometry_msgs_PolygonStamped_REQUIRED_BYTES_FOR_ENCODING       2414 
#define asn1SccGeometry_msgs_PolygonStamped_REQUIRED_BITS_FOR_ENCODING        19308

flag asn1SccGeometry_msgs_PolygonStamped_Encode(const asn1SccGeometry_msgs_PolygonStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POLYGONSTAMPED		2797  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POLYGONSTAMPED_HEADER_2		2739  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POLYGONSTAMPED_POLYGON_2		2793  /**/
flag asn1SccGeometry_msgs_PolygonStamped_Decode(asn1SccGeometry_msgs_PolygonStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccGeometry_msgs_Pose arr[60];
} asn1SccGeometry_msgs_PoseArray_poses;

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_PoseArray_poses poses;
} asn1SccGeometry_msgs_PoseArray;

flag asn1SccGeometry_msgs_PoseArray_poses_Equal(const asn1SccGeometry_msgs_PoseArray_poses* pVal1, const asn1SccGeometry_msgs_PoseArray_poses* pVal2);

flag asn1SccGeometry_msgs_PoseArray_Equal(const asn1SccGeometry_msgs_PoseArray* pVal1, const asn1SccGeometry_msgs_PoseArray* pVal2);

void asn1SccGeometry_msgs_PoseArray_poses_Initialize(asn1SccGeometry_msgs_PoseArray_poses* pVal);
void asn1SccGeometry_msgs_PoseArray_Initialize(asn1SccGeometry_msgs_PoseArray* pVal);

#define ERR_GEOMETRY_MSGS_POSEARRAY_HEADER_SEQ		2944  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_HEADER_STAMP_SEC		2955  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_HEADER_STAMP_NSEC		2966  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_HEADER_FRAME_ID		2987  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_POSITION_X		3008  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_POSITION_Y		3019  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_POSITION_Z		3030  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_ORIENTATION_X		3051  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_ORIENTATION_Y		3062  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_ORIENTATION_Z		3073  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_ORIENTATION_W		3084  /**/
#define ERR_GEOMETRY_MSGS_POSEARRAY_POSES		3115  /**/
flag asn1SccGeometry_msgs_PoseArray_IsConstraintValid(const asn1SccGeometry_msgs_PoseArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEARRAY		3122  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEARRAY_HEADER_2		3004  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEARRAY_POSES		3116  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_2		3111  /**/
#define asn1SccGeometry_msgs_PoseArray_REQUIRED_BYTES_FOR_ENCODING       5534 
#define asn1SccGeometry_msgs_PoseArray_REQUIRED_BITS_FOR_ENCODING        44268

flag asn1SccGeometry_msgs_PoseArray_Encode(const asn1SccGeometry_msgs_PoseArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEARRAY		3123  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEARRAY_HEADER_2		3005  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEARRAY_POSES		3117  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEARRAY_POSES_ELM_2		3112  /**/
flag asn1SccGeometry_msgs_PoseArray_Decode(asn1SccGeometry_msgs_PoseArray* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Pose pose;
} asn1SccGeometry_msgs_PoseStamped;

flag asn1SccGeometry_msgs_PoseStamped_Equal(const asn1SccGeometry_msgs_PoseStamped* pVal1, const asn1SccGeometry_msgs_PoseStamped* pVal2);

void asn1SccGeometry_msgs_PoseStamped_Initialize(asn1SccGeometry_msgs_PoseStamped* pVal);

#define ERR_GEOMETRY_MSGS_POSESTAMPED_HEADER_SEQ		3128  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_HEADER_STAMP_SEC		3139  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_HEADER_STAMP_NSEC		3150  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_HEADER_FRAME_ID		3171  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_POSE_POSITION_X		3192  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_POSE_POSITION_Y		3203  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_POSE_POSITION_Z		3214  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_POSE_ORIENTATION_X		3235  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_POSE_ORIENTATION_Y		3246  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_POSE_ORIENTATION_Z		3257  /**/
#define ERR_GEOMETRY_MSGS_POSESTAMPED_POSE_ORIENTATION_W		3268  /**/
flag asn1SccGeometry_msgs_PoseStamped_IsConstraintValid(const asn1SccGeometry_msgs_PoseStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSESTAMPED		3299  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSESTAMPED_HEADER_2		3188  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSESTAMPED_POSE_2		3295  /**/
#define asn1SccGeometry_msgs_PoseStamped_REQUIRED_BYTES_FOR_ENCODING       164 
#define asn1SccGeometry_msgs_PoseStamped_REQUIRED_BITS_FOR_ENCODING        1310

flag asn1SccGeometry_msgs_PoseStamped_Encode(const asn1SccGeometry_msgs_PoseStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSESTAMPED		3300  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSESTAMPED_HEADER_2		3189  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSESTAMPED_POSE_2		3296  /**/
flag asn1SccGeometry_msgs_PoseStamped_Decode(asn1SccGeometry_msgs_PoseStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_PoseWithCovariance pose;
} asn1SccGeometry_msgs_PoseWithCovarianceStamped;

flag asn1SccGeometry_msgs_PoseWithCovarianceStamped_Equal(const asn1SccGeometry_msgs_PoseWithCovarianceStamped* pVal1, const asn1SccGeometry_msgs_PoseWithCovarianceStamped* pVal2);

void asn1SccGeometry_msgs_PoseWithCovarianceStamped_Initialize(asn1SccGeometry_msgs_PoseWithCovarianceStamped* pVal);

#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_HEADER_SEQ		3435  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_HEADER_STAMP_SEC		3446  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_HEADER_STAMP_NSEC		3457  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_HEADER_FRAME_ID		3478  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_POSE_POSITION_X		3499  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_POSE_POSITION_Y		3510  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_POSE_POSITION_Z		3521  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_POSE_ORIENTATION_X		3542  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_POSE_ORIENTATION_Y		3553  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_POSE_ORIENTATION_Z		3564  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_POSE_ORIENTATION_W		3575  /**/
#define ERR_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_COVARIANCE_ELM		3606  /**/
flag asn1SccGeometry_msgs_PoseWithCovarianceStamped_IsConstraintValid(const asn1SccGeometry_msgs_PoseWithCovarianceStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED		3633  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_HEADER_2		3495  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_2		3629  /**/
#define asn1SccGeometry_msgs_PoseWithCovarianceStamped_REQUIRED_BYTES_FOR_ENCODING       632 
#define asn1SccGeometry_msgs_PoseWithCovarianceStamped_REQUIRED_BITS_FOR_ENCODING        5054

flag asn1SccGeometry_msgs_PoseWithCovarianceStamped_Encode(const asn1SccGeometry_msgs_PoseWithCovarianceStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED		3634  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_HEADER_2		3496  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POSEWITHCOVARIANCESTAMPED_POSE_2		3630  /**/
flag asn1SccGeometry_msgs_PoseWithCovarianceStamped_Decode(asn1SccGeometry_msgs_PoseWithCovarianceStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Quaternion quaternion;
} asn1SccGeometry_msgs_QuaternionStamped;

flag asn1SccGeometry_msgs_QuaternionStamped_Equal(const asn1SccGeometry_msgs_QuaternionStamped* pVal1, const asn1SccGeometry_msgs_QuaternionStamped* pVal2);

void asn1SccGeometry_msgs_QuaternionStamped_Initialize(asn1SccGeometry_msgs_QuaternionStamped* pVal);

#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_HEADER_SEQ		3689  /**/
#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_HEADER_STAMP_SEC		3700  /**/
#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_HEADER_STAMP_NSEC		3711  /**/
#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_HEADER_FRAME_ID		3732  /**/
#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_QUATERNION_X		3753  /**/
#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_QUATERNION_Y		3764  /**/
#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_QUATERNION_Z		3775  /**/
#define ERR_GEOMETRY_MSGS_QUATERNIONSTAMPED_QUATERNION_W		3786  /**/
flag asn1SccGeometry_msgs_QuaternionStamped_IsConstraintValid(const asn1SccGeometry_msgs_QuaternionStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNIONSTAMPED		3807  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNIONSTAMPED_HEADER_2		3749  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_QUATERNIONSTAMPED_QUATERNION_2		3803  /**/
#define asn1SccGeometry_msgs_QuaternionStamped_REQUIRED_BYTES_FOR_ENCODING       125 
#define asn1SccGeometry_msgs_QuaternionStamped_REQUIRED_BITS_FOR_ENCODING        998

flag asn1SccGeometry_msgs_QuaternionStamped_Encode(const asn1SccGeometry_msgs_QuaternionStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNIONSTAMPED		3808  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNIONSTAMPED_HEADER_2		3750  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_QUATERNIONSTAMPED_QUATERNION_2		3804  /**/
flag asn1SccGeometry_msgs_QuaternionStamped_Decode(asn1SccGeometry_msgs_QuaternionStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccT_String child_frame_id;
    asn1SccGeometry_msgs_Transform transform;
} asn1SccGeometry_msgs_TransformStamped;

flag asn1SccGeometry_msgs_TransformStamped_Equal(const asn1SccGeometry_msgs_TransformStamped* pVal1, const asn1SccGeometry_msgs_TransformStamped* pVal2);

void asn1SccGeometry_msgs_TransformStamped_Initialize(asn1SccGeometry_msgs_TransformStamped* pVal);

#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_HEADER_SEQ		3916  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_HEADER_STAMP_SEC		3927  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_HEADER_STAMP_NSEC		3938  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_HEADER_FRAME_ID		3959  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_CHILD_FRAME_ID		3980  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_TRANSLATION_X		3991  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_TRANSLATION_Y		4002  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_TRANSLATION_Z		4013  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_ROTATION_X		4034  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_ROTATION_Y		4045  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_ROTATION_Z		4056  /**/
#define ERR_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_ROTATION_W		4067  /**/
flag asn1SccGeometry_msgs_TransformStamped_IsConstraintValid(const asn1SccGeometry_msgs_TransformStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TRANSFORMSTAMPED		4098  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TRANSFORMSTAMPED_HEADER_2		3976  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TRANSFORMSTAMPED_CHILD_FRAME_ID_2		3987  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_2		4094  /**/
#define asn1SccGeometry_msgs_TransformStamped_REQUIRED_BYTES_FOR_ENCODING       225 
#define asn1SccGeometry_msgs_TransformStamped_REQUIRED_BITS_FOR_ENCODING        1796

flag asn1SccGeometry_msgs_TransformStamped_Encode(const asn1SccGeometry_msgs_TransformStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_TRANSFORMSTAMPED		4099  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TRANSFORMSTAMPED_HEADER_2		3977  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TRANSFORMSTAMPED_CHILD_FRAME_ID_2		3988  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TRANSFORMSTAMPED_TRANSFORM_2		4095  /**/
flag asn1SccGeometry_msgs_TransformStamped_Decode(asn1SccGeometry_msgs_TransformStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Twist twist;
} asn1SccGeometry_msgs_TwistStamped;

flag asn1SccGeometry_msgs_TwistStamped_Equal(const asn1SccGeometry_msgs_TwistStamped* pVal1, const asn1SccGeometry_msgs_TwistStamped* pVal2);

void asn1SccGeometry_msgs_TwistStamped_Initialize(asn1SccGeometry_msgs_TwistStamped* pVal);

#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_HEADER_SEQ		4196  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_HEADER_STAMP_SEC		4207  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_HEADER_STAMP_NSEC		4218  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_HEADER_FRAME_ID		4239  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_LINEAR_X		4260  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_LINEAR_Y		4271  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_LINEAR_Z		4282  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_ANGULAR_X		4303  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_ANGULAR_Y		4314  /**/
#define ERR_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_ANGULAR_Z		4325  /**/
flag asn1SccGeometry_msgs_TwistStamped_IsConstraintValid(const asn1SccGeometry_msgs_TwistStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTSTAMPED		4356  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTSTAMPED_HEADER_2		4256  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_2		4352  /**/
#define asn1SccGeometry_msgs_TwistStamped_REQUIRED_BYTES_FOR_ENCODING       151 
#define asn1SccGeometry_msgs_TwistStamped_REQUIRED_BITS_FOR_ENCODING        1206

flag asn1SccGeometry_msgs_TwistStamped_Encode(const asn1SccGeometry_msgs_TwistStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTSTAMPED		4357  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTSTAMPED_HEADER_2		4257  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTSTAMPED_TWIST_2		4353  /**/
flag asn1SccGeometry_msgs_TwistStamped_Decode(asn1SccGeometry_msgs_TwistStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_TwistWithCovariance twist;
} asn1SccGeometry_msgs_TwistWithCovarianceStamped;

flag asn1SccGeometry_msgs_TwistWithCovarianceStamped_Equal(const asn1SccGeometry_msgs_TwistWithCovarianceStamped* pVal1, const asn1SccGeometry_msgs_TwistWithCovarianceStamped* pVal2);

void asn1SccGeometry_msgs_TwistWithCovarianceStamped_Initialize(asn1SccGeometry_msgs_TwistWithCovarianceStamped* pVal);

#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_HEADER_SEQ		4481  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_HEADER_STAMP_SEC		4492  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_HEADER_STAMP_NSEC		4503  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_HEADER_FRAME_ID		4524  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_TWIST_LINEAR_X		4545  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_TWIST_LINEAR_Y		4556  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_TWIST_LINEAR_Z		4567  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_TWIST_ANGULAR_X		4588  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_TWIST_ANGULAR_Y		4599  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_TWIST_ANGULAR_Z		4610  /**/
#define ERR_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_COVARIANCE_ELM		4641  /**/
flag asn1SccGeometry_msgs_TwistWithCovarianceStamped_IsConstraintValid(const asn1SccGeometry_msgs_TwistWithCovarianceStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED		4668  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_HEADER_2		4541  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_2		4664  /**/
#define asn1SccGeometry_msgs_TwistWithCovarianceStamped_REQUIRED_BYTES_FOR_ENCODING       619 
#define asn1SccGeometry_msgs_TwistWithCovarianceStamped_REQUIRED_BITS_FOR_ENCODING        4950

flag asn1SccGeometry_msgs_TwistWithCovarianceStamped_Encode(const asn1SccGeometry_msgs_TwistWithCovarianceStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED		4669  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_HEADER_2		4542  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_TWISTWITHCOVARIANCESTAMPED_TWIST_2		4665  /**/
flag asn1SccGeometry_msgs_TwistWithCovarianceStamped_Decode(asn1SccGeometry_msgs_TwistWithCovarianceStamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Vector3 vector;
} asn1SccGeometry_msgs_Vector3Stamped;

flag asn1SccGeometry_msgs_Vector3Stamped_Equal(const asn1SccGeometry_msgs_Vector3Stamped* pVal1, const asn1SccGeometry_msgs_Vector3Stamped* pVal2);

void asn1SccGeometry_msgs_Vector3Stamped_Initialize(asn1SccGeometry_msgs_Vector3Stamped* pVal);

#define ERR_GEOMETRY_MSGS_VECTOR3STAMPED_HEADER_SEQ		4713  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3STAMPED_HEADER_STAMP_SEC		4724  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3STAMPED_HEADER_STAMP_NSEC		4735  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3STAMPED_HEADER_FRAME_ID		4756  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3STAMPED_VECTOR_X		4777  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3STAMPED_VECTOR_Y		4788  /**/
#define ERR_GEOMETRY_MSGS_VECTOR3STAMPED_VECTOR_Z		4799  /**/
flag asn1SccGeometry_msgs_Vector3Stamped_IsConstraintValid(const asn1SccGeometry_msgs_Vector3Stamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_VECTOR3STAMPED		4820  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_VECTOR3STAMPED_HEADER_2		4773  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_VECTOR3STAMPED_VECTOR_2		4816  /**/
#define asn1SccGeometry_msgs_Vector3Stamped_REQUIRED_BYTES_FOR_ENCODING       112 
#define asn1SccGeometry_msgs_Vector3Stamped_REQUIRED_BITS_FOR_ENCODING        894

flag asn1SccGeometry_msgs_Vector3Stamped_Encode(const asn1SccGeometry_msgs_Vector3Stamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_VECTOR3STAMPED		4821  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_VECTOR3STAMPED_HEADER_2		4774  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_VECTOR3STAMPED_VECTOR_2		4817  /**/
flag asn1SccGeometry_msgs_Vector3Stamped_Decode(asn1SccGeometry_msgs_Vector3Stamped* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {
    asn1SccStd_msgs_Header header;
    asn1SccGeometry_msgs_Wrench wrench;
} asn1SccGeometry_msgs_WrenchStamped;

flag asn1SccGeometry_msgs_WrenchStamped_Equal(const asn1SccGeometry_msgs_WrenchStamped* pVal1, const asn1SccGeometry_msgs_WrenchStamped* pVal2);

void asn1SccGeometry_msgs_WrenchStamped_Initialize(asn1SccGeometry_msgs_WrenchStamped* pVal);

#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_HEADER_SEQ		4918  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_HEADER_STAMP_SEC		4929  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_HEADER_STAMP_NSEC		4940  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_HEADER_FRAME_ID		4961  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_FORCE_X		4982  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_FORCE_Y		4993  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_FORCE_Z		5004  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_TORQUE_X		5025  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_TORQUE_Y		5036  /**/
#define ERR_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_TORQUE_Z		5047  /**/
flag asn1SccGeometry_msgs_WrenchStamped_IsConstraintValid(const asn1SccGeometry_msgs_WrenchStamped* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_WRENCHSTAMPED		5078  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_WRENCHSTAMPED_HEADER_2		4978  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_2		5074  /**/
#define asn1SccGeometry_msgs_WrenchStamped_REQUIRED_BYTES_FOR_ENCODING       151 
#define asn1SccGeometry_msgs_WrenchStamped_REQUIRED_BITS_FOR_ENCODING        1206

flag asn1SccGeometry_msgs_WrenchStamped_Encode(const asn1SccGeometry_msgs_WrenchStamped* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_WRENCHSTAMPED		5079  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_WRENCHSTAMPED_HEADER_2		4979  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_WRENCHSTAMPED_WRENCH_2		5075  /**/
flag asn1SccGeometry_msgs_WrenchStamped_Decode(asn1SccGeometry_msgs_WrenchStamped* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Time asn1SccStd_msgs_Time;


flag asn1SccStd_msgs_Time_Equal(const asn1SccStd_msgs_Time* pVal1, const asn1SccStd_msgs_Time* pVal2);

void asn1SccStd_msgs_Time_Initialize(asn1SccStd_msgs_Time* pVal);

#define ERR_STD_MSGS_TIME_SEC		1019  /**/
#define ERR_STD_MSGS_TIME_NSEC		1030  /**/
flag asn1SccStd_msgs_Time_IsConstraintValid(const asn1SccStd_msgs_Time* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_TIME_2		1047  /**/
#define asn1SccStd_msgs_Time_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccStd_msgs_Time_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccStd_msgs_Time_Encode(const asn1SccStd_msgs_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_TIME_2		1048  /**/
flag asn1SccStd_msgs_Time_Decode(asn1SccStd_msgs_Time* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt32 asn1SccDummy_Std_msgs_Types_T;


flag asn1SccDummy_Std_msgs_Types_T_Equal(const asn1SccDummy_Std_msgs_Types_T* pVal1, const asn1SccDummy_Std_msgs_Types_T* pVal2);

void asn1SccDummy_Std_msgs_Types_T_Initialize(asn1SccDummy_Std_msgs_Types_T* pVal);

#define ERR_DUMMY_STD_MSGS_TYPES_T		5084  /**/
flag asn1SccDummy_Std_msgs_Types_T_IsConstraintValid(const asn1SccDummy_Std_msgs_Types_T* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DUMMY_STD_MSGS_TYPES_T_2		5091  /**/
#define asn1SccDummy_Std_msgs_Types_T_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccDummy_Std_msgs_Types_T_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccDummy_Std_msgs_Types_T_Encode(const asn1SccDummy_Std_msgs_Types_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DUMMY_STD_MSGS_TYPES_T_2		5092  /**/
flag asn1SccDummy_Std_msgs_Types_T_Decode(asn1SccDummy_Std_msgs_Types_T* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt32 asn1SccDummy_Geometry_msgs_Types_T;


flag asn1SccDummy_Geometry_msgs_Types_T_Equal(const asn1SccDummy_Geometry_msgs_Types_T* pVal1, const asn1SccDummy_Geometry_msgs_Types_T* pVal2);

void asn1SccDummy_Geometry_msgs_Types_T_Initialize(asn1SccDummy_Geometry_msgs_Types_T* pVal);

#define ERR_DUMMY_GEOMETRY_MSGS_TYPES_T		5130  /**/
flag asn1SccDummy_Geometry_msgs_Types_T_IsConstraintValid(const asn1SccDummy_Geometry_msgs_Types_T* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DUMMY_GEOMETRY_MSGS_TYPES_T_2		5137  /**/
#define asn1SccDummy_Geometry_msgs_Types_T_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccDummy_Geometry_msgs_Types_T_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccDummy_Geometry_msgs_Types_T_Encode(const asn1SccDummy_Geometry_msgs_Types_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DUMMY_GEOMETRY_MSGS_TYPES_T_2		5138  /**/
flag asn1SccDummy_Geometry_msgs_Types_T_Decode(asn1SccDummy_Geometry_msgs_Types_T* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


flag asn1SccT_Int8_Equal(const asn1SccT_Int8* pVal1, const asn1SccT_Int8* pVal2);

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_T_INT8		5109  /**/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT8		5110  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		5111  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Int8 asn1SccStd_msgs_Byte;


flag asn1SccStd_msgs_Byte_Equal(const asn1SccStd_msgs_Byte* pVal1, const asn1SccStd_msgs_Byte* pVal2);

void asn1SccStd_msgs_Byte_Initialize(asn1SccStd_msgs_Byte* pVal);

#define ERR_STD_MSGS_BYTE		12  /**/
flag asn1SccStd_msgs_Byte_IsConstraintValid(const asn1SccStd_msgs_Byte* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_BYTE_2		19  /**/
#define asn1SccStd_msgs_Byte_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccStd_msgs_Byte_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccStd_msgs_Byte_Encode(const asn1SccStd_msgs_Byte* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_BYTE_2		20  /**/
flag asn1SccStd_msgs_Byte_Decode(asn1SccStd_msgs_Byte* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Int8 asn1SccStd_msgs_Int8;


flag asn1SccStd_msgs_Int8_Equal(const asn1SccStd_msgs_Int8* pVal1, const asn1SccStd_msgs_Int8* pVal2);

void asn1SccStd_msgs_Int8_Initialize(asn1SccStd_msgs_Int8* pVal);

#define ERR_STD_MSGS_INT8		796  /**/
flag asn1SccStd_msgs_Int8_IsConstraintValid(const asn1SccStd_msgs_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT8_2		803  /**/
#define asn1SccStd_msgs_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccStd_msgs_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccStd_msgs_Int8_Encode(const asn1SccStd_msgs_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT8_2		804  /**/
flag asn1SccStd_msgs_Int8_Decode(asn1SccStd_msgs_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

typedef struct {    int nCount; 
    
    asn1SccT_Int8 arr[60];
} asn1SccStd_msgs_Int8MultiArray_data_value;

typedef struct {
    asn1SccStd_msgs_MultiArrayLayout layout;
    asn1SccStd_msgs_Int8MultiArray_data_value data_value;
} asn1SccStd_msgs_Int8MultiArray;

flag asn1SccStd_msgs_Int8MultiArray_data_value_Equal(const asn1SccStd_msgs_Int8MultiArray_data_value* pVal1, const asn1SccStd_msgs_Int8MultiArray_data_value* pVal2);

flag asn1SccStd_msgs_Int8MultiArray_Equal(const asn1SccStd_msgs_Int8MultiArray* pVal1, const asn1SccStd_msgs_Int8MultiArray* pVal2);

void asn1SccStd_msgs_Int8MultiArray_data_value_Initialize(asn1SccStd_msgs_Int8MultiArray_data_value* pVal);
void asn1SccStd_msgs_Int8MultiArray_Initialize(asn1SccStd_msgs_Int8MultiArray* pVal);

#define ERR_STD_MSGS_INT8MULTIARRAY_LAYOUT_DIM_ELM_LABEL		807  /**/
#define ERR_STD_MSGS_INT8MULTIARRAY_LAYOUT_DIM_ELM_SIZE_VALUE		818  /**/
#define ERR_STD_MSGS_INT8MULTIARRAY_LAYOUT_DIM_ELM_STRIDE		829  /**/
#define ERR_STD_MSGS_INT8MULTIARRAY_LAYOUT_DIM		850  /**/
#define ERR_STD_MSGS_INT8MULTIARRAY_LAYOUT_DATA_OFFSET		857  /**/
#define ERR_STD_MSGS_INT8MULTIARRAY_DATA_VALUE_ELM		878  /**/
#define ERR_STD_MSGS_INT8MULTIARRAY_DATA_VALUE		889  /**/
flag asn1SccStd_msgs_Int8MultiArray_IsConstraintValid(const asn1SccStd_msgs_Int8MultiArray* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_INT8MULTIARRAY		896  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT8MULTIARRAY_LAYOUT_2		874  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT8MULTIARRAY_DATA_VALUE		890  /**/
#define ERR_UPER_ENCODE_STD_MSGS_INT8MULTIARRAY_DATA_VALUE_ELM_2		885  /**/
#define asn1SccStd_msgs_Int8MultiArray_REQUIRED_BYTES_FOR_ENCODING       4191 
#define asn1SccStd_msgs_Int8MultiArray_REQUIRED_BITS_FOR_ENCODING        33524

flag asn1SccStd_msgs_Int8MultiArray_Encode(const asn1SccStd_msgs_Int8MultiArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_INT8MULTIARRAY		897  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT8MULTIARRAY_LAYOUT_2		875  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT8MULTIARRAY_DATA_VALUE		891  /**/
#define ERR_UPER_DECODE_STD_MSGS_INT8MULTIARRAY_DATA_VALUE_ELM_2		886  /**/
flag asn1SccStd_msgs_Int8MultiArray_Decode(asn1SccStd_msgs_Int8MultiArray* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


flag asn1SccT_UInt8_Equal(const asn1SccT_UInt8* pVal1, const asn1SccT_UInt8* pVal2);

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_T_UINT8		5116  /**/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT8		5117  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		5118  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt8 asn1SccStd_msgs_Char;


flag asn1SccStd_msgs_Char_Equal(const asn1SccStd_msgs_Char* pVal1, const asn1SccStd_msgs_Char* pVal2);

void asn1SccStd_msgs_Char_Initialize(asn1SccStd_msgs_Char* pVal);

#define ERR_STD_MSGS_CHAR		107  /**/
flag asn1SccStd_msgs_Char_IsConstraintValid(const asn1SccStd_msgs_Char* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_CHAR_2		114  /**/
#define asn1SccStd_msgs_Char_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccStd_msgs_Char_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccStd_msgs_Char_Encode(const asn1SccStd_msgs_Char* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_CHAR_2		115  /**/
flag asn1SccStd_msgs_Char_Decode(asn1SccStd_msgs_Char* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt8 asn1SccStd_msgs_UInt8;


flag asn1SccStd_msgs_UInt8_Equal(const asn1SccStd_msgs_UInt8* pVal1, const asn1SccStd_msgs_UInt8* pVal2);

void asn1SccStd_msgs_UInt8_Initialize(asn1SccStd_msgs_UInt8* pVal);

#define ERR_STD_MSGS_UINT8		1369  /**/
flag asn1SccStd_msgs_UInt8_IsConstraintValid(const asn1SccStd_msgs_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_UINT8_2		1376  /**/
#define asn1SccStd_msgs_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccStd_msgs_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccStd_msgs_UInt8_Encode(const asn1SccStd_msgs_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_UINT8_2		1377  /**/
flag asn1SccStd_msgs_UInt8_Decode(asn1SccStd_msgs_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


flag asn1SccT_Boolean_Equal(const asn1SccT_Boolean* pVal1, const asn1SccT_Boolean* pVal2);

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_T_BOOLEAN		5123  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_BOOLEAN		5124  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		5125  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_Boolean asn1SccStd_msgs_Bool;


flag asn1SccStd_msgs_Bool_Equal(const asn1SccStd_msgs_Bool* pVal1, const asn1SccStd_msgs_Bool* pVal2);

void asn1SccStd_msgs_Bool_Initialize(asn1SccStd_msgs_Bool* pVal);

#define ERR_STD_MSGS_BOOL		1  /**/
flag asn1SccStd_msgs_Bool_IsConstraintValid(const asn1SccStd_msgs_Bool* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_MSGS_BOOL_2		8  /**/
#define asn1SccStd_msgs_Bool_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccStd_msgs_Bool_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccStd_msgs_Bool_Encode(const asn1SccStd_msgs_Bool* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_MSGS_BOOL_2		9  /**/
flag asn1SccStd_msgs_Bool_Decode(asn1SccStd_msgs_Bool* pVal, BitStream* pBitStrm, int* pErrCode);

extern const asn1SccT_UInt32 numT_String;
extern const asn1SccT_UInt32 max_Std_msgs_UInt8MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_Int16MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_Int32MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_Float32MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_UInt16MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_ByteMultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_MultiArrayLayout;
extern const asn1SccT_UInt32 max_Std_msgs_Float64MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_Int8MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_UInt64MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_Int64MultiArray;
extern const asn1SccT_UInt32 max_Std_msgs_UInt32MultiArray;
extern const asn1SccT_UInt32 max_Geometry_msgs_PoseArray;
extern const asn1SccT_UInt32 max_Geometry_msgs_Polygon; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif